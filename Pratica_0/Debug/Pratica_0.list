
Pratica_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f8  08000300  00001300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f8  080002f8  00001300  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080002f8  080002f8  00001300  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080002f8  08000300  00001300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f8  080002f8  000012f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002fc  080002fc  000012fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000300  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000300  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000044e  00000000  00000000  00001329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000010a  00000000  00000000  00001777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00001888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003e  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff2a  00000000  00000000  00001926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000566  00000000  00000000  00011850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000541c0  00000000  00000000  00011db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00065f76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000b8  00000000  00000000  00065fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00066074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002e0 	.word	0x080002e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002e0 	.word	0x080002e0

08000170 <clock_prescaler_config>:
#include "stm32f1xx.h"

volatile uint8_t toggle = 0;

void clock_prescaler_config(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    // Reduz o clock AHB para 1/8
    RCC->CFGR |= RCC_CFGR_HPRE_DIV8;
 8000174:	4b04      	ldr	r3, [pc, #16]	@ (8000188 <clock_prescaler_config+0x18>)
 8000176:	685b      	ldr	r3, [r3, #4]
 8000178:	4a03      	ldr	r2, [pc, #12]	@ (8000188 <clock_prescaler_config+0x18>)
 800017a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800017e:	6053      	str	r3, [r2, #4]
}
 8000180:	bf00      	nop
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	40021000 	.word	0x40021000

0800018c <SysTick_Init>:

void SysTick_Init(void) {
 800018c:	b480      	push	{r7}
 800018e:	af00      	add	r7, sp, #0
    SysTick->LOAD = 100000 - 1;
 8000190:	4b06      	ldr	r3, [pc, #24]	@ (80001ac <SysTick_Init+0x20>)
 8000192:	4a07      	ldr	r2, [pc, #28]	@ (80001b0 <SysTick_Init+0x24>)
 8000194:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000196:	4b05      	ldr	r3, [pc, #20]	@ (80001ac <SysTick_Init+0x20>)
 8000198:	2200      	movs	r2, #0
 800019a:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 800019c:	4b03      	ldr	r3, [pc, #12]	@ (80001ac <SysTick_Init+0x20>)
 800019e:	2207      	movs	r2, #7
 80001a0:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_TICKINT_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}
 80001a2:	bf00      	nop
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000e010 	.word	0xe000e010
 80001b0:	0001869f 	.word	0x0001869f

080001b4 <main>:

int main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
    clock_prescaler_config();
 80001b8:	f7ff ffda 	bl	8000170 <clock_prescaler_config>
    SysTick_Init();
 80001bc:	f7ff ffe6 	bl	800018c <SysTick_Init>

    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 80001c0:	4b16      	ldr	r3, [pc, #88]	@ (800021c <main+0x68>)
 80001c2:	699b      	ldr	r3, [r3, #24]
 80001c4:	4a15      	ldr	r2, [pc, #84]	@ (800021c <main+0x68>)
 80001c6:	f043 0310 	orr.w	r3, r3, #16
 80001ca:	6193      	str	r3, [r2, #24]

    // Configura PC13 como saída push-pull
    GPIOC->CRH &= ~(0xF << 20);
 80001cc:	4b14      	ldr	r3, [pc, #80]	@ (8000220 <main+0x6c>)
 80001ce:	685b      	ldr	r3, [r3, #4]
 80001d0:	4a13      	ldr	r2, [pc, #76]	@ (8000220 <main+0x6c>)
 80001d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80001d6:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |=  (0x2 << 20);
 80001d8:	4b11      	ldr	r3, [pc, #68]	@ (8000220 <main+0x6c>)
 80001da:	685b      	ldr	r3, [r3, #4]
 80001dc:	4a10      	ldr	r2, [pc, #64]	@ (8000220 <main+0x6c>)
 80001de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80001e2:	6053      	str	r3, [r2, #4]

    // LED começa ligado
    GPIOC->ODR &= ~(1 << 13);
 80001e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000220 <main+0x6c>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000220 <main+0x6c>)
 80001ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80001ee:	60d3      	str	r3, [r2, #12]

    SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk; // Garante modo SLEEP
 80001f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000224 <main+0x70>)
 80001f2:	691b      	ldr	r3, [r3, #16]
 80001f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000224 <main+0x70>)
 80001f6:	f023 0304 	bic.w	r3, r3, #4
 80001fa:	6113      	str	r3, [r2, #16]

    while (1)
    {
        if (toggle)
 80001fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000228 <main+0x74>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	b2db      	uxtb	r3, r3
 8000202:	2b00      	cmp	r3, #0
 8000204:	d008      	beq.n	8000218 <main+0x64>
        {
            GPIOC->ODR ^= (1 << 13); // Inverte o estado do LED
 8000206:	4b06      	ldr	r3, [pc, #24]	@ (8000220 <main+0x6c>)
 8000208:	68db      	ldr	r3, [r3, #12]
 800020a:	4a05      	ldr	r2, [pc, #20]	@ (8000220 <main+0x6c>)
 800020c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8000210:	60d3      	str	r3, [r2, #12]
            toggle = 0;
 8000212:	4b05      	ldr	r3, [pc, #20]	@ (8000228 <main+0x74>)
 8000214:	2200      	movs	r2, #0
 8000216:	701a      	strb	r2, [r3, #0]
        }

        __WFI(); // Dorme até a próxima interrupção do SysTick
 8000218:	bf30      	wfi
        if (toggle)
 800021a:	e7ef      	b.n	80001fc <main+0x48>
 800021c:	40021000 	.word	0x40021000
 8000220:	40011000 	.word	0x40011000
 8000224:	e000ed00 	.word	0xe000ed00
 8000228:	2000001c 	.word	0x2000001c

0800022c <SysTick_Handler>:
    }
}

// Interrupção do SysTick
void SysTick_Handler(void)
{
 800022c:	b480      	push	{r7}
 800022e:	af00      	add	r7, sp, #0
    toggle = 1;
 8000230:	4b03      	ldr	r3, [pc, #12]	@ (8000240 <SysTick_Handler+0x14>)
 8000232:	2201      	movs	r2, #1
 8000234:	701a      	strb	r2, [r3, #0]
}
 8000236:	bf00      	nop
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	2000001c 	.word	0x2000001c

08000244 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000244:	480d      	ldr	r0, [pc, #52]	@ (800027c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000246:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000248:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800024c:	480c      	ldr	r0, [pc, #48]	@ (8000280 <LoopForever+0x6>)
  ldr r1, =_edata
 800024e:	490d      	ldr	r1, [pc, #52]	@ (8000284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000250:	4a0d      	ldr	r2, [pc, #52]	@ (8000288 <LoopForever+0xe>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0a      	ldr	r2, [pc, #40]	@ (800028c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000264:	4c0a      	ldr	r4, [pc, #40]	@ (8000290 <LoopForever+0x16>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000272:	f000 f811 	bl	8000298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000276:	f7ff ff9d 	bl	80001b4 <main>

0800027a <LoopForever>:

LoopForever:
  b LoopForever
 800027a:	e7fe      	b.n	800027a <LoopForever>
  ldr   r0, =_estack
 800027c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000284:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000288:	08000300 	.word	0x08000300
  ldr r2, =_sbss
 800028c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000290:	20000020 	.word	0x20000020

08000294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC1_2_IRQHandler>
	...

08000298 <__libc_init_array>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	2600      	movs	r6, #0
 800029c:	4d0c      	ldr	r5, [pc, #48]	@ (80002d0 <__libc_init_array+0x38>)
 800029e:	4c0d      	ldr	r4, [pc, #52]	@ (80002d4 <__libc_init_array+0x3c>)
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	10a4      	asrs	r4, r4, #2
 80002a4:	42a6      	cmp	r6, r4
 80002a6:	d109      	bne.n	80002bc <__libc_init_array+0x24>
 80002a8:	f000 f81a 	bl	80002e0 <_init>
 80002ac:	2600      	movs	r6, #0
 80002ae:	4d0a      	ldr	r5, [pc, #40]	@ (80002d8 <__libc_init_array+0x40>)
 80002b0:	4c0a      	ldr	r4, [pc, #40]	@ (80002dc <__libc_init_array+0x44>)
 80002b2:	1b64      	subs	r4, r4, r5
 80002b4:	10a4      	asrs	r4, r4, #2
 80002b6:	42a6      	cmp	r6, r4
 80002b8:	d105      	bne.n	80002c6 <__libc_init_array+0x2e>
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c0:	4798      	blx	r3
 80002c2:	3601      	adds	r6, #1
 80002c4:	e7ee      	b.n	80002a4 <__libc_init_array+0xc>
 80002c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ca:	4798      	blx	r3
 80002cc:	3601      	adds	r6, #1
 80002ce:	e7f2      	b.n	80002b6 <__libc_init_array+0x1e>
 80002d0:	080002f8 	.word	0x080002f8
 80002d4:	080002f8 	.word	0x080002f8
 80002d8:	080002f8 	.word	0x080002f8
 80002dc:	080002fc 	.word	0x080002fc

080002e0 <_init>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr

080002ec <_fini>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr
