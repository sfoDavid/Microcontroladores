
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003bc  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004ec  080004f4  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004ec  080004ec  000014f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080004ec  080004ec  000014f4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080004ec  080004f4  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004ec  080004ec  000014ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004f0  080004f0  000014f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004f4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004f4  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000066c  00000000  00000000  0000151d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001eb  00000000  00000000  00001b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00001d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000041  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff2a  00000000  00000000  00001e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000064a  00000000  00000000  00011d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005446c  00000000  00000000  0001238d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000667f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c4  00000000  00000000  0006683c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00066900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080004d4 	.word	0x080004d4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080004d4 	.word	0x080004d4

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	@ (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <TIM2_IRQHandler>:
uint8_t led_state = 0;


// Tratador da interrupção do TIM2
void TIM2_IRQHandler(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)           // Verifica se a interrupção de atualização ocorreu
 80001ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001b0:	691b      	ldr	r3, [r3, #16]
 80001b2:	f003 0301 	and.w	r3, r3, #1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d034      	beq.n	8000224 <TIM2_IRQHandler+0x7c>
    {
        TIM2->SR &= ~TIM_SR_UIF;         // Limpa a flag de interrupção
 80001ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80001be:	691b      	ldr	r3, [r3, #16]
 80001c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80001c4:	f023 0301 	bic.w	r3, r3, #1
 80001c8:	6113      	str	r3, [r2, #16]

        if (led_state == 0)
 80001ca:	4b17      	ldr	r3, [pc, #92]	@ (8000228 <TIM2_IRQHandler+0x80>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d108      	bne.n	80001e4 <TIM2_IRQHandler+0x3c>
        {
            Set_LED_Color(color_index);  // Liga o LED com a cor atual
 80001d2:	4b16      	ldr	r3, [pc, #88]	@ (800022c <TIM2_IRQHandler+0x84>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 f82c 	bl	8000234 <Set_LED_Color>
            led_state = 1;
 80001dc:	4b12      	ldr	r3, [pc, #72]	@ (8000228 <TIM2_IRQHandler+0x80>)
 80001de:	2201      	movs	r2, #1
 80001e0:	701a      	strb	r2, [r3, #0]
                blink_count = 0;
                color_index = (color_index + 1) % 8; // Alterna para a próxima cor
            }
        }
    }
}
 80001e2:	e01f      	b.n	8000224 <TIM2_IRQHandler+0x7c>
            Set_LED_Color(0);            // Desliga o LED
 80001e4:	2000      	movs	r0, #0
 80001e6:	f000 f825 	bl	8000234 <Set_LED_Color>
            led_state = 0;
 80001ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000228 <TIM2_IRQHandler+0x80>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	701a      	strb	r2, [r3, #0]
            blink_count++;
 80001f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000230 <TIM2_IRQHandler+0x88>)
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	3301      	adds	r3, #1
 80001f6:	b2da      	uxtb	r2, r3
 80001f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000230 <TIM2_IRQHandler+0x88>)
 80001fa:	701a      	strb	r2, [r3, #0]
            if (blink_count >= 2)        // Se piscou duas vezes
 80001fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000230 <TIM2_IRQHandler+0x88>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b01      	cmp	r3, #1
 8000202:	d90f      	bls.n	8000224 <TIM2_IRQHandler+0x7c>
                blink_count = 0;
 8000204:	4b0a      	ldr	r3, [pc, #40]	@ (8000230 <TIM2_IRQHandler+0x88>)
 8000206:	2200      	movs	r2, #0
 8000208:	701a      	strb	r2, [r3, #0]
                color_index = (color_index + 1) % 8; // Alterna para a próxima cor
 800020a:	4b08      	ldr	r3, [pc, #32]	@ (800022c <TIM2_IRQHandler+0x84>)
 800020c:	781b      	ldrb	r3, [r3, #0]
 800020e:	3301      	adds	r3, #1
 8000210:	425a      	negs	r2, r3
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	f002 0207 	and.w	r2, r2, #7
 800021a:	bf58      	it	pl
 800021c:	4253      	negpl	r3, r2
 800021e:	b2da      	uxtb	r2, r3
 8000220:	4b02      	ldr	r3, [pc, #8]	@ (800022c <TIM2_IRQHandler+0x84>)
 8000222:	701a      	strb	r2, [r3, #0]
}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	2000001e 	.word	0x2000001e
 800022c:	2000001c 	.word	0x2000001c
 8000230:	2000001d 	.word	0x2000001d

08000234 <Set_LED_Color>:


// Função para acionar as cores do LED RGB
void Set_LED_Color(uint8_t color)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
    GPIOC->ODR |= (1 << 13) | (1 << 14) | (1 << 15); // Desativa todos os LEDs
 800023e:	4b5d      	ldr	r3, [pc, #372]	@ (80003b4 <Set_LED_Color+0x180>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	4a5c      	ldr	r2, [pc, #368]	@ (80003b4 <Set_LED_Color+0x180>)
 8000244:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000248:	60d3      	str	r3, [r2, #12]

    switch(color)
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	2b07      	cmp	r3, #7
 800024e:	f200 80ab 	bhi.w	80003a8 <Set_LED_Color+0x174>
 8000252:	a201      	add	r2, pc, #4	@ (adr r2, 8000258 <Set_LED_Color+0x24>)
 8000254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000258:	08000279 	.word	0x08000279
 800025c:	0800029f 	.word	0x0800029f
 8000260:	080002c5 	.word	0x080002c5
 8000264:	080002eb 	.word	0x080002eb
 8000268:	08000311 	.word	0x08000311
 800026c:	08000337 	.word	0x08000337
 8000270:	0800035d 	.word	0x0800035d
 8000274:	08000383 	.word	0x08000383
    {
        case 0:  // Apagado
            GPIOC->ODR &= ~(1 << 13);
 8000278:	4b4e      	ldr	r3, [pc, #312]	@ (80003b4 <Set_LED_Color+0x180>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	4a4d      	ldr	r2, [pc, #308]	@ (80003b4 <Set_LED_Color+0x180>)
 800027e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000282:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR &= ~(1 << 14);
 8000284:	4b4b      	ldr	r3, [pc, #300]	@ (80003b4 <Set_LED_Color+0x180>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	4a4a      	ldr	r2, [pc, #296]	@ (80003b4 <Set_LED_Color+0x180>)
 800028a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800028e:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR &= ~(1 << 15);
 8000290:	4b48      	ldr	r3, [pc, #288]	@ (80003b4 <Set_LED_Color+0x180>)
 8000292:	68db      	ldr	r3, [r3, #12]
 8000294:	4a47      	ldr	r2, [pc, #284]	@ (80003b4 <Set_LED_Color+0x180>)
 8000296:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800029a:	60d3      	str	r3, [r2, #12]
            break;
 800029c:	e084      	b.n	80003a8 <Set_LED_Color+0x174>
        case 1:  // Vermelho
            GPIOC->ODR |=  (1 << 13);
 800029e:	4b45      	ldr	r3, [pc, #276]	@ (80003b4 <Set_LED_Color+0x180>)
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	4a44      	ldr	r2, [pc, #272]	@ (80003b4 <Set_LED_Color+0x180>)
 80002a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002a8:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR &= ~(1 << 14);
 80002aa:	4b42      	ldr	r3, [pc, #264]	@ (80003b4 <Set_LED_Color+0x180>)
 80002ac:	68db      	ldr	r3, [r3, #12]
 80002ae:	4a41      	ldr	r2, [pc, #260]	@ (80003b4 <Set_LED_Color+0x180>)
 80002b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80002b4:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR &= ~(1 << 15);
 80002b6:	4b3f      	ldr	r3, [pc, #252]	@ (80003b4 <Set_LED_Color+0x180>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a3e      	ldr	r2, [pc, #248]	@ (80003b4 <Set_LED_Color+0x180>)
 80002bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002c0:	60d3      	str	r3, [r2, #12]
            break;
 80002c2:	e071      	b.n	80003a8 <Set_LED_Color+0x174>
        case 2:  // Verde
            GPIOC->ODR &= ~(1 << 13);
 80002c4:	4b3b      	ldr	r3, [pc, #236]	@ (80003b4 <Set_LED_Color+0x180>)
 80002c6:	68db      	ldr	r3, [r3, #12]
 80002c8:	4a3a      	ldr	r2, [pc, #232]	@ (80003b4 <Set_LED_Color+0x180>)
 80002ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002ce:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR |=  (1 << 14);
 80002d0:	4b38      	ldr	r3, [pc, #224]	@ (80003b4 <Set_LED_Color+0x180>)
 80002d2:	68db      	ldr	r3, [r3, #12]
 80002d4:	4a37      	ldr	r2, [pc, #220]	@ (80003b4 <Set_LED_Color+0x180>)
 80002d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80002da:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR &= ~(1 << 15);
 80002dc:	4b35      	ldr	r3, [pc, #212]	@ (80003b4 <Set_LED_Color+0x180>)
 80002de:	68db      	ldr	r3, [r3, #12]
 80002e0:	4a34      	ldr	r2, [pc, #208]	@ (80003b4 <Set_LED_Color+0x180>)
 80002e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80002e6:	60d3      	str	r3, [r2, #12]
            break;
 80002e8:	e05e      	b.n	80003a8 <Set_LED_Color+0x174>
        case 3:  // Azul
            GPIOC->ODR &= ~(1 << 13);
 80002ea:	4b32      	ldr	r3, [pc, #200]	@ (80003b4 <Set_LED_Color+0x180>)
 80002ec:	68db      	ldr	r3, [r3, #12]
 80002ee:	4a31      	ldr	r2, [pc, #196]	@ (80003b4 <Set_LED_Color+0x180>)
 80002f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80002f4:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR &= ~(1 << 14);
 80002f6:	4b2f      	ldr	r3, [pc, #188]	@ (80003b4 <Set_LED_Color+0x180>)
 80002f8:	68db      	ldr	r3, [r3, #12]
 80002fa:	4a2e      	ldr	r2, [pc, #184]	@ (80003b4 <Set_LED_Color+0x180>)
 80002fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000300:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR |=  (1 << 15);
 8000302:	4b2c      	ldr	r3, [pc, #176]	@ (80003b4 <Set_LED_Color+0x180>)
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	4a2b      	ldr	r2, [pc, #172]	@ (80003b4 <Set_LED_Color+0x180>)
 8000308:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800030c:	60d3      	str	r3, [r2, #12]
            break;
 800030e:	e04b      	b.n	80003a8 <Set_LED_Color+0x174>
        case 4:  // Amarelo (Vermelho + Verde)
            GPIOC->ODR |=  (1 << 13);
 8000310:	4b28      	ldr	r3, [pc, #160]	@ (80003b4 <Set_LED_Color+0x180>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	4a27      	ldr	r2, [pc, #156]	@ (80003b4 <Set_LED_Color+0x180>)
 8000316:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800031a:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR |=  (1 << 14);
 800031c:	4b25      	ldr	r3, [pc, #148]	@ (80003b4 <Set_LED_Color+0x180>)
 800031e:	68db      	ldr	r3, [r3, #12]
 8000320:	4a24      	ldr	r2, [pc, #144]	@ (80003b4 <Set_LED_Color+0x180>)
 8000322:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000326:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR &= ~(1 << 15);
 8000328:	4b22      	ldr	r3, [pc, #136]	@ (80003b4 <Set_LED_Color+0x180>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4a21      	ldr	r2, [pc, #132]	@ (80003b4 <Set_LED_Color+0x180>)
 800032e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000332:	60d3      	str	r3, [r2, #12]
            break;
 8000334:	e038      	b.n	80003a8 <Set_LED_Color+0x174>
        case 5:  // Ciano (Verde + Azul)
            GPIOC->ODR &= ~(1 << 13);
 8000336:	4b1f      	ldr	r3, [pc, #124]	@ (80003b4 <Set_LED_Color+0x180>)
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	4a1e      	ldr	r2, [pc, #120]	@ (80003b4 <Set_LED_Color+0x180>)
 800033c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000340:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR |=  (1 << 14);
 8000342:	4b1c      	ldr	r3, [pc, #112]	@ (80003b4 <Set_LED_Color+0x180>)
 8000344:	68db      	ldr	r3, [r3, #12]
 8000346:	4a1b      	ldr	r2, [pc, #108]	@ (80003b4 <Set_LED_Color+0x180>)
 8000348:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800034c:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR |=  (1 << 15);
 800034e:	4b19      	ldr	r3, [pc, #100]	@ (80003b4 <Set_LED_Color+0x180>)
 8000350:	68db      	ldr	r3, [r3, #12]
 8000352:	4a18      	ldr	r2, [pc, #96]	@ (80003b4 <Set_LED_Color+0x180>)
 8000354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000358:	60d3      	str	r3, [r2, #12]
            break;
 800035a:	e025      	b.n	80003a8 <Set_LED_Color+0x174>
        case 6:  // Roxo (Vermelho + Azul)
            GPIOC->ODR |=  (1 << 13);
 800035c:	4b15      	ldr	r3, [pc, #84]	@ (80003b4 <Set_LED_Color+0x180>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	4a14      	ldr	r2, [pc, #80]	@ (80003b4 <Set_LED_Color+0x180>)
 8000362:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000366:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR &= ~(1 << 14);
 8000368:	4b12      	ldr	r3, [pc, #72]	@ (80003b4 <Set_LED_Color+0x180>)
 800036a:	68db      	ldr	r3, [r3, #12]
 800036c:	4a11      	ldr	r2, [pc, #68]	@ (80003b4 <Set_LED_Color+0x180>)
 800036e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000372:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR |=  (1 << 15);
 8000374:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <Set_LED_Color+0x180>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a0e      	ldr	r2, [pc, #56]	@ (80003b4 <Set_LED_Color+0x180>)
 800037a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800037e:	60d3      	str	r3, [r2, #12]
            break;
 8000380:	e012      	b.n	80003a8 <Set_LED_Color+0x174>
        case 7:  // Branco (Vermelho + Verde + Azul)
            GPIOC->ODR |=  (1 << 13);
 8000382:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <Set_LED_Color+0x180>)
 8000384:	68db      	ldr	r3, [r3, #12]
 8000386:	4a0b      	ldr	r2, [pc, #44]	@ (80003b4 <Set_LED_Color+0x180>)
 8000388:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800038c:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR |=  (1 << 14);
 800038e:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <Set_LED_Color+0x180>)
 8000390:	68db      	ldr	r3, [r3, #12]
 8000392:	4a08      	ldr	r2, [pc, #32]	@ (80003b4 <Set_LED_Color+0x180>)
 8000394:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000398:	60d3      	str	r3, [r2, #12]
            GPIOC->ODR |=  (1 << 15);
 800039a:	4b06      	ldr	r3, [pc, #24]	@ (80003b4 <Set_LED_Color+0x180>)
 800039c:	68db      	ldr	r3, [r3, #12]
 800039e:	4a05      	ldr	r2, [pc, #20]	@ (80003b4 <Set_LED_Color+0x180>)
 80003a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003a4:	60d3      	str	r3, [r2, #12]
            break;
 80003a6:	bf00      	nop
    }
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40011000 	.word	0x40011000

080003b8 <main>:

int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 4);  // Habilita o clock para o GPIOC
 80003bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000430 <main+0x78>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000430 <main+0x78>)
 80003c2:	f043 0310 	orr.w	r3, r3, #16
 80003c6:	6193      	str	r3, [r2, #24]
	GPIOC->CRH &= 0x000FFFFF;  // Configura os pinos PC13, PC14 e PC15 como saída push-pull de 2 MHz
 80003c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000434 <main+0x7c>)
 80003ca:	685b      	ldr	r3, [r3, #4]
 80003cc:	4a19      	ldr	r2, [pc, #100]	@ (8000434 <main+0x7c>)
 80003ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80003d2:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= 0x22200000;
 80003d4:	4b17      	ldr	r3, [pc, #92]	@ (8000434 <main+0x7c>)
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	4a16      	ldr	r2, [pc, #88]	@ (8000434 <main+0x7c>)
 80003da:	f043 5308 	orr.w	r3, r3, #570425344	@ 0x22000000
 80003de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003e2:	6053      	str	r3, [r2, #4]

	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; // Habilita o clock para o TIM2
 80003e4:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <main+0x78>)
 80003e6:	69db      	ldr	r3, [r3, #28]
 80003e8:	4a11      	ldr	r2, [pc, #68]	@ (8000430 <main+0x78>)
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	61d3      	str	r3, [r2, #28]
	TIM2->PSC = 7999;                   // Prescaler para dividir o clock de 8 MHz para 1 kHz (1 ms)
 80003f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003f4:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80003f8:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 500 - 1;             	// Carrega o valor de comparação para o período desejado (500ms)
 80003fa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fe:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8000402:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->DIER |= TIM_DIER_UIE;         // Habilita a interrupção de atualização
 8000404:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_CEN;           // Ativa o Timer
 8000414:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(TIM2_IRQn);          // Habilita a interrupção do TIM2 no NVIC
 8000424:	201c      	movs	r0, #28
 8000426:	f7ff fea3 	bl	8000170 <__NVIC_EnableIRQ>


    while(1)
 800042a:	bf00      	nop
 800042c:	e7fd      	b.n	800042a <main+0x72>
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000
 8000434:	40011000 	.word	0x40011000

08000438 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000438:	480d      	ldr	r0, [pc, #52]	@ (8000470 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800043a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800043c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000440:	480c      	ldr	r0, [pc, #48]	@ (8000474 <LoopForever+0x6>)
  ldr r1, =_edata
 8000442:	490d      	ldr	r1, [pc, #52]	@ (8000478 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000444:	4a0d      	ldr	r2, [pc, #52]	@ (800047c <LoopForever+0xe>)
  movs r3, #0
 8000446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000448:	e002      	b.n	8000450 <LoopCopyDataInit>

0800044a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800044c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044e:	3304      	adds	r3, #4

08000450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000454:	d3f9      	bcc.n	800044a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000456:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000458:	4c0a      	ldr	r4, [pc, #40]	@ (8000484 <LoopForever+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800045c:	e001      	b.n	8000462 <LoopFillZerobss>

0800045e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000460:	3204      	adds	r2, #4

08000462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000464:	d3fb      	bcc.n	800045e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000466:	f000 f811 	bl	800048c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046a:	f7ff ffa5 	bl	80003b8 <main>

0800046e <LoopForever>:

LoopForever:
  b LoopForever
 800046e:	e7fe      	b.n	800046e <LoopForever>
  ldr   r0, =_estack
 8000470:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800047c:	080004f4 	.word	0x080004f4
  ldr r2, =_sbss
 8000480:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000484:	20000020 	.word	0x20000020

08000488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC1_2_IRQHandler>
	...

0800048c <__libc_init_array>:
 800048c:	b570      	push	{r4, r5, r6, lr}
 800048e:	2600      	movs	r6, #0
 8000490:	4d0c      	ldr	r5, [pc, #48]	@ (80004c4 <__libc_init_array+0x38>)
 8000492:	4c0d      	ldr	r4, [pc, #52]	@ (80004c8 <__libc_init_array+0x3c>)
 8000494:	1b64      	subs	r4, r4, r5
 8000496:	10a4      	asrs	r4, r4, #2
 8000498:	42a6      	cmp	r6, r4
 800049a:	d109      	bne.n	80004b0 <__libc_init_array+0x24>
 800049c:	f000 f81a 	bl	80004d4 <_init>
 80004a0:	2600      	movs	r6, #0
 80004a2:	4d0a      	ldr	r5, [pc, #40]	@ (80004cc <__libc_init_array+0x40>)
 80004a4:	4c0a      	ldr	r4, [pc, #40]	@ (80004d0 <__libc_init_array+0x44>)
 80004a6:	1b64      	subs	r4, r4, r5
 80004a8:	10a4      	asrs	r4, r4, #2
 80004aa:	42a6      	cmp	r6, r4
 80004ac:	d105      	bne.n	80004ba <__libc_init_array+0x2e>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b4:	4798      	blx	r3
 80004b6:	3601      	adds	r6, #1
 80004b8:	e7ee      	b.n	8000498 <__libc_init_array+0xc>
 80004ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80004be:	4798      	blx	r3
 80004c0:	3601      	adds	r6, #1
 80004c2:	e7f2      	b.n	80004aa <__libc_init_array+0x1e>
 80004c4:	080004ec 	.word	0x080004ec
 80004c8:	080004ec 	.word	0x080004ec
 80004cc:	080004ec 	.word	0x080004ec
 80004d0:	080004f0 	.word	0x080004f0

080004d4 <_init>:
 80004d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d6:	bf00      	nop
 80004d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004da:	bc08      	pop	{r3}
 80004dc:	469e      	mov	lr, r3
 80004de:	4770      	bx	lr

080004e0 <_fini>:
 80004e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004e2:	bf00      	nop
 80004e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e6:	bc08      	pop	{r3}
 80004e8:	469e      	mov	lr, r3
 80004ea:	4770      	bx	lr
