
BM_Led_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000208c  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  080021bc  080021bc  000031bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002558  08002558  00004050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002558  08002558  00004050  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002558  08002558  00004050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002558  08002558  00003558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800255c  0800255c  0000355c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08002560  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000050  080025b0  00004050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080025b0  000041c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b9f  00000000  00000000  00004079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a28  00000000  00000000  00005c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00006640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000186  00000000  00000000  00006878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001183c  00000000  00000000  000069fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000032c0  00000000  00000000  0001823a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058acd  00000000  00000000  0001b4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00073fc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d78  00000000  00000000  0007400c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00074d84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000050 	.word	0x20000050
 800014c:	00000000 	.word	0x00000000
 8000150:	080021a4 	.word	0x080021a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000054 	.word	0x20000054
 800016c:	080021a4 	.word	0x080021a4

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	@ 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_frsub>:
 80004e8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80004ec:	e002      	b.n	80004f4 <__addsf3>
 80004ee:	bf00      	nop

080004f0 <__aeabi_fsub>:
 80004f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080004f4 <__addsf3>:
 80004f4:	0042      	lsls	r2, r0, #1
 80004f6:	bf1f      	itttt	ne
 80004f8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80004fc:	ea92 0f03 	teqne	r2, r3
 8000500:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000504:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000508:	d06a      	beq.n	80005e0 <__addsf3+0xec>
 800050a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800050e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000512:	bfc1      	itttt	gt
 8000514:	18d2      	addgt	r2, r2, r3
 8000516:	4041      	eorgt	r1, r0
 8000518:	4048      	eorgt	r0, r1
 800051a:	4041      	eorgt	r1, r0
 800051c:	bfb8      	it	lt
 800051e:	425b      	neglt	r3, r3
 8000520:	2b19      	cmp	r3, #25
 8000522:	bf88      	it	hi
 8000524:	4770      	bxhi	lr
 8000526:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800052a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800052e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000532:	bf18      	it	ne
 8000534:	4240      	negne	r0, r0
 8000536:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800053e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000542:	bf18      	it	ne
 8000544:	4249      	negne	r1, r1
 8000546:	ea92 0f03 	teq	r2, r3
 800054a:	d03f      	beq.n	80005cc <__addsf3+0xd8>
 800054c:	f1a2 0201 	sub.w	r2, r2, #1
 8000550:	fa41 fc03 	asr.w	ip, r1, r3
 8000554:	eb10 000c 	adds.w	r0, r0, ip
 8000558:	f1c3 0320 	rsb	r3, r3, #32
 800055c:	fa01 f103 	lsl.w	r1, r1, r3
 8000560:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000564:	d502      	bpl.n	800056c <__addsf3+0x78>
 8000566:	4249      	negs	r1, r1
 8000568:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800056c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000570:	d313      	bcc.n	800059a <__addsf3+0xa6>
 8000572:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000576:	d306      	bcc.n	8000586 <__addsf3+0x92>
 8000578:	0840      	lsrs	r0, r0, #1
 800057a:	ea4f 0131 	mov.w	r1, r1, rrx
 800057e:	f102 0201 	add.w	r2, r2, #1
 8000582:	2afe      	cmp	r2, #254	@ 0xfe
 8000584:	d251      	bcs.n	800062a <__addsf3+0x136>
 8000586:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800058a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800058e:	bf08      	it	eq
 8000590:	f020 0001 	biceq.w	r0, r0, #1
 8000594:	ea40 0003 	orr.w	r0, r0, r3
 8000598:	4770      	bx	lr
 800059a:	0049      	lsls	r1, r1, #1
 800059c:	eb40 0000 	adc.w	r0, r0, r0
 80005a0:	3a01      	subs	r2, #1
 80005a2:	bf28      	it	cs
 80005a4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80005a8:	d2ed      	bcs.n	8000586 <__addsf3+0x92>
 80005aa:	fab0 fc80 	clz	ip, r0
 80005ae:	f1ac 0c08 	sub.w	ip, ip, #8
 80005b2:	ebb2 020c 	subs.w	r2, r2, ip
 80005b6:	fa00 f00c 	lsl.w	r0, r0, ip
 80005ba:	bfaa      	itet	ge
 80005bc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80005c0:	4252      	neglt	r2, r2
 80005c2:	4318      	orrge	r0, r3
 80005c4:	bfbc      	itt	lt
 80005c6:	40d0      	lsrlt	r0, r2
 80005c8:	4318      	orrlt	r0, r3
 80005ca:	4770      	bx	lr
 80005cc:	f092 0f00 	teq	r2, #0
 80005d0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80005d4:	bf06      	itte	eq
 80005d6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80005da:	3201      	addeq	r2, #1
 80005dc:	3b01      	subne	r3, #1
 80005de:	e7b5      	b.n	800054c <__addsf3+0x58>
 80005e0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005e8:	bf18      	it	ne
 80005ea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005ee:	d021      	beq.n	8000634 <__addsf3+0x140>
 80005f0:	ea92 0f03 	teq	r2, r3
 80005f4:	d004      	beq.n	8000600 <__addsf3+0x10c>
 80005f6:	f092 0f00 	teq	r2, #0
 80005fa:	bf08      	it	eq
 80005fc:	4608      	moveq	r0, r1
 80005fe:	4770      	bx	lr
 8000600:	ea90 0f01 	teq	r0, r1
 8000604:	bf1c      	itt	ne
 8000606:	2000      	movne	r0, #0
 8000608:	4770      	bxne	lr
 800060a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800060e:	d104      	bne.n	800061a <__addsf3+0x126>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	bf28      	it	cs
 8000614:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000618:	4770      	bx	lr
 800061a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800061e:	bf3c      	itt	cc
 8000620:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000624:	4770      	bxcc	lr
 8000626:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800062a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800062e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000632:	4770      	bx	lr
 8000634:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000638:	bf16      	itet	ne
 800063a:	4608      	movne	r0, r1
 800063c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000640:	4601      	movne	r1, r0
 8000642:	0242      	lsls	r2, r0, #9
 8000644:	bf06      	itte	eq
 8000646:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800064a:	ea90 0f01 	teqeq	r0, r1
 800064e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000652:	4770      	bx	lr

08000654 <__aeabi_ui2f>:
 8000654:	f04f 0300 	mov.w	r3, #0
 8000658:	e004      	b.n	8000664 <__aeabi_i2f+0x8>
 800065a:	bf00      	nop

0800065c <__aeabi_i2f>:
 800065c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	ea5f 0c00 	movs.w	ip, r0
 8000668:	bf08      	it	eq
 800066a:	4770      	bxeq	lr
 800066c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000670:	4601      	mov	r1, r0
 8000672:	f04f 0000 	mov.w	r0, #0
 8000676:	e01c      	b.n	80006b2 <__aeabi_l2f+0x2a>

08000678 <__aeabi_ul2f>:
 8000678:	ea50 0201 	orrs.w	r2, r0, r1
 800067c:	bf08      	it	eq
 800067e:	4770      	bxeq	lr
 8000680:	f04f 0300 	mov.w	r3, #0
 8000684:	e00a      	b.n	800069c <__aeabi_l2f+0x14>
 8000686:	bf00      	nop

08000688 <__aeabi_l2f>:
 8000688:	ea50 0201 	orrs.w	r2, r0, r1
 800068c:	bf08      	it	eq
 800068e:	4770      	bxeq	lr
 8000690:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000694:	d502      	bpl.n	800069c <__aeabi_l2f+0x14>
 8000696:	4240      	negs	r0, r0
 8000698:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800069c:	ea5f 0c01 	movs.w	ip, r1
 80006a0:	bf02      	ittt	eq
 80006a2:	4684      	moveq	ip, r0
 80006a4:	4601      	moveq	r1, r0
 80006a6:	2000      	moveq	r0, #0
 80006a8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80006ac:	bf08      	it	eq
 80006ae:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80006b2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80006b6:	fabc f28c 	clz	r2, ip
 80006ba:	3a08      	subs	r2, #8
 80006bc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80006c0:	db10      	blt.n	80006e4 <__aeabi_l2f+0x5c>
 80006c2:	fa01 fc02 	lsl.w	ip, r1, r2
 80006c6:	4463      	add	r3, ip
 80006c8:	fa00 fc02 	lsl.w	ip, r0, r2
 80006cc:	f1c2 0220 	rsb	r2, r2, #32
 80006d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80006d4:	fa20 f202 	lsr.w	r2, r0, r2
 80006d8:	eb43 0002 	adc.w	r0, r3, r2
 80006dc:	bf08      	it	eq
 80006de:	f020 0001 	biceq.w	r0, r0, #1
 80006e2:	4770      	bx	lr
 80006e4:	f102 0220 	add.w	r2, r2, #32
 80006e8:	fa01 fc02 	lsl.w	ip, r1, r2
 80006ec:	f1c2 0220 	rsb	r2, r2, #32
 80006f0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80006f4:	fa21 f202 	lsr.w	r2, r1, r2
 80006f8:	eb43 0002 	adc.w	r0, r3, r2
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000702:	4770      	bx	lr

08000704 <__aeabi_fmul>:
 8000704:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000708:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800070c:	bf1e      	ittt	ne
 800070e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000712:	ea92 0f0c 	teqne	r2, ip
 8000716:	ea93 0f0c 	teqne	r3, ip
 800071a:	d06f      	beq.n	80007fc <__aeabi_fmul+0xf8>
 800071c:	441a      	add	r2, r3
 800071e:	ea80 0c01 	eor.w	ip, r0, r1
 8000722:	0240      	lsls	r0, r0, #9
 8000724:	bf18      	it	ne
 8000726:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800072a:	d01e      	beq.n	800076a <__aeabi_fmul+0x66>
 800072c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000730:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000734:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000738:	fba0 3101 	umull	r3, r1, r0, r1
 800073c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000740:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000744:	bf3e      	ittt	cc
 8000746:	0049      	lslcc	r1, r1, #1
 8000748:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800074c:	005b      	lslcc	r3, r3, #1
 800074e:	ea40 0001 	orr.w	r0, r0, r1
 8000752:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000756:	2afd      	cmp	r2, #253	@ 0xfd
 8000758:	d81d      	bhi.n	8000796 <__aeabi_fmul+0x92>
 800075a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800075e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000762:	bf08      	it	eq
 8000764:	f020 0001 	biceq.w	r0, r0, #1
 8000768:	4770      	bx	lr
 800076a:	f090 0f00 	teq	r0, #0
 800076e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000772:	bf08      	it	eq
 8000774:	0249      	lsleq	r1, r1, #9
 8000776:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800077a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800077e:	3a7f      	subs	r2, #127	@ 0x7f
 8000780:	bfc2      	ittt	gt
 8000782:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000786:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800078a:	4770      	bxgt	lr
 800078c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000790:	f04f 0300 	mov.w	r3, #0
 8000794:	3a01      	subs	r2, #1
 8000796:	dc5d      	bgt.n	8000854 <__aeabi_fmul+0x150>
 8000798:	f112 0f19 	cmn.w	r2, #25
 800079c:	bfdc      	itt	le
 800079e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80007a2:	4770      	bxle	lr
 80007a4:	f1c2 0200 	rsb	r2, r2, #0
 80007a8:	0041      	lsls	r1, r0, #1
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	f1c2 0220 	rsb	r2, r2, #32
 80007b2:	fa00 fc02 	lsl.w	ip, r0, r2
 80007b6:	ea5f 0031 	movs.w	r0, r1, rrx
 80007ba:	f140 0000 	adc.w	r0, r0, #0
 80007be:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80007c2:	bf08      	it	eq
 80007c4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80007c8:	4770      	bx	lr
 80007ca:	f092 0f00 	teq	r2, #0
 80007ce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80007d2:	bf02      	ittt	eq
 80007d4:	0040      	lsleq	r0, r0, #1
 80007d6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80007da:	3a01      	subeq	r2, #1
 80007dc:	d0f9      	beq.n	80007d2 <__aeabi_fmul+0xce>
 80007de:	ea40 000c 	orr.w	r0, r0, ip
 80007e2:	f093 0f00 	teq	r3, #0
 80007e6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80007ea:	bf02      	ittt	eq
 80007ec:	0049      	lsleq	r1, r1, #1
 80007ee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80007f2:	3b01      	subeq	r3, #1
 80007f4:	d0f9      	beq.n	80007ea <__aeabi_fmul+0xe6>
 80007f6:	ea41 010c 	orr.w	r1, r1, ip
 80007fa:	e78f      	b.n	800071c <__aeabi_fmul+0x18>
 80007fc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000800:	ea92 0f0c 	teq	r2, ip
 8000804:	bf18      	it	ne
 8000806:	ea93 0f0c 	teqne	r3, ip
 800080a:	d00a      	beq.n	8000822 <__aeabi_fmul+0x11e>
 800080c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000810:	bf18      	it	ne
 8000812:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000816:	d1d8      	bne.n	80007ca <__aeabi_fmul+0xc6>
 8000818:	ea80 0001 	eor.w	r0, r0, r1
 800081c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000820:	4770      	bx	lr
 8000822:	f090 0f00 	teq	r0, #0
 8000826:	bf17      	itett	ne
 8000828:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800082c:	4608      	moveq	r0, r1
 800082e:	f091 0f00 	teqne	r1, #0
 8000832:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000836:	d014      	beq.n	8000862 <__aeabi_fmul+0x15e>
 8000838:	ea92 0f0c 	teq	r2, ip
 800083c:	d101      	bne.n	8000842 <__aeabi_fmul+0x13e>
 800083e:	0242      	lsls	r2, r0, #9
 8000840:	d10f      	bne.n	8000862 <__aeabi_fmul+0x15e>
 8000842:	ea93 0f0c 	teq	r3, ip
 8000846:	d103      	bne.n	8000850 <__aeabi_fmul+0x14c>
 8000848:	024b      	lsls	r3, r1, #9
 800084a:	bf18      	it	ne
 800084c:	4608      	movne	r0, r1
 800084e:	d108      	bne.n	8000862 <__aeabi_fmul+0x15e>
 8000850:	ea80 0001 	eor.w	r0, r0, r1
 8000854:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000858:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800085c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000860:	4770      	bx	lr
 8000862:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000866:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800086a:	4770      	bx	lr

0800086c <__aeabi_fdiv>:
 800086c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000870:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000874:	bf1e      	ittt	ne
 8000876:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800087a:	ea92 0f0c 	teqne	r2, ip
 800087e:	ea93 0f0c 	teqne	r3, ip
 8000882:	d069      	beq.n	8000958 <__aeabi_fdiv+0xec>
 8000884:	eba2 0203 	sub.w	r2, r2, r3
 8000888:	ea80 0c01 	eor.w	ip, r0, r1
 800088c:	0249      	lsls	r1, r1, #9
 800088e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000892:	d037      	beq.n	8000904 <__aeabi_fdiv+0x98>
 8000894:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000898:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800089c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80008a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008a4:	428b      	cmp	r3, r1
 80008a6:	bf38      	it	cc
 80008a8:	005b      	lslcc	r3, r3, #1
 80008aa:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80008ae:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80008b2:	428b      	cmp	r3, r1
 80008b4:	bf24      	itt	cs
 80008b6:	1a5b      	subcs	r3, r3, r1
 80008b8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008bc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80008c0:	bf24      	itt	cs
 80008c2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80008c6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80008ce:	bf24      	itt	cs
 80008d0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80008dc:	bf24      	itt	cs
 80008de:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80008e2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e6:	011b      	lsls	r3, r3, #4
 80008e8:	bf18      	it	ne
 80008ea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80008ee:	d1e0      	bne.n	80008b2 <__aeabi_fdiv+0x46>
 80008f0:	2afd      	cmp	r2, #253	@ 0xfd
 80008f2:	f63f af50 	bhi.w	8000796 <__aeabi_fmul+0x92>
 80008f6:	428b      	cmp	r3, r1
 80008f8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000908:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800090c:	327f      	adds	r2, #127	@ 0x7f
 800090e:	bfc2      	ittt	gt
 8000910:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000914:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000918:	4770      	bxgt	lr
 800091a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800091e:	f04f 0300 	mov.w	r3, #0
 8000922:	3a01      	subs	r2, #1
 8000924:	e737      	b.n	8000796 <__aeabi_fmul+0x92>
 8000926:	f092 0f00 	teq	r2, #0
 800092a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800092e:	bf02      	ittt	eq
 8000930:	0040      	lsleq	r0, r0, #1
 8000932:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000936:	3a01      	subeq	r2, #1
 8000938:	d0f9      	beq.n	800092e <__aeabi_fdiv+0xc2>
 800093a:	ea40 000c 	orr.w	r0, r0, ip
 800093e:	f093 0f00 	teq	r3, #0
 8000942:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000946:	bf02      	ittt	eq
 8000948:	0049      	lsleq	r1, r1, #1
 800094a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800094e:	3b01      	subeq	r3, #1
 8000950:	d0f9      	beq.n	8000946 <__aeabi_fdiv+0xda>
 8000952:	ea41 010c 	orr.w	r1, r1, ip
 8000956:	e795      	b.n	8000884 <__aeabi_fdiv+0x18>
 8000958:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800095c:	ea92 0f0c 	teq	r2, ip
 8000960:	d108      	bne.n	8000974 <__aeabi_fdiv+0x108>
 8000962:	0242      	lsls	r2, r0, #9
 8000964:	f47f af7d 	bne.w	8000862 <__aeabi_fmul+0x15e>
 8000968:	ea93 0f0c 	teq	r3, ip
 800096c:	f47f af70 	bne.w	8000850 <__aeabi_fmul+0x14c>
 8000970:	4608      	mov	r0, r1
 8000972:	e776      	b.n	8000862 <__aeabi_fmul+0x15e>
 8000974:	ea93 0f0c 	teq	r3, ip
 8000978:	d104      	bne.n	8000984 <__aeabi_fdiv+0x118>
 800097a:	024b      	lsls	r3, r1, #9
 800097c:	f43f af4c 	beq.w	8000818 <__aeabi_fmul+0x114>
 8000980:	4608      	mov	r0, r1
 8000982:	e76e      	b.n	8000862 <__aeabi_fmul+0x15e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800098e:	d1ca      	bne.n	8000926 <__aeabi_fdiv+0xba>
 8000990:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000994:	f47f af5c 	bne.w	8000850 <__aeabi_fmul+0x14c>
 8000998:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800099c:	f47f af3c 	bne.w	8000818 <__aeabi_fmul+0x114>
 80009a0:	e75f      	b.n	8000862 <__aeabi_fmul+0x15e>
 80009a2:	bf00      	nop

080009a4 <ADC_LDR_Init>:
#include "adc_ldr.h"
#include "stm32f1xx.h"

void ADC_LDR_Init(void) {
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <ADC_LDR_Init+0x70>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a19      	ldr	r2, [pc, #100]	@ (8000a14 <ADC_LDR_Init+0x70>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6193      	str	r3, [r2, #24]

    // Configure PA0 as analog input
    GPIOA->CRL &= ~GPIO_CRL_CNF0;
 80009b6:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <ADC_LDR_Init+0x74>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4a17      	ldr	r2, [pc, #92]	@ (8000a18 <ADC_LDR_Init+0x74>)
 80009bc:	f023 030c 	bic.w	r3, r3, #12
 80009c0:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_MODE0;
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <ADC_LDR_Init+0x74>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a14      	ldr	r2, [pc, #80]	@ (8000a18 <ADC_LDR_Init+0x74>)
 80009c8:	f023 0303 	bic.w	r3, r3, #3
 80009cc:	6013      	str	r3, [r2, #0]

    // Enable ADC1 clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <ADC_LDR_Init+0x70>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a10      	ldr	r2, [pc, #64]	@ (8000a14 <ADC_LDR_Init+0x70>)
 80009d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009d8:	6193      	str	r3, [r2, #24]

    // Set software trigger
    ADC1->CR2 |= (7UL << ADC_CR2_EXTSEL_Pos);
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <ADC_LDR_Init+0x78>)
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	4a0f      	ldr	r2, [pc, #60]	@ (8000a1c <ADC_LDR_Init+0x78>)
 80009e0:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 80009e4:	6093      	str	r3, [r2, #8]

    // Power up the ADC
    ADC1->CR2 |= ADC_CR2_ADON;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <ADC_LDR_Init+0x78>)
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	4a0c      	ldr	r2, [pc, #48]	@ (8000a1c <ADC_LDR_Init+0x78>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6093      	str	r3, [r2, #8]

    // Short delay to stabilize
    for (volatile int i = 0; i < 10000; i++);
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	e002      	b.n	80009fe <ADC_LDR_Init+0x5a>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a04:	4293      	cmp	r3, r2
 8000a06:	ddf7      	ble.n	80009f8 <ADC_LDR_Init+0x54>
}
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40010800 	.word	0x40010800
 8000a1c:	40012400 	.word	0x40012400

08000a20 <ADC_LDR_Read>:

uint16_t ADC_LDR_Read(void) {
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
    // Relaunch the ADC
    ADC1->CR2 |= ADC_CR2_ADON;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <ADC_LDR_Read+0x38>)
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	4a0b      	ldr	r2, [pc, #44]	@ (8000a58 <ADC_LDR_Read+0x38>)
 8000a2a:	f043 0301 	orr.w	r3, r3, #1
 8000a2e:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_SWSTART;
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <ADC_LDR_Read+0x38>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	4a08      	ldr	r2, [pc, #32]	@ (8000a58 <ADC_LDR_Read+0x38>)
 8000a36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a3a:	6093      	str	r3, [r2, #8]

    // Wait for conversion to complete
    while (!(ADC1->SR & ADC_SR_EOC));
 8000a3c:	bf00      	nop
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <ADC_LDR_Read+0x38>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f9      	beq.n	8000a3e <ADC_LDR_Read+0x1e>

    return ADC1->DR;
 8000a4a:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <ADC_LDR_Read+0x38>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	b29b      	uxth	r3, r3
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	40012400 	.word	0x40012400

08000a5c <AHT20_Init>:
#include <stdint.h>
#include <stdbool.h>
#include "delay.h"
#include "aht20.h"

void AHT20_Init(void) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
    uint8_t cmd[3];

    print_uart("Passo 1: I2C_Init finalizado\r\n");
 8000a62:	4819      	ldr	r0, [pc, #100]	@ (8000ac8 <AHT20_Init+0x6c>)
 8000a64:	f000 fe52 	bl	800170c <print_uart>
    I2C_Init();                  // já foi feito antes no main, pode pular
 8000a68:	f000 f93a 	bl	8000ce0 <I2C_Init>

    print_uart("Passo 2: Enviando soft reset...\r\n");
 8000a6c:	4817      	ldr	r0, [pc, #92]	@ (8000acc <AHT20_Init+0x70>)
 8000a6e:	f000 fe4d 	bl	800170c <print_uart>
    cmd[0] = AHT20CMD_SOFTRESET;
 8000a72:	23ba      	movs	r3, #186	@ 0xba
 8000a74:	713b      	strb	r3, [r7, #4]
    I2C_Write(AHT20_I2C_ADDRESS, cmd, 1);
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	2038      	movs	r0, #56	@ 0x38
 8000a7e:	f000 f9cd 	bl	8000e1c <I2C_Write>
    delay_ms(20);
 8000a82:	2014      	movs	r0, #20
 8000a84:	f000 f918 	bl	8000cb8 <delay_ms>
    print_uart("Passo 3: Soft reset enviado\r\n");
 8000a88:	4811      	ldr	r0, [pc, #68]	@ (8000ad0 <AHT20_Init+0x74>)
 8000a8a:	f000 fe3f 	bl	800170c <print_uart>

    print_uart("Passo 4: Enviando init command...\r\n");
 8000a8e:	4811      	ldr	r0, [pc, #68]	@ (8000ad4 <AHT20_Init+0x78>)
 8000a90:	f000 fe3c 	bl	800170c <print_uart>
    cmd[0] = 0xBE; cmd[1] = 0x08; cmd[2] = 0x00;
 8000a94:	23be      	movs	r3, #190	@ 0xbe
 8000a96:	713b      	strb	r3, [r7, #4]
 8000a98:	2308      	movs	r3, #8
 8000a9a:	717b      	strb	r3, [r7, #5]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	71bb      	strb	r3, [r7, #6]
    I2C_Write(AHT20_I2C_ADDRESS, cmd, 3);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	2038      	movs	r0, #56	@ 0x38
 8000aa8:	f000 f9b8 	bl	8000e1c <I2C_Write>
    delay_ms(10);
 8000aac:	200a      	movs	r0, #10
 8000aae:	f000 f903 	bl	8000cb8 <delay_ms>
    print_uart("Passo 5: Init command enviado\r\n");
 8000ab2:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <AHT20_Init+0x7c>)
 8000ab4:	f000 fe2a 	bl	800170c <print_uart>

    print_uart("Passo 6: Init completo\r\n");
 8000ab8:	4808      	ldr	r0, [pc, #32]	@ (8000adc <AHT20_Init+0x80>)
 8000aba:	f000 fe27 	bl	800170c <print_uart>
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	080021bc 	.word	0x080021bc
 8000acc:	080021dc 	.word	0x080021dc
 8000ad0:	08002200 	.word	0x08002200
 8000ad4:	08002220 	.word	0x08002220
 8000ad8:	08002244 	.word	0x08002244
 8000adc:	08002264 	.word	0x08002264

08000ae0 <AHT20_ReadTemperatureHumidity>:




void AHT20_ReadTemperatureHumidity(float* temperature, float* humidity) {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b088      	sub	sp, #32
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
    uint8_t cmd[3] = { AHT20CMD_TRIGGER, 0x33, 0x00 };
 8000aea:	4a39      	ldr	r2, [pc, #228]	@ (8000bd0 <AHT20_ReadTemperatureHumidity+0xf0>)
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	6812      	ldr	r2, [r2, #0]
 8000af2:	4611      	mov	r1, r2
 8000af4:	8019      	strh	r1, [r3, #0]
 8000af6:	3302      	adds	r3, #2
 8000af8:	0c12      	lsrs	r2, r2, #16
 8000afa:	701a      	strb	r2, [r3, #0]
    uint8_t data[6];

    print_uart("Iniciando medição...\r\n");
 8000afc:	4835      	ldr	r0, [pc, #212]	@ (8000bd4 <AHT20_ReadTemperatureHumidity+0xf4>)
 8000afe:	f000 fe05 	bl	800170c <print_uart>
    I2C_Write(AHT20_I2C_ADDRESS, cmd, 3);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	2203      	movs	r2, #3
 8000b08:	4619      	mov	r1, r3
 8000b0a:	2038      	movs	r0, #56	@ 0x38
 8000b0c:	f000 f986 	bl	8000e1c <I2C_Write>
    delay_ms(80);  // Espera mínima sugerida
 8000b10:	2050      	movs	r0, #80	@ 0x50
 8000b12:	f000 f8d1 	bl	8000cb8 <delay_ms>

    // Verificar se o sensor está pronto (bit 7 == 0)
    do {
        I2C_Read(AHT20_I2C_ADDRESS, data, 1);
 8000b16:	f107 030c 	add.w	r3, r7, #12
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	2038      	movs	r0, #56	@ 0x38
 8000b20:	f000 f9e8 	bl	8000ef4 <I2C_Read>
    } while (data[0] & 0x80);  // Espera o bit de busy (bit 7) ficar zero
 8000b24:	7b3b      	ldrb	r3, [r7, #12]
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	dbf4      	blt.n	8000b16 <AHT20_ReadTemperatureHumidity+0x36>

    I2C_Read(AHT20_I2C_ADDRESS, data, 6);  // Agora lê os 6 bytes
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2206      	movs	r2, #6
 8000b32:	4619      	mov	r1, r3
 8000b34:	2038      	movs	r0, #56	@ 0x38
 8000b36:	f000 f9dd 	bl	8000ef4 <I2C_Read>

    uint32_t rawHumidity = ((uint32_t)data[1] << 16 | (uint32_t)data[2] << 8 | data[3]) >> 4;
 8000b3a:	7b7b      	ldrb	r3, [r7, #13]
 8000b3c:	041a      	lsls	r2, r3, #16
 8000b3e:	7bbb      	ldrb	r3, [r7, #14]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	4313      	orrs	r3, r2
 8000b44:	7bfa      	ldrb	r2, [r7, #15]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	091b      	lsrs	r3, r3, #4
 8000b4a:	61fb      	str	r3, [r7, #28]
    uint32_t rawTemp = (((uint32_t)(data[3] & 0x0F)) << 16) | ((uint32_t)data[4] << 8) | data[5];
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	041b      	lsls	r3, r3, #16
 8000b50:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8000b54:	7c3b      	ldrb	r3, [r7, #16]
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	7c7a      	ldrb	r2, [r7, #17]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]

    uart_print_int("RAW_HUM", rawHumidity);
 8000b60:	69f9      	ldr	r1, [r7, #28]
 8000b62:	481d      	ldr	r0, [pc, #116]	@ (8000bd8 <AHT20_ReadTemperatureHumidity+0xf8>)
 8000b64:	f000 fdfe 	bl	8001764 <uart_print_int>
    uart_print_int("RAW_TEMP", rawTemp);
 8000b68:	69b9      	ldr	r1, [r7, #24]
 8000b6a:	481c      	ldr	r0, [pc, #112]	@ (8000bdc <AHT20_ReadTemperatureHumidity+0xfc>)
 8000b6c:	f000 fdfa 	bl	8001764 <uart_print_int>

    *humidity = ((float)rawHumidity / 1048576.0f) * 100.0f;
 8000b70:	69f8      	ldr	r0, [r7, #28]
 8000b72:	f7ff fd6f 	bl	8000654 <__aeabi_ui2f>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fe75 	bl	800086c <__aeabi_fdiv>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4916      	ldr	r1, [pc, #88]	@ (8000be0 <AHT20_ReadTemperatureHumidity+0x100>)
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fdbc 	bl	8000704 <__aeabi_fmul>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461a      	mov	r2, r3
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	601a      	str	r2, [r3, #0]
    *temperature = ((float)rawTemp / 1048576.0f) * 200.0f - 50.0f;
 8000b94:	69b8      	ldr	r0, [r7, #24]
 8000b96:	f7ff fd5d 	bl	8000654 <__aeabi_ui2f>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f04f 4193 	mov.w	r1, #1233125376	@ 0x49800000
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fe63 	bl	800086c <__aeabi_fdiv>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	490e      	ldr	r1, [pc, #56]	@ (8000be4 <AHT20_ReadTemperatureHumidity+0x104>)
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fdaa 	bl	8000704 <__aeabi_fmul>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	490d      	ldr	r1, [pc, #52]	@ (8000be8 <AHT20_ReadTemperatureHumidity+0x108>)
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff fc9b 	bl	80004f0 <__aeabi_fsub>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	601a      	str	r2, [r3, #0]

    print_uart("Medição finalizada\r\n");
 8000bc2:	480a      	ldr	r0, [pc, #40]	@ (8000bec <AHT20_ReadTemperatureHumidity+0x10c>)
 8000bc4:	f000 fda2 	bl	800170c <print_uart>
}
 8000bc8:	bf00      	nop
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	080022c8 	.word	0x080022c8
 8000bd4:	08002280 	.word	0x08002280
 8000bd8:	0800229c 	.word	0x0800229c
 8000bdc:	080022a4 	.word	0x080022a4
 8000be0:	42c80000 	.word	0x42c80000
 8000be4:	43480000 	.word	0x43480000
 8000be8:	42480000 	.word	0x42480000
 8000bec:	080022b0 	.word	0x080022b0

08000bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0b      	blt.n	8000c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 021f 	and.w	r2, r3, #31
 8000c08:	4906      	ldr	r1, [pc, #24]	@ (8000c24 <__NVIC_EnableIRQ+0x34>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	2001      	movs	r0, #1
 8000c12:	fa00 f202 	lsl.w	r2, r0, r2
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <delay_init>:
#include "stm32f1xx.h"

volatile uint32_t delay_counter = 0;

void delay_init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;  // Habilita clock para TIM2
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <delay_init+0x4c>)
 8000c2e:	69db      	ldr	r3, [r3, #28]
 8000c30:	4a10      	ldr	r2, [pc, #64]	@ (8000c74 <delay_init+0x4c>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	61d3      	str	r3, [r2, #28]

    TIM2->PSC = 7200 - 1;     // Prescaler: 72 MHz / 7200 = 10 kHz
 8000c38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c3c:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 10 - 1;       // 10 kHz / 10 = 1 kHz → 1 ms por interrupção
 8000c42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c46:	2209      	movs	r2, #9
 8000c48:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->DIER |= TIM_DIER_UIE;    // Habilita interrupção de atualização
 8000c4a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;      // Ativa o timer
 8000c5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn);     // Habilita interrupção global
 8000c6a:	201c      	movs	r0, #28
 8000c6c:	f7ff ffc0 	bl	8000bf0 <__NVIC_EnableIRQ>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40021000 	.word	0x40021000

08000c78 <TIM2_IRQHandler>:
// Handler da interrupção do TIM2
void TIM2_IRQHandler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 8000c7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d010      	beq.n	8000cac <TIM2_IRQHandler+0x34>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Limpa flag de interrupção
 8000c8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c94:	f023 0301 	bic.w	r3, r3, #1
 8000c98:	6113      	str	r3, [r2, #16]

        if (delay_counter > 0)
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <TIM2_IRQHandler+0x3c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d004      	beq.n	8000cac <TIM2_IRQHandler+0x34>
            delay_counter--;
 8000ca2:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <TIM2_IRQHandler+0x3c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	4a02      	ldr	r2, [pc, #8]	@ (8000cb4 <TIM2_IRQHandler+0x3c>)
 8000caa:	6013      	str	r3, [r2, #0]
    }
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	2000006c 	.word	0x2000006c

08000cb8 <delay_ms>:
void delay_ms(uint32_t ms)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
    delay_counter = ms;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <delay_ms+0x24>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
    while (delay_counter > 0); // Espera até o contador zerar
 8000cc6:	bf00      	nop
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <delay_ms+0x24>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d1fb      	bne.n	8000cc8 <delay_ms+0x10>
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	2000006c 	.word	0x2000006c

08000ce0 <I2C_Init>:
#include "i2c.h"

#define debugON


void I2C_Init(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <I2C_Init+0x74>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d54 <I2C_Init+0x74>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <I2C_Init+0x74>)
 8000cf2:	69db      	ldr	r3, [r3, #28]
 8000cf4:	4a17      	ldr	r2, [pc, #92]	@ (8000d54 <I2C_Init+0x74>)
 8000cf6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cfa:	61d3      	str	r3, [r2, #28]

    GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6 | GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8000cfc:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <I2C_Init+0x78>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a15      	ldr	r2, [pc, #84]	@ (8000d58 <I2C_Init+0x78>)
 8000d02:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000d06:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6 | GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7);
 8000d08:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <I2C_Init+0x78>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a12      	ldr	r2, [pc, #72]	@ (8000d58 <I2C_Init+0x78>)
 8000d0e:	f043 436e 	orr.w	r3, r3, #3992977408	@ 0xee000000
 8000d12:	6013      	str	r3, [r2, #0]

    I2C1->CR1 |= I2C_CR1_SWRST;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <I2C_Init+0x7c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a10      	ldr	r2, [pc, #64]	@ (8000d5c <I2C_Init+0x7c>)
 8000d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d1e:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <I2C_Init+0x7c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <I2C_Init+0x7c>)
 8000d26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d2a:	6013      	str	r3, [r2, #0]

    I2C1->CR2 = 8;
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <I2C_Init+0x7c>)
 8000d2e:	2208      	movs	r2, #8
 8000d30:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 40;
 8000d32:	4b0a      	ldr	r3, [pc, #40]	@ (8000d5c <I2C_Init+0x7c>)
 8000d34:	2228      	movs	r2, #40	@ 0x28
 8000d36:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 9;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <I2C_Init+0x7c>)
 8000d3a:	2209      	movs	r2, #9
 8000d3c:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <I2C_Init+0x7c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a06      	ldr	r2, [pc, #24]	@ (8000d5c <I2C_Init+0x7c>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6013      	str	r3, [r2, #0]

#ifdef debugON
    print_uart("I2C_Init OK\r\n");
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <I2C_Init+0x80>)
 8000d4c:	f000 fcde 	bl	800170c <print_uart>
#endif
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	40010c00 	.word	0x40010c00
 8000d5c:	40005400 	.word	0x40005400
 8000d60:	080022cc 	.word	0x080022cc

08000d64 <I2C_Start>:

int I2C_Start(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <I2C_Start+0x50>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a11      	ldr	r2, [pc, #68]	@ (8000db4 <I2C_Start+0x50>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d74:	6013      	str	r3, [r2, #0]
    for (uint32_t t = 10000; t; t--) {
 8000d76:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	e00d      	b.n	8000d9a <I2C_Start+0x36>
        if (I2C1->SR1 & I2C_SR1_SB) {
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000db4 <I2C_Start+0x50>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d004      	beq.n	8000d94 <I2C_Start+0x30>
#ifdef debugON
            print_uart("I2C_Start OK\r\n");
 8000d8a:	480b      	ldr	r0, [pc, #44]	@ (8000db8 <I2C_Start+0x54>)
 8000d8c:	f000 fcbe 	bl	800170c <print_uart>
#endif
            return 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	e00a      	b.n	8000daa <I2C_Start+0x46>
    for (uint32_t t = 10000; t; t--) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1ee      	bne.n	8000d7e <I2C_Start+0x1a>
        }
    }
#ifdef debugON
    print_uart("Erro: Timeout em I2C_Start\r\n");
 8000da0:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <I2C_Start+0x58>)
 8000da2:	f000 fcb3 	bl	800170c <print_uart>
#endif
    return -1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40005400 	.word	0x40005400
 8000db8:	080022dc 	.word	0x080022dc
 8000dbc:	080022ec 	.word	0x080022ec

08000dc0 <I2C_Stop>:

int I2C_Stop(void) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000dc6:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <I2C_Stop+0x50>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a11      	ldr	r2, [pc, #68]	@ (8000e10 <I2C_Stop+0x50>)
 8000dcc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dd0:	6013      	str	r3, [r2, #0]
    for (uint32_t t = 10000; t; t--) {
 8000dd2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	e00d      	b.n	8000df6 <I2C_Stop+0x36>
        if (!(I2C1->CR1 & I2C_CR1_STOP)) {
 8000dda:	4b0d      	ldr	r3, [pc, #52]	@ (8000e10 <I2C_Stop+0x50>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d104      	bne.n	8000df0 <I2C_Stop+0x30>
#ifdef debugON
            print_uart("I2C_Stop OK\r\n");
 8000de6:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <I2C_Stop+0x54>)
 8000de8:	f000 fc90 	bl	800170c <print_uart>
#endif
            return 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e00a      	b.n	8000e06 <I2C_Stop+0x46>
    for (uint32_t t = 10000; t; t--) {
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1ee      	bne.n	8000dda <I2C_Stop+0x1a>
        }
    }
#ifdef debugON
    print_uart("Erro: Timeout em I2C_Stop\r\n");
 8000dfc:	4806      	ldr	r0, [pc, #24]	@ (8000e18 <I2C_Stop+0x58>)
 8000dfe:	f000 fc85 	bl	800170c <print_uart>
#endif
    return -1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40005400 	.word	0x40005400
 8000e14:	0800230c 	.word	0x0800230c
 8000e18:	0800231c 	.word	0x0800231c

08000e1c <I2C_Write>:

void I2C_Write(uint8_t addr, uint8_t *data, uint16_t size) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	80bb      	strh	r3, [r7, #4]
    if (I2C_Start() != 0) return;
 8000e2c:	f7ff ff9a 	bl	8000d64 <I2C_Start>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d152      	bne.n	8000edc <I2C_Write+0xc0>

    I2C1->DR = I2C_WRITE_ADDR(addr);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	4a2a      	ldr	r2, [pc, #168]	@ (8000ee4 <I2C_Write+0xc8>)
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	6113      	str	r3, [r2, #16]
    print_uart("Esperando ACK do endereço...\r\n");
 8000e3e:	482a      	ldr	r0, [pc, #168]	@ (8000ee8 <I2C_Write+0xcc>)
 8000e40:	f000 fc64 	bl	800170c <print_uart>
    for (uint32_t t = 10000; t; t--) {
 8000e44:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	e01a      	b.n	8000e82 <I2C_Write+0x66>
        if (I2C1->SR1 & I2C_SR1_ADDR) break;
 8000e4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <I2C_Write+0xc8>)
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d118      	bne.n	8000e8a <I2C_Write+0x6e>
        if (I2C1->SR1 & I2C_SR1_AF) {
 8000e58:	4b22      	ldr	r3, [pc, #136]	@ (8000ee4 <I2C_Write+0xc8>)
 8000e5a:	695b      	ldr	r3, [r3, #20]
 8000e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d00b      	beq.n	8000e7c <I2C_Write+0x60>
#ifdef debugON
            print_uart("Erro: Endereço NACK em I2C_Write\r\n");
 8000e64:	4821      	ldr	r0, [pc, #132]	@ (8000eec <I2C_Write+0xd0>)
 8000e66:	f000 fc51 	bl	800170c <print_uart>
#endif
            I2C1->SR1 &= ~I2C_SR1_AF;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <I2C_Write+0xc8>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee4 <I2C_Write+0xc8>)
 8000e70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000e74:	6153      	str	r3, [r2, #20]
            I2C_Stop();
 8000e76:	f7ff ffa3 	bl	8000dc0 <I2C_Stop>
            return;
 8000e7a:	e030      	b.n	8000ede <I2C_Write+0xc2>
    for (uint32_t t = 10000; t; t--) {
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1e1      	bne.n	8000e4c <I2C_Write+0x30>
 8000e88:	e000      	b.n	8000e8c <I2C_Write+0x70>
        if (I2C1->SR1 & I2C_SR1_ADDR) break;
 8000e8a:	bf00      	nop
        }
    }
    (void)I2C1->SR1;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <I2C_Write+0xc8>)
 8000e8e:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000e90:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <I2C_Write+0xc8>)
 8000e92:	699b      	ldr	r3, [r3, #24]

    while (size--) {
 8000e94:	e017      	b.n	8000ec6 <I2C_Write+0xaa>
        I2C1->DR = *data++;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	603a      	str	r2, [r7, #0]
 8000e9c:	781a      	ldrb	r2, [r3, #0]
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <I2C_Write+0xc8>)
 8000ea0:	611a      	str	r2, [r3, #16]
        for (uint32_t t = 10000; t; t--) {
 8000ea2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	e008      	b.n	8000ebc <I2C_Write+0xa0>
            if (I2C1->SR1 & I2C_SR1_BTF) break;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <I2C_Write+0xc8>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d106      	bne.n	8000ec4 <I2C_Write+0xa8>
        for (uint32_t t = 10000; t; t--) {
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f3      	bne.n	8000eaa <I2C_Write+0x8e>
 8000ec2:	e000      	b.n	8000ec6 <I2C_Write+0xaa>
            if (I2C1->SR1 & I2C_SR1_BTF) break;
 8000ec4:	bf00      	nop
    while (size--) {
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	1e5a      	subs	r2, r3, #1
 8000eca:	80ba      	strh	r2, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1e2      	bne.n	8000e96 <I2C_Write+0x7a>
        }
    }

    I2C_Stop();
 8000ed0:	f7ff ff76 	bl	8000dc0 <I2C_Stop>
#ifdef debugON
    print_uart("I2C_Write OK\r\n");
 8000ed4:	4806      	ldr	r0, [pc, #24]	@ (8000ef0 <I2C_Write+0xd4>)
 8000ed6:	f000 fc19 	bl	800170c <print_uart>
 8000eda:	e000      	b.n	8000ede <I2C_Write+0xc2>
    if (I2C_Start() != 0) return;
 8000edc:	bf00      	nop
#endif
}
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40005400 	.word	0x40005400
 8000ee8:	08002338 	.word	0x08002338
 8000eec:	08002358 	.word	0x08002358
 8000ef0:	0800237c 	.word	0x0800237c

08000ef4 <I2C_Read>:

void I2C_Read(uint8_t addr, uint8_t *data, uint16_t size) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	80bb      	strh	r3, [r7, #4]
    if (!size) return;
 8000f04:	88bb      	ldrh	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d072      	beq.n	8000ff0 <I2C_Read+0xfc>

    if (I2C_Start() != 0) return;
 8000f0a:	f7ff ff2b 	bl	8000d64 <I2C_Start>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d16f      	bne.n	8000ff4 <I2C_Read+0x100>
    I2C1->DR = I2C_READ_ADDR(addr);
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	f043 0201 	orr.w	r2, r3, #1
 8000f1c:	4b37      	ldr	r3, [pc, #220]	@ (8000ffc <I2C_Read+0x108>)
 8000f1e:	611a      	str	r2, [r3, #16]

    for (uint32_t t = 10000; t; t--) {
 8000f20:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	e01a      	b.n	8000f5e <I2C_Read+0x6a>
        if (I2C1->SR1 & I2C_SR1_ADDR) break;
 8000f28:	4b34      	ldr	r3, [pc, #208]	@ (8000ffc <I2C_Read+0x108>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	f003 0302 	and.w	r3, r3, #2
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d118      	bne.n	8000f66 <I2C_Read+0x72>
        if (I2C1->SR1 & I2C_SR1_AF) {
 8000f34:	4b31      	ldr	r3, [pc, #196]	@ (8000ffc <I2C_Read+0x108>)
 8000f36:	695b      	ldr	r3, [r3, #20]
 8000f38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00b      	beq.n	8000f58 <I2C_Read+0x64>
#ifdef debugON
            print_uart("Erro: Endereço NACK em I2C_Read\r\n");
 8000f40:	482f      	ldr	r0, [pc, #188]	@ (8001000 <I2C_Read+0x10c>)
 8000f42:	f000 fbe3 	bl	800170c <print_uart>
#endif
            I2C1->SR1 &= ~I2C_SR1_AF;
 8000f46:	4b2d      	ldr	r3, [pc, #180]	@ (8000ffc <I2C_Read+0x108>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8000ffc <I2C_Read+0x108>)
 8000f4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000f50:	6153      	str	r3, [r2, #20]
            I2C_Stop();
 8000f52:	f7ff ff35 	bl	8000dc0 <I2C_Stop>
            return;
 8000f56:	e04e      	b.n	8000ff6 <I2C_Read+0x102>
    for (uint32_t t = 10000; t; t--) {
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d1e1      	bne.n	8000f28 <I2C_Read+0x34>
 8000f64:	e000      	b.n	8000f68 <I2C_Read+0x74>
        if (I2C1->SR1 & I2C_SR1_ADDR) break;
 8000f66:	bf00      	nop
        }
    }

    (void)I2C1->SR1;
 8000f68:	4b24      	ldr	r3, [pc, #144]	@ (8000ffc <I2C_Read+0x108>)
 8000f6a:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 8000f6c:	4b23      	ldr	r3, [pc, #140]	@ (8000ffc <I2C_Read+0x108>)
 8000f6e:	699b      	ldr	r3, [r3, #24]

    if (size == 1) {
 8000f70:	88bb      	ldrh	r3, [r7, #4]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d108      	bne.n	8000f88 <I2C_Read+0x94>
        I2C1->CR1 &= ~I2C_CR1_ACK;
 8000f76:	4b21      	ldr	r3, [pc, #132]	@ (8000ffc <I2C_Read+0x108>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a20      	ldr	r2, [pc, #128]	@ (8000ffc <I2C_Read+0x108>)
 8000f7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000f80:	6013      	str	r3, [r2, #0]
        I2C_Stop();
 8000f82:	f7ff ff1d 	bl	8000dc0 <I2C_Stop>
 8000f86:	e02a      	b.n	8000fde <I2C_Read+0xea>
    } else {
        I2C1->CR1 |= I2C_CR1_ACK;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <I2C_Read+0x108>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000ffc <I2C_Read+0x108>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f92:	6013      	str	r3, [r2, #0]
    }

    while (size--) {
 8000f94:	e023      	b.n	8000fde <I2C_Read+0xea>
        for (uint32_t t = 10000; t; t--) {
 8000f96:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	e008      	b.n	8000fb0 <I2C_Read+0xbc>
            if (I2C1->SR1 & I2C_SR1_RXNE) break;
 8000f9e:	4b17      	ldr	r3, [pc, #92]	@ (8000ffc <I2C_Read+0x108>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d106      	bne.n	8000fb8 <I2C_Read+0xc4>
        for (uint32_t t = 10000; t; t--) {
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d1f3      	bne.n	8000f9e <I2C_Read+0xaa>
 8000fb6:	e000      	b.n	8000fba <I2C_Read+0xc6>
            if (I2C1->SR1 & I2C_SR1_RXNE) break;
 8000fb8:	bf00      	nop
        }

        *data++ = I2C1->DR;
 8000fba:	4b10      	ldr	r3, [pc, #64]	@ (8000ffc <I2C_Read+0x108>)
 8000fbc:	6919      	ldr	r1, [r3, #16]
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	1c5a      	adds	r2, r3, #1
 8000fc2:	603a      	str	r2, [r7, #0]
 8000fc4:	b2ca      	uxtb	r2, r1
 8000fc6:	701a      	strb	r2, [r3, #0]

        if (size == 1) {
 8000fc8:	88bb      	ldrh	r3, [r7, #4]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d107      	bne.n	8000fde <I2C_Read+0xea>
            I2C1->CR1 &= ~I2C_CR1_ACK;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <I2C_Read+0x108>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ffc <I2C_Read+0x108>)
 8000fd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000fd8:	6013      	str	r3, [r2, #0]
            I2C_Stop();
 8000fda:	f7ff fef1 	bl	8000dc0 <I2C_Stop>
    while (size--) {
 8000fde:	88bb      	ldrh	r3, [r7, #4]
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	80ba      	strh	r2, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1d6      	bne.n	8000f96 <I2C_Read+0xa2>
        }
    }
#ifdef debugON
    print_uart("I2C_Read OK\r\n");
 8000fe8:	4806      	ldr	r0, [pc, #24]	@ (8001004 <I2C_Read+0x110>)
 8000fea:	f000 fb8f 	bl	800170c <print_uart>
 8000fee:	e002      	b.n	8000ff6 <I2C_Read+0x102>
    if (!size) return;
 8000ff0:	bf00      	nop
 8000ff2:	e000      	b.n	8000ff6 <I2C_Read+0x102>
    if (I2C_Start() != 0) return;
 8000ff4:	bf00      	nop
#endif
}
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40005400 	.word	0x40005400
 8001000:	0800238c 	.word	0x0800238c
 8001004:	080023b0 	.word	0x080023b0

08001008 <print_nrf_debug>:
#include "adc_ldr.h"

float temperature, humidity;
uint16_t ldr;

void print_nrf_debug(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    uart_print_int("CONFIG", nRF24_ReadReg(CONFIG));
 800100c:	2000      	movs	r0, #0
 800100e:	f000 f965 	bl	80012dc <nRF24_ReadReg>
 8001012:	4603      	mov	r3, r0
 8001014:	4619      	mov	r1, r3
 8001016:	4816      	ldr	r0, [pc, #88]	@ (8001070 <print_nrf_debug+0x68>)
 8001018:	f000 fba4 	bl	8001764 <uart_print_int>
    uart_print_int("EN_AA", nRF24_ReadReg(EN_AA));
 800101c:	2001      	movs	r0, #1
 800101e:	f000 f95d 	bl	80012dc <nRF24_ReadReg>
 8001022:	4603      	mov	r3, r0
 8001024:	4619      	mov	r1, r3
 8001026:	4813      	ldr	r0, [pc, #76]	@ (8001074 <print_nrf_debug+0x6c>)
 8001028:	f000 fb9c 	bl	8001764 <uart_print_int>
    uart_print_int("RF_CH", nRF24_ReadReg(RF_CH));
 800102c:	2005      	movs	r0, #5
 800102e:	f000 f955 	bl	80012dc <nRF24_ReadReg>
 8001032:	4603      	mov	r3, r0
 8001034:	4619      	mov	r1, r3
 8001036:	4810      	ldr	r0, [pc, #64]	@ (8001078 <print_nrf_debug+0x70>)
 8001038:	f000 fb94 	bl	8001764 <uart_print_int>
    uart_print_int("RF_SETUP", nRF24_ReadReg(RF_SETUP));
 800103c:	2006      	movs	r0, #6
 800103e:	f000 f94d 	bl	80012dc <nRF24_ReadReg>
 8001042:	4603      	mov	r3, r0
 8001044:	4619      	mov	r1, r3
 8001046:	480d      	ldr	r0, [pc, #52]	@ (800107c <print_nrf_debug+0x74>)
 8001048:	f000 fb8c 	bl	8001764 <uart_print_int>
    uart_print_int("STATUS", nRF24_ReadReg(STATUS));
 800104c:	2007      	movs	r0, #7
 800104e:	f000 f945 	bl	80012dc <nRF24_ReadReg>
 8001052:	4603      	mov	r3, r0
 8001054:	4619      	mov	r1, r3
 8001056:	480a      	ldr	r0, [pc, #40]	@ (8001080 <print_nrf_debug+0x78>)
 8001058:	f000 fb84 	bl	8001764 <uart_print_int>
    uart_print_int("FIFO_STATUS", nRF24_ReadReg(FIFO_STATUS));
 800105c:	2017      	movs	r0, #23
 800105e:	f000 f93d 	bl	80012dc <nRF24_ReadReg>
 8001062:	4603      	mov	r3, r0
 8001064:	4619      	mov	r1, r3
 8001066:	4807      	ldr	r0, [pc, #28]	@ (8001084 <print_nrf_debug+0x7c>)
 8001068:	f000 fb7c 	bl	8001764 <uart_print_int>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}
 8001070:	08002408 	.word	0x08002408
 8001074:	08002410 	.word	0x08002410
 8001078:	08002418 	.word	0x08002418
 800107c:	08002420 	.word	0x08002420
 8001080:	0800242c 	.word	0x0800242c
 8001084:	08002434 	.word	0x08002434

08001088 <main>:

int main(void) {
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b099      	sub	sp, #100	@ 0x64
 800108c:	af02      	add	r7, sp, #8
    uint8_t tx_address[5] = {0x01, 0xDD, 0xCC, 0xBB, 0xAA};
 800108e:	4a45      	ldr	r2, [pc, #276]	@ (80011a4 <main+0x11c>)
 8001090:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001098:	6018      	str	r0, [r3, #0]
 800109a:	3304      	adds	r3, #4
 800109c:	7019      	strb	r1, [r3, #0]
    uint8_t payload[8];  // 4 bytes para float temperatura + 4 bytes umidade

    UART_Init();
 800109e:	f000 fb01 	bl	80016a4 <UART_Init>
    delay_init();
 80010a2:	f7ff fdc1 	bl	8000c28 <delay_init>
    SPI1_Init();
 80010a6:	f000 fa91 	bl	80015cc <SPI1_Init>
    AHT20_Init();
 80010aa:	f7ff fcd7 	bl	8000a5c <AHT20_Init>
    ADC_LDR_Init();
 80010ae:	f7ff fc79 	bl	80009a4 <ADC_LDR_Init>


    print_uart("Inicializando sensor e rádio...\r\n");
 80010b2:	483d      	ldr	r0, [pc, #244]	@ (80011a8 <main+0x120>)
 80010b4:	f000 fb2a 	bl	800170c <print_uart>

    nRF24_Init();
 80010b8:	f000 f96a 	bl	8001390 <nRF24_Init>
    nRF24_TX_Mode(tx_address, 10); // canal 10 com Auto-ACK
 80010bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010c0:	210a      	movs	r1, #10
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f986 	bl	80013d4 <nRF24_TX_Mode>

    print_uart("[NRF24 DEBUG INICIAL]\r\n");
 80010c8:	4838      	ldr	r0, [pc, #224]	@ (80011ac <main+0x124>)
 80010ca:	f000 fb1f 	bl	800170c <print_uart>
    print_nrf_debug();
 80010ce:	f7ff ff9b 	bl	8001008 <print_nrf_debug>

    while (1) {

        AHT20_ReadTemperatureHumidity(&temperature, &humidity);
 80010d2:	4937      	ldr	r1, [pc, #220]	@ (80011b0 <main+0x128>)
 80010d4:	4837      	ldr	r0, [pc, #220]	@ (80011b4 <main+0x12c>)
 80010d6:	f7ff fd03 	bl	8000ae0 <AHT20_ReadTemperatureHumidity>

        ldr = ADC_LDR_Read();
 80010da:	f7ff fca1 	bl	8000a20 <ADC_LDR_Read>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b35      	ldr	r3, [pc, #212]	@ (80011b8 <main+0x130>)
 80010e4:	801a      	strh	r2, [r3, #0]
        // Envia via UART para debug
        char buf[64];
        float voltage = (ldr / 4095.0f) * 3.3f;
 80010e6:	4b34      	ldr	r3, [pc, #208]	@ (80011b8 <main+0x130>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fab6 	bl	800065c <__aeabi_i2f>
 80010f0:	4603      	mov	r3, r0
 80010f2:	4932      	ldr	r1, [pc, #200]	@ (80011bc <main+0x134>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fbb9 	bl	800086c <__aeabi_fdiv>
 80010fa:	4603      	mov	r3, r0
 80010fc:	4930      	ldr	r1, [pc, #192]	@ (80011c0 <main+0x138>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fb00 	bl	8000704 <__aeabi_fmul>
 8001104:	4603      	mov	r3, r0
 8001106:	657b      	str	r3, [r7, #84]	@ 0x54

                // Formata a string para UART
        snprintf(buf, sizeof(buf), "LDR Raw: %u | Tensão: %.2f V\r\n", ldr, voltage);
 8001108:	4b2b      	ldr	r3, [pc, #172]	@ (80011b8 <main+0x130>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	461c      	mov	r4, r3
 800110e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001110:	f7ff f992 	bl	8000438 <__aeabi_f2d>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	1d38      	adds	r0, r7, #4
 800111a:	e9cd 2300 	strd	r2, r3, [sp]
 800111e:	4623      	mov	r3, r4
 8001120:	4a28      	ldr	r2, [pc, #160]	@ (80011c4 <main+0x13c>)
 8001122:	2140      	movs	r1, #64	@ 0x40
 8001124:	f000 fb60 	bl	80017e8 <sniprintf>
        uart_write((uint8_t*)buf);
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fafa 	bl	8001724 <uart_write>

        // Copia os floats diretamente para o payload (memória binária)
        memcpy(&payload[0], &temperature, sizeof(float));
 8001130:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <main+0x12c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	647b      	str	r3, [r7, #68]	@ 0x44
        memcpy(&payload[4], &humidity, sizeof(float));
 8001136:	4b1e      	ldr	r3, [pc, #120]	@ (80011b0 <main+0x128>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	64bb      	str	r3, [r7, #72]	@ 0x48

        print_uart("[NRF24] Enviando dados brutos...\r\n");
 800113c:	4822      	ldr	r0, [pc, #136]	@ (80011c8 <main+0x140>)
 800113e:	f000 fae5 	bl	800170c <print_uart>
        nRF24_WritePayload(payload, 8);
 8001142:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001146:	2108      	movs	r1, #8
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f970 	bl	800142e <nRF24_WritePayload>
        delay_ms(5);
 800114e:	2005      	movs	r0, #5
 8001150:	f7ff fdb2 	bl	8000cb8 <delay_ms>

        uint8_t status = nRF24_GetStatus();
 8001154:	f000 fa21 	bl	800159a <nRF24_GetStatus>
 8001158:	4603      	mov	r3, r0
 800115a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        if (status & MASK_TX_DS) {
 800115e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <main+0xea>
            print_uart("[NRF24] Transmissão OK\r\n");
 800116a:	4818      	ldr	r0, [pc, #96]	@ (80011cc <main+0x144>)
 800116c:	f000 face 	bl	800170c <print_uart>
 8001170:	e010      	b.n	8001194 <main+0x10c>
        } else if (status & MASK_MAX_RT) {
 8001172:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001176:	f003 0310 	and.w	r3, r3, #16
 800117a:	2b00      	cmp	r3, #0
 800117c:	d007      	beq.n	800118e <main+0x106>
            print_uart("[NRF24] Falha: MAX_RT\r\n");
 800117e:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <main+0x148>)
 8001180:	f000 fac4 	bl	800170c <print_uart>
            nRF24_WriteReg(NRF24_CMD_FLUSH_TX, 0x00);
 8001184:	2100      	movs	r1, #0
 8001186:	20e1      	movs	r0, #225	@ 0xe1
 8001188:	f000 f8bf 	bl	800130a <nRF24_WriteReg>
 800118c:	e002      	b.n	8001194 <main+0x10c>
        } else {
            print_uart("[NRF24] Status indefinido\r\n");
 800118e:	4811      	ldr	r0, [pc, #68]	@ (80011d4 <main+0x14c>)
 8001190:	f000 fabc 	bl	800170c <print_uart>
        }

        nRF24_ClearIRQFlags();
 8001194:	f000 fa12 	bl	80015bc <nRF24_ClearIRQFlags>
        delay_ms(1000);
 8001198:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800119c:	f7ff fd8c 	bl	8000cb8 <delay_ms>
    while (1) {
 80011a0:	e797      	b.n	80010d2 <main+0x4a>
 80011a2:	bf00      	nop
 80011a4:	08002510 	.word	0x08002510
 80011a8:	08002440 	.word	0x08002440
 80011ac:	08002464 	.word	0x08002464
 80011b0:	20000074 	.word	0x20000074
 80011b4:	20000070 	.word	0x20000070
 80011b8:	20000078 	.word	0x20000078
 80011bc:	457ff000 	.word	0x457ff000
 80011c0:	40533333 	.word	0x40533333
 80011c4:	0800247c 	.word	0x0800247c
 80011c8:	0800249c 	.word	0x0800249c
 80011cc:	080024c0 	.word	0x080024c0
 80011d0:	080024dc 	.word	0x080024dc
 80011d4:	080024f4 	.word	0x080024f4

080011d8 <nRF24_CE_H>:
#include "nrf24.h"

void nRF24_CE_H(void) { GPIOA->BSRR = GPIO_BSRR_BS3; }
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4b03      	ldr	r3, [pc, #12]	@ (80011ec <nRF24_CE_H+0x14>)
 80011de:	2208      	movs	r2, #8
 80011e0:	611a      	str	r2, [r3, #16]
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40010800 	.word	0x40010800

080011f0 <nRF24_CE_L>:
void nRF24_CE_L(void) { GPIOA->BSRR = GPIO_BSRR_BR3; }
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <nRF24_CE_L+0x14>)
 80011f6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr
 8001204:	40010800 	.word	0x40010800

08001208 <nRF24_CSN_H>:
void nRF24_CSN_H(void){ GPIOA->BSRR = GPIO_BSRR_BS4; }
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
 800120c:	4b03      	ldr	r3, [pc, #12]	@ (800121c <nRF24_CSN_H+0x14>)
 800120e:	2210      	movs	r2, #16
 8001210:	611a      	str	r2, [r3, #16]
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40010800 	.word	0x40010800

08001220 <nRF24_CSN_L>:
void nRF24_CSN_L(void){ GPIOA->BSRR = GPIO_BSRR_BR4; }
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <nRF24_CSN_L+0x14>)
 8001226:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40010800 	.word	0x40010800

08001238 <nRF24_LL_RW>:

uint8_t nRF24_LL_RW(uint8_t data) {
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1->SR & SPI_SR_TXE));
 8001242:	bf00      	nop
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <nRF24_LL_RW+0x3c>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f9      	beq.n	8001244 <nRF24_LL_RW+0xc>
    *((__IO uint8_t *)&SPI1->DR) = data;
 8001250:	4a09      	ldr	r2, [pc, #36]	@ (8001278 <nRF24_LL_RW+0x40>)
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	7013      	strb	r3, [r2, #0]
    while (!(SPI1->SR & SPI_SR_RXNE));
 8001256:	bf00      	nop
 8001258:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <nRF24_LL_RW+0x3c>)
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f9      	beq.n	8001258 <nRF24_LL_RW+0x20>
    return SPI1->DR;
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <nRF24_LL_RW+0x3c>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	b2db      	uxtb	r3, r3
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr
 8001274:	40013000 	.word	0x40013000
 8001278:	4001300c 	.word	0x4001300c

0800127c <nRF24_HW_Init>:

void nRF24_HW_Init(void) {
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
    // Habilita o clock do GPIOA
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8001280:	4b14      	ldr	r3, [pc, #80]	@ (80012d4 <nRF24_HW_Init+0x58>)
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4a13      	ldr	r2, [pc, #76]	@ (80012d4 <nRF24_HW_Init+0x58>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6193      	str	r3, [r2, #24]

    // Configura PA3 (CE) como saída push-pull
    GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 800128c:	4b12      	ldr	r3, [pc, #72]	@ (80012d8 <nRF24_HW_Init+0x5c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a11      	ldr	r2, [pc, #68]	@ (80012d8 <nRF24_HW_Init+0x5c>)
 8001292:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001296:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (GPIO_CRL_MODE3_1);  // Output 2 MHz, Push-Pull
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <nRF24_HW_Init+0x5c>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a0e      	ldr	r2, [pc, #56]	@ (80012d8 <nRF24_HW_Init+0x5c>)
 800129e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012a2:	6013      	str	r3, [r2, #0]

    // Configura PA4 (CSN) como saída push-pull
    GPIOA->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4);
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <nRF24_HW_Init+0x5c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <nRF24_HW_Init+0x5c>)
 80012aa:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 80012ae:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (GPIO_CRL_MODE4_1);  // Output 2 MHz, Push-Pull
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <nRF24_HW_Init+0x5c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <nRF24_HW_Init+0x5c>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ba:	6013      	str	r3, [r2, #0]

    // Estado inicial: CE LOW, CSN HIGH
    GPIOA->BSRR = GPIO_BSRR_BR3; // CE = 0
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <nRF24_HW_Init+0x5c>)
 80012be:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80012c2:	611a      	str	r2, [r3, #16]
    GPIOA->BSRR = GPIO_BSRR_BS4; // CSN = 1
 80012c4:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <nRF24_HW_Init+0x5c>)
 80012c6:	2210      	movs	r2, #16
 80012c8:	611a      	str	r2, [r3, #16]
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000
 80012d8:	40010800 	.word	0x40010800

080012dc <nRF24_ReadReg>:

uint8_t nRF24_ReadReg(uint8_t reg) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
    nRF24_CSN_L();
 80012e6:	f7ff ff9b 	bl	8001220 <nRF24_CSN_L>
    nRF24_LL_RW(NRF24_CMD_R_REGISTER | reg);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ffa3 	bl	8001238 <nRF24_LL_RW>
    uint8_t result = nRF24_LL_RW(NRF24_CMD_NOP);
 80012f2:	20ff      	movs	r0, #255	@ 0xff
 80012f4:	f7ff ffa0 	bl	8001238 <nRF24_LL_RW>
 80012f8:	4603      	mov	r3, r0
 80012fa:	73fb      	strb	r3, [r7, #15]
    nRF24_CSN_H();
 80012fc:	f7ff ff84 	bl	8001208 <nRF24_CSN_H>
    return result;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <nRF24_WriteReg>:

void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	460a      	mov	r2, r1
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	4613      	mov	r3, r2
 8001318:	71bb      	strb	r3, [r7, #6]
    nRF24_CSN_L();
 800131a:	f7ff ff81 	bl	8001220 <nRF24_CSN_L>
    nRF24_LL_RW(NRF24_CMD_W_REGISTER | reg);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff86 	bl	8001238 <nRF24_LL_RW>
    nRF24_LL_RW(value);
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff82 	bl	8001238 <nRF24_LL_RW>
    nRF24_CSN_H();
 8001334:	f7ff ff68 	bl	8001208 <nRF24_CSN_H>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <nRF24_WriteBuf>:

void nRF24_WriteBuf(uint8_t reg, uint8_t *pBuf, uint8_t len) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
 800134c:	4613      	mov	r3, r2
 800134e:	71bb      	strb	r3, [r7, #6]
    nRF24_CSN_L();
 8001350:	f7ff ff66 	bl	8001220 <nRF24_CSN_L>
    nRF24_LL_RW(NRF24_CMD_W_REGISTER | reg);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f043 0320 	orr.w	r3, r3, #32
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff6b 	bl	8001238 <nRF24_LL_RW>
    for (uint8_t i = 0; i < len; i++)
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
 8001366:	e009      	b.n	800137c <nRF24_WriteBuf+0x3c>
        nRF24_LL_RW(pBuf[i]);
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff61 	bl	8001238 <nRF24_LL_RW>
    for (uint8_t i = 0; i < len; i++)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	3301      	adds	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	79bb      	ldrb	r3, [r7, #6]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3f1      	bcc.n	8001368 <nRF24_WriteBuf+0x28>
    nRF24_CSN_H();
 8001384:	f7ff ff40 	bl	8001208 <nRF24_CSN_H>
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <nRF24_Init>:

void nRF24_Init(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
    nRF24_HW_Init();
 8001394:	f7ff ff72 	bl	800127c <nRF24_HW_Init>
    nRF24_CE_L();
 8001398:	f7ff ff2a 	bl	80011f0 <nRF24_CE_L>
    nRF24_CSN_H();
 800139c:	f7ff ff34 	bl	8001208 <nRF24_CSN_H>
    nRF24_WriteReg(CONFIG, 0x00); // PWR_UP, PRIM_TX, CRC
 80013a0:	2100      	movs	r1, #0
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff ffb1 	bl	800130a <nRF24_WriteReg>
    nRF24_WriteReg(EN_AA, 0x00);  // Sem ACK
 80013a8:	2100      	movs	r1, #0
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff ffad 	bl	800130a <nRF24_WriteReg>
    nRF24_WriteReg(RF_CH, 10);    // Canal 10 (2.41GHz)
 80013b0:	210a      	movs	r1, #10
 80013b2:	2005      	movs	r0, #5
 80013b4:	f7ff ffa9 	bl	800130a <nRF24_WriteReg>
    nRF24_WriteReg(RF_SETUP, 0x0E); // 2Mbps, 0dBm
 80013b8:	210e      	movs	r1, #14
 80013ba:	2006      	movs	r0, #6
 80013bc:	f7ff ffa5 	bl	800130a <nRF24_WriteReg>
    nRF24_WriteReg(STATUS, 0x70); // Limpa IRQs
 80013c0:	2170      	movs	r1, #112	@ 0x70
 80013c2:	2007      	movs	r0, #7
 80013c4:	f7ff ffa1 	bl	800130a <nRF24_WriteReg>
    nRF24_WriteReg(FIFO_STATUS, 0x00);
 80013c8:	2100      	movs	r1, #0
 80013ca:	2017      	movs	r0, #23
 80013cc:	f7ff ff9d 	bl	800130a <nRF24_WriteReg>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <nRF24_TX_Mode>:
        if (read[i] != 0xA5) return 0;

    return 1;
}

void nRF24_TX_Mode(uint8_t *address, uint8_t channel) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
    nRF24_CE_L();
 80013e0:	f7ff ff06 	bl	80011f0 <nRF24_CE_L>
    nRF24_WriteReg(EN_AA, 0x01);
 80013e4:	2101      	movs	r1, #1
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff ff8f 	bl	800130a <nRF24_WriteReg>
    nRF24_WriteReg(RF_CH, channel);
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	4619      	mov	r1, r3
 80013f0:	2005      	movs	r0, #5
 80013f2:	f7ff ff8a 	bl	800130a <nRF24_WriteReg>
    nRF24_WriteReg(RF_SETUP, 0x0E);
 80013f6:	210e      	movs	r1, #14
 80013f8:	2006      	movs	r0, #6
 80013fa:	f7ff ff86 	bl	800130a <nRF24_WriteReg>
    nRF24_WriteBuf(TX_ADDR, address, 5);
 80013fe:	2205      	movs	r2, #5
 8001400:	6879      	ldr	r1, [r7, #4]
 8001402:	2010      	movs	r0, #16
 8001404:	f7ff ff9c 	bl	8001340 <nRF24_WriteBuf>
    nRF24_WriteReg(CONFIG, 0x0E);
 8001408:	210e      	movs	r1, #14
 800140a:	2000      	movs	r0, #0
 800140c:	f7ff ff7d 	bl	800130a <nRF24_WriteReg>
    nRF24_CE_H();
 8001410:	f7ff fee2 	bl	80011d8 <nRF24_CE_H>
    nRF24_WriteReg(SETUP_RETR, 0x1F);
 8001414:	211f      	movs	r1, #31
 8001416:	2004      	movs	r0, #4
 8001418:	f7ff ff77 	bl	800130a <nRF24_WriteReg>
    nRF24_SetupRetransmissions(5, 1500);
 800141c:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8001420:	2005      	movs	r0, #5
 8001422:	f000 f826 	bl	8001472 <nRF24_SetupRetransmissions>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <nRF24_WritePayload>:

void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	460b      	mov	r3, r1
 8001438:	70fb      	strb	r3, [r7, #3]
    nRF24_CSN_L();
 800143a:	f7ff fef1 	bl	8001220 <nRF24_CSN_L>
    nRF24_LL_RW(NRF24_CMD_W_TX_PAYLOAD);
 800143e:	20a0      	movs	r0, #160	@ 0xa0
 8001440:	f7ff fefa 	bl	8001238 <nRF24_LL_RW>
    for (uint8_t i = 0; i < length; i++)
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e009      	b.n	800145e <nRF24_WritePayload+0x30>
        nRF24_LL_RW(pBuf[i]);
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fef0 	bl	8001238 <nRF24_LL_RW>
    for (uint8_t i = 0; i < length; i++)
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	3301      	adds	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	7bfa      	ldrb	r2, [r7, #15]
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	429a      	cmp	r2, r3
 8001464:	d3f1      	bcc.n	800144a <nRF24_WritePayload+0x1c>
    nRF24_CSN_H();
 8001466:	f7ff fecf 	bl	8001208 <nRF24_CSN_H>
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <nRF24_SetupRetransmissions>:
    nRF24_CSN_H();

    return status;
}

void nRF24_SetupRetransmissions(uint8_t retries, uint16_t delay_us) {
 8001472:	b580      	push	{r7, lr}
 8001474:	b084      	sub	sp, #16
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	460a      	mov	r2, r1
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	4613      	mov	r3, r2
 8001480:	80bb      	strh	r3, [r7, #4]
    uint8_t ard = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]

    // Converte delay_us para valor ARD (4 bits)
    if (delay_us <= 250)       ard = 0;
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	2bfa      	cmp	r3, #250	@ 0xfa
 800148a:	d802      	bhi.n	8001492 <nRF24_SetupRetransmissions+0x20>
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e06e      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 500)  ard = 1;
 8001492:	88bb      	ldrh	r3, [r7, #4]
 8001494:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001498:	d802      	bhi.n	80014a0 <nRF24_SetupRetransmissions+0x2e>
 800149a:	2301      	movs	r3, #1
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e067      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 750)  ard = 2;
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d802      	bhi.n	80014b0 <nRF24_SetupRetransmissions+0x3e>
 80014aa:	2302      	movs	r3, #2
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	e05f      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 1000) ard = 3;
 80014b0:	88bb      	ldrh	r3, [r7, #4]
 80014b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014b6:	d802      	bhi.n	80014be <nRF24_SetupRetransmissions+0x4c>
 80014b8:	2303      	movs	r3, #3
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	e058      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 1250) ard = 4;
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d802      	bhi.n	80014ce <nRF24_SetupRetransmissions+0x5c>
 80014c8:	2304      	movs	r3, #4
 80014ca:	73fb      	strb	r3, [r7, #15]
 80014cc:	e050      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 1500) ard = 5;
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d802      	bhi.n	80014de <nRF24_SetupRetransmissions+0x6c>
 80014d8:	2305      	movs	r3, #5
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e048      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 1750) ard = 6;
 80014de:	88bb      	ldrh	r3, [r7, #4]
 80014e0:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d802      	bhi.n	80014ee <nRF24_SetupRetransmissions+0x7c>
 80014e8:	2306      	movs	r3, #6
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e040      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 2000) ard = 7;
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80014f4:	d802      	bhi.n	80014fc <nRF24_SetupRetransmissions+0x8a>
 80014f6:	2307      	movs	r3, #7
 80014f8:	73fb      	strb	r3, [r7, #15]
 80014fa:	e039      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 2250) ard = 8;
 80014fc:	88bb      	ldrh	r3, [r7, #4]
 80014fe:	f640 02ca 	movw	r2, #2250	@ 0x8ca
 8001502:	4293      	cmp	r3, r2
 8001504:	d802      	bhi.n	800150c <nRF24_SetupRetransmissions+0x9a>
 8001506:	2308      	movs	r3, #8
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e031      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 2500) ard = 9;
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8001512:	4293      	cmp	r3, r2
 8001514:	d802      	bhi.n	800151c <nRF24_SetupRetransmissions+0xaa>
 8001516:	2309      	movs	r3, #9
 8001518:	73fb      	strb	r3, [r7, #15]
 800151a:	e029      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 2750) ard = 10;
 800151c:	88bb      	ldrh	r3, [r7, #4]
 800151e:	f640 22be 	movw	r2, #2750	@ 0xabe
 8001522:	4293      	cmp	r3, r2
 8001524:	d802      	bhi.n	800152c <nRF24_SetupRetransmissions+0xba>
 8001526:	230a      	movs	r3, #10
 8001528:	73fb      	strb	r3, [r7, #15]
 800152a:	e021      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 3000) ard = 11;
 800152c:	88bb      	ldrh	r3, [r7, #4]
 800152e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001532:	4293      	cmp	r3, r2
 8001534:	d802      	bhi.n	800153c <nRF24_SetupRetransmissions+0xca>
 8001536:	230b      	movs	r3, #11
 8001538:	73fb      	strb	r3, [r7, #15]
 800153a:	e019      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 3250) ard = 12;
 800153c:	88bb      	ldrh	r3, [r7, #4]
 800153e:	f640 42b2 	movw	r2, #3250	@ 0xcb2
 8001542:	4293      	cmp	r3, r2
 8001544:	d802      	bhi.n	800154c <nRF24_SetupRetransmissions+0xda>
 8001546:	230c      	movs	r3, #12
 8001548:	73fb      	strb	r3, [r7, #15]
 800154a:	e011      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 3500) ard = 13;
 800154c:	88bb      	ldrh	r3, [r7, #4]
 800154e:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8001552:	4293      	cmp	r3, r2
 8001554:	d802      	bhi.n	800155c <nRF24_SetupRetransmissions+0xea>
 8001556:	230d      	movs	r3, #13
 8001558:	73fb      	strb	r3, [r7, #15]
 800155a:	e009      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 3750) ard = 14;
 800155c:	88bb      	ldrh	r3, [r7, #4]
 800155e:	f640 62a6 	movw	r2, #3750	@ 0xea6
 8001562:	4293      	cmp	r3, r2
 8001564:	d802      	bhi.n	800156c <nRF24_SetupRetransmissions+0xfa>
 8001566:	230e      	movs	r3, #14
 8001568:	73fb      	strb	r3, [r7, #15]
 800156a:	e001      	b.n	8001570 <nRF24_SetupRetransmissions+0xfe>
    else                       ard = 15;
 800156c:	230f      	movs	r3, #15
 800156e:	73fb      	strb	r3, [r7, #15]

    uint8_t setup_retr = (ard << 4) | (retries & 0x0F);
 8001570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	b25a      	sxtb	r2, r3
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	b25b      	sxtb	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b25b      	sxtb	r3, r3
 8001586:	73bb      	strb	r3, [r7, #14]
    nRF24_WriteReg(SETUP_RETR, setup_retr);
 8001588:	7bbb      	ldrb	r3, [r7, #14]
 800158a:	4619      	mov	r1, r3
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff febc 	bl	800130a <nRF24_WriteReg>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(void) {
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
    nRF24_CSN_L();
 80015a0:	f7ff fe3e 	bl	8001220 <nRF24_CSN_L>
    uint8_t status = nRF24_LL_RW(NRF24_CMD_NOP);
 80015a4:	20ff      	movs	r0, #255	@ 0xff
 80015a6:	f7ff fe47 	bl	8001238 <nRF24_LL_RW>
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
    nRF24_CSN_H();
 80015ae:	f7ff fe2b 	bl	8001208 <nRF24_CSN_H>
    return status;
 80015b2:	79fb      	ldrb	r3, [r7, #7]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <nRF24_ClearIRQFlags>:

void nRF24_ClearIRQFlags(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
    nRF24_WriteReg(STATUS, 0x70);
 80015c0:	2170      	movs	r1, #112	@ 0x70
 80015c2:	2007      	movs	r0, #7
 80015c4:	f7ff fea1 	bl	800130a <nRF24_WriteReg>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}

080015cc <SPI1_Init>:
    nRF24_WriteReg(RX_PW_P0, 5);      // Payload de 5 bytes
    nRF24_WriteReg(CONFIG, 0x0E);     // PWR_UP + PRIM_RX + CRC_EN
    nRF24_CE_H();
}

void SPI1_Init(void) {
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
    // Habilita clocks: GPIOA e SPI1
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_SPI1EN;
 80015d0:	4b16      	ldr	r3, [pc, #88]	@ (800162c <SPI1_Init+0x60>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a15      	ldr	r2, [pc, #84]	@ (800162c <SPI1_Init+0x60>)
 80015d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6193      	str	r3, [r2, #24]
    // PA5 (SCK) → Alt. Function Push-Pull
    // PA6 (MISO) → Input Floating
    // PA7 (MOSI) → Alt. Function Push-Pull

    // Reset bits
    GPIOA->CRL &= ~(GPIO_CRL_CNF5 | GPIO_CRL_MODE5 |  // PA5
 80015e0:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <SPI1_Init+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <SPI1_Init+0x64>)
 80015e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80015ea:	6013      	str	r3, [r2, #0]
                    GPIO_CRL_CNF6 | GPIO_CRL_MODE6 |  // PA6
                    GPIO_CRL_CNF7 | GPIO_CRL_MODE7);  // PA7

    // PA5 (SCK) = AF Push-Pull, 50MHz
    GPIOA->CRL |= GPIO_CRL_CNF5_1 | GPIO_CRL_MODE5;
 80015ec:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <SPI1_Init+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001630 <SPI1_Init+0x64>)
 80015f2:	f443 0330 	orr.w	r3, r3, #11534336	@ 0xb00000
 80015f6:	6013      	str	r3, [r2, #0]

    // PA6 (MISO) = Input floating
    GPIOA->CRL |= GPIO_CRL_CNF6_0;
 80015f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <SPI1_Init+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <SPI1_Init+0x64>)
 80015fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001602:	6013      	str	r3, [r2, #0]

    // PA7 (MOSI) = AF Push-Pull, 50MHz
    GPIOA->CRL |= GPIO_CRL_CNF7_1 | GPIO_CRL_MODE7;
 8001604:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <SPI1_Init+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a09      	ldr	r2, [pc, #36]	@ (8001630 <SPI1_Init+0x64>)
 800160a:	f043 4330 	orr.w	r3, r3, #2952790016	@ 0xb0000000
 800160e:	6013      	str	r3, [r2, #0]

    // Configura SPI1: Master, BR[2:0]=000 (f_PCLK/2), CPOL=0, CPHA=0, SSM=1, SSI=1
    SPI1->CR1 = SPI_CR1_MSTR      // Master
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <SPI1_Init+0x68>)
 8001612:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8001616:	601a      	str	r2, [r3, #0]
              | SPI_CR1_SSI       // Internal slave select
              | SPI_CR1_BR_0      // Baud rate: PCLK/4
              ;

    // Habilita SPI
    SPI1->CR1 |= SPI_CR1_SPE;
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <SPI1_Init+0x68>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <SPI1_Init+0x68>)
 800161e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	40021000 	.word	0x40021000
 8001630:	40010800 	.word	0x40010800
 8001634:	40013000 	.word	0x40013000

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	@ (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	@ (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	@ (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f000 f916 	bl	8001898 <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	@ (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20005000 	.word	0x20005000
 8001698:	00000400 	.word	0x00000400
 800169c:	2000007c 	.word	0x2000007c
 80016a0:	200001c8 	.word	0x200001c8

080016a4 <UART_Init>:
#include <stdio.h>  // Para sprintf

uint8_t *ptr;  // Ponteiro global para a função de transmissão

// Inicializar a UART
void UART_Init(void) {
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
    /* Habilitar o clock para GPIOA */
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <UART_Init+0x5c>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <UART_Init+0x5c>)
 80016ae:	f043 0304 	orr.w	r3, r3, #4
 80016b2:	6193      	str	r3, [r2, #24]

    /* Configurar PA9 (TX) como saída*/
    GPIOA->CRH &= 0xFFFFFF0F;
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <UART_Init+0x60>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a12      	ldr	r2, [pc, #72]	@ (8001704 <UART_Init+0x60>)
 80016ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80016be:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= 0x000000B0;
 80016c0:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <UART_Init+0x60>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001704 <UART_Init+0x60>)
 80016c6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80016ca:	6053      	str	r3, [r2, #4]

    /* Habilitar o clock para USART1 */
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <UART_Init+0x5c>)
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001700 <UART_Init+0x5c>)
 80016d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d6:	6193      	str	r3, [r2, #24]

    /* Configurar o baud rate da UART */
    USART1->BRR = ((CPU_CLK + (BaudRate / 2U)) / BaudRate);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <UART_Init+0x64>)
 80016da:	2245      	movs	r2, #69	@ 0x45
 80016dc:	609a      	str	r2, [r3, #8]

    /* Habilitar a transmissão e a UART */
    USART1->CR1 |= USART_CR1_TE;
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <UART_Init+0x64>)
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	4a09      	ldr	r2, [pc, #36]	@ (8001708 <UART_Init+0x64>)
 80016e4:	f043 0308 	orr.w	r3, r3, #8
 80016e8:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <UART_Init+0x64>)
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	4a06      	ldr	r2, [pc, #24]	@ (8001708 <UART_Init+0x64>)
 80016f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016f4:	60d3      	str	r3, [r2, #12]
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bc80      	pop	{r7}
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	40010800 	.word	0x40010800
 8001708:	40013800 	.word	0x40013800

0800170c <print_uart>:

// Função para enviar uma string simples pela UART
void print_uart(const char *label) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
    uart_write((uint8_t*)label);  // Converte para uint8_t* e envia via UART
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f805 	bl	8001724 <uart_write>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <uart_write>:

// Função para enviar uma string pela UART
void uart_write(uint8_t *ch) {
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    while (*ch) {
 800172c:	e00d      	b.n	800174a <uart_write+0x26>
        // Aguarde até que o registrador de transmissão esteja vazio
        while (!(USART1->SR & USART_SR_TXE)) {}
 800172e:	bf00      	nop
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <uart_write+0x3c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f9      	beq.n	8001730 <uart_write+0xc>
        // Enviar o byte atual
        USART1->DR = (*ch & 0xFF);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <uart_write+0x3c>)
 8001742:	605a      	str	r2, [r3, #4]
        ch++;  // Avançar para o próximo caractere
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3301      	adds	r3, #1
 8001748:	607b      	str	r3, [r7, #4]
    while (*ch) {
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ed      	bne.n	800172e <uart_write+0xa>
    }
}
 8001752:	bf00      	nop
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40013800 	.word	0x40013800

08001764 <uart_print_int>:

// Função para enviar um número inteiro com uma label via UART
void uart_print_int(const char *label, uint32_t value) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b090      	sub	sp, #64	@ 0x40
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    char buffer[50];
    sprintf(buffer, "%s: %lu\n\r", label, value);
 800176e:	f107 000c 	add.w	r0, r7, #12
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	4906      	ldr	r1, [pc, #24]	@ (8001790 <uart_print_int+0x2c>)
 8001778:	f000 f86c 	bl	8001854 <siprintf>
    uart_write((uint8_t*)buffer);
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ffcf 	bl	8001724 <uart_write>
}
 8001786:	bf00      	nop
 8001788:	3740      	adds	r7, #64	@ 0x40
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	08002518 	.word	0x08002518

08001794 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001794:	480d      	ldr	r0, [pc, #52]	@ (80017cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001796:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001798:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800179c:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800179e:	490d      	ldr	r1, [pc, #52]	@ (80017d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a0:	4a0d      	ldr	r2, [pc, #52]	@ (80017d8 <LoopForever+0xe>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b4:	4c0a      	ldr	r4, [pc, #40]	@ (80017e0 <LoopForever+0x16>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80017c2:	f000 f86f 	bl	80018a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017c6:	f7ff fc5f 	bl	8001088 <main>

080017ca <LoopForever>:

LoopForever:
  b LoopForever
 80017ca:	e7fe      	b.n	80017ca <LoopForever>
  ldr   r0, =_estack
 80017cc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d4:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80017d8:	08002560 	.word	0x08002560
  ldr r2, =_sbss
 80017dc:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80017e0:	200001c8 	.word	0x200001c8

080017e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <ADC1_2_IRQHandler>
	...

080017e8 <sniprintf>:
 80017e8:	b40c      	push	{r2, r3}
 80017ea:	b530      	push	{r4, r5, lr}
 80017ec:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <sniprintf+0x68>)
 80017ee:	1e0c      	subs	r4, r1, #0
 80017f0:	681d      	ldr	r5, [r3, #0]
 80017f2:	b09d      	sub	sp, #116	@ 0x74
 80017f4:	da08      	bge.n	8001808 <sniprintf+0x20>
 80017f6:	238b      	movs	r3, #139	@ 0x8b
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017fc:	602b      	str	r3, [r5, #0]
 80017fe:	b01d      	add	sp, #116	@ 0x74
 8001800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001804:	b002      	add	sp, #8
 8001806:	4770      	bx	lr
 8001808:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800180c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	931b      	str	r3, [sp, #108]	@ 0x6c
 8001816:	bf0c      	ite	eq
 8001818:	4623      	moveq	r3, r4
 800181a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800181e:	9304      	str	r3, [sp, #16]
 8001820:	9307      	str	r3, [sp, #28]
 8001822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001826:	9002      	str	r0, [sp, #8]
 8001828:	9006      	str	r0, [sp, #24]
 800182a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800182e:	4628      	mov	r0, r5
 8001830:	ab21      	add	r3, sp, #132	@ 0x84
 8001832:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8001834:	a902      	add	r1, sp, #8
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	f000 f9ac 	bl	8001b94 <_svfiprintf_r>
 800183c:	1c43      	adds	r3, r0, #1
 800183e:	bfbc      	itt	lt
 8001840:	238b      	movlt	r3, #139	@ 0x8b
 8001842:	602b      	strlt	r3, [r5, #0]
 8001844:	2c00      	cmp	r4, #0
 8001846:	d0da      	beq.n	80017fe <sniprintf+0x16>
 8001848:	2200      	movs	r2, #0
 800184a:	9b02      	ldr	r3, [sp, #8]
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	e7d6      	b.n	80017fe <sniprintf+0x16>
 8001850:	20000000 	.word	0x20000000

08001854 <siprintf>:
 8001854:	b40e      	push	{r1, r2, r3}
 8001856:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800185a:	b510      	push	{r4, lr}
 800185c:	2400      	movs	r4, #0
 800185e:	b09d      	sub	sp, #116	@ 0x74
 8001860:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001862:	9002      	str	r0, [sp, #8]
 8001864:	9006      	str	r0, [sp, #24]
 8001866:	9107      	str	r1, [sp, #28]
 8001868:	9104      	str	r1, [sp, #16]
 800186a:	4809      	ldr	r0, [pc, #36]	@ (8001890 <siprintf+0x3c>)
 800186c:	4909      	ldr	r1, [pc, #36]	@ (8001894 <siprintf+0x40>)
 800186e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001872:	9105      	str	r1, [sp, #20]
 8001874:	6800      	ldr	r0, [r0, #0]
 8001876:	a902      	add	r1, sp, #8
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800187c:	f000 f98a 	bl	8001b94 <_svfiprintf_r>
 8001880:	9b02      	ldr	r3, [sp, #8]
 8001882:	701c      	strb	r4, [r3, #0]
 8001884:	b01d      	add	sp, #116	@ 0x74
 8001886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800188a:	b003      	add	sp, #12
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000
 8001894:	ffff0208 	.word	0xffff0208

08001898 <__errno>:
 8001898:	4b01      	ldr	r3, [pc, #4]	@ (80018a0 <__errno+0x8>)
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000000 	.word	0x20000000

080018a4 <__libc_init_array>:
 80018a4:	b570      	push	{r4, r5, r6, lr}
 80018a6:	2600      	movs	r6, #0
 80018a8:	4d0c      	ldr	r5, [pc, #48]	@ (80018dc <__libc_init_array+0x38>)
 80018aa:	4c0d      	ldr	r4, [pc, #52]	@ (80018e0 <__libc_init_array+0x3c>)
 80018ac:	1b64      	subs	r4, r4, r5
 80018ae:	10a4      	asrs	r4, r4, #2
 80018b0:	42a6      	cmp	r6, r4
 80018b2:	d109      	bne.n	80018c8 <__libc_init_array+0x24>
 80018b4:	f000 fc76 	bl	80021a4 <_init>
 80018b8:	2600      	movs	r6, #0
 80018ba:	4d0a      	ldr	r5, [pc, #40]	@ (80018e4 <__libc_init_array+0x40>)
 80018bc:	4c0a      	ldr	r4, [pc, #40]	@ (80018e8 <__libc_init_array+0x44>)
 80018be:	1b64      	subs	r4, r4, r5
 80018c0:	10a4      	asrs	r4, r4, #2
 80018c2:	42a6      	cmp	r6, r4
 80018c4:	d105      	bne.n	80018d2 <__libc_init_array+0x2e>
 80018c6:	bd70      	pop	{r4, r5, r6, pc}
 80018c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80018cc:	4798      	blx	r3
 80018ce:	3601      	adds	r6, #1
 80018d0:	e7ee      	b.n	80018b0 <__libc_init_array+0xc>
 80018d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80018d6:	4798      	blx	r3
 80018d8:	3601      	adds	r6, #1
 80018da:	e7f2      	b.n	80018c2 <__libc_init_array+0x1e>
 80018dc:	08002558 	.word	0x08002558
 80018e0:	08002558 	.word	0x08002558
 80018e4:	08002558 	.word	0x08002558
 80018e8:	0800255c 	.word	0x0800255c

080018ec <__retarget_lock_acquire_recursive>:
 80018ec:	4770      	bx	lr

080018ee <__retarget_lock_release_recursive>:
 80018ee:	4770      	bx	lr

080018f0 <_free_r>:
 80018f0:	b538      	push	{r3, r4, r5, lr}
 80018f2:	4605      	mov	r5, r0
 80018f4:	2900      	cmp	r1, #0
 80018f6:	d040      	beq.n	800197a <_free_r+0x8a>
 80018f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80018fc:	1f0c      	subs	r4, r1, #4
 80018fe:	2b00      	cmp	r3, #0
 8001900:	bfb8      	it	lt
 8001902:	18e4      	addlt	r4, r4, r3
 8001904:	f000 f8de 	bl	8001ac4 <__malloc_lock>
 8001908:	4a1c      	ldr	r2, [pc, #112]	@ (800197c <_free_r+0x8c>)
 800190a:	6813      	ldr	r3, [r2, #0]
 800190c:	b933      	cbnz	r3, 800191c <_free_r+0x2c>
 800190e:	6063      	str	r3, [r4, #4]
 8001910:	6014      	str	r4, [r2, #0]
 8001912:	4628      	mov	r0, r5
 8001914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001918:	f000 b8da 	b.w	8001ad0 <__malloc_unlock>
 800191c:	42a3      	cmp	r3, r4
 800191e:	d908      	bls.n	8001932 <_free_r+0x42>
 8001920:	6820      	ldr	r0, [r4, #0]
 8001922:	1821      	adds	r1, r4, r0
 8001924:	428b      	cmp	r3, r1
 8001926:	bf01      	itttt	eq
 8001928:	6819      	ldreq	r1, [r3, #0]
 800192a:	685b      	ldreq	r3, [r3, #4]
 800192c:	1809      	addeq	r1, r1, r0
 800192e:	6021      	streq	r1, [r4, #0]
 8001930:	e7ed      	b.n	800190e <_free_r+0x1e>
 8001932:	461a      	mov	r2, r3
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	b10b      	cbz	r3, 800193c <_free_r+0x4c>
 8001938:	42a3      	cmp	r3, r4
 800193a:	d9fa      	bls.n	8001932 <_free_r+0x42>
 800193c:	6811      	ldr	r1, [r2, #0]
 800193e:	1850      	adds	r0, r2, r1
 8001940:	42a0      	cmp	r0, r4
 8001942:	d10b      	bne.n	800195c <_free_r+0x6c>
 8001944:	6820      	ldr	r0, [r4, #0]
 8001946:	4401      	add	r1, r0
 8001948:	1850      	adds	r0, r2, r1
 800194a:	4283      	cmp	r3, r0
 800194c:	6011      	str	r1, [r2, #0]
 800194e:	d1e0      	bne.n	8001912 <_free_r+0x22>
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4408      	add	r0, r1
 8001956:	6010      	str	r0, [r2, #0]
 8001958:	6053      	str	r3, [r2, #4]
 800195a:	e7da      	b.n	8001912 <_free_r+0x22>
 800195c:	d902      	bls.n	8001964 <_free_r+0x74>
 800195e:	230c      	movs	r3, #12
 8001960:	602b      	str	r3, [r5, #0]
 8001962:	e7d6      	b.n	8001912 <_free_r+0x22>
 8001964:	6820      	ldr	r0, [r4, #0]
 8001966:	1821      	adds	r1, r4, r0
 8001968:	428b      	cmp	r3, r1
 800196a:	bf01      	itttt	eq
 800196c:	6819      	ldreq	r1, [r3, #0]
 800196e:	685b      	ldreq	r3, [r3, #4]
 8001970:	1809      	addeq	r1, r1, r0
 8001972:	6021      	streq	r1, [r4, #0]
 8001974:	6063      	str	r3, [r4, #4]
 8001976:	6054      	str	r4, [r2, #4]
 8001978:	e7cb      	b.n	8001912 <_free_r+0x22>
 800197a:	bd38      	pop	{r3, r4, r5, pc}
 800197c:	200001c4 	.word	0x200001c4

08001980 <sbrk_aligned>:
 8001980:	b570      	push	{r4, r5, r6, lr}
 8001982:	4e0f      	ldr	r6, [pc, #60]	@ (80019c0 <sbrk_aligned+0x40>)
 8001984:	460c      	mov	r4, r1
 8001986:	6831      	ldr	r1, [r6, #0]
 8001988:	4605      	mov	r5, r0
 800198a:	b911      	cbnz	r1, 8001992 <sbrk_aligned+0x12>
 800198c:	f000 fba8 	bl	80020e0 <_sbrk_r>
 8001990:	6030      	str	r0, [r6, #0]
 8001992:	4621      	mov	r1, r4
 8001994:	4628      	mov	r0, r5
 8001996:	f000 fba3 	bl	80020e0 <_sbrk_r>
 800199a:	1c43      	adds	r3, r0, #1
 800199c:	d103      	bne.n	80019a6 <sbrk_aligned+0x26>
 800199e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80019a2:	4620      	mov	r0, r4
 80019a4:	bd70      	pop	{r4, r5, r6, pc}
 80019a6:	1cc4      	adds	r4, r0, #3
 80019a8:	f024 0403 	bic.w	r4, r4, #3
 80019ac:	42a0      	cmp	r0, r4
 80019ae:	d0f8      	beq.n	80019a2 <sbrk_aligned+0x22>
 80019b0:	1a21      	subs	r1, r4, r0
 80019b2:	4628      	mov	r0, r5
 80019b4:	f000 fb94 	bl	80020e0 <_sbrk_r>
 80019b8:	3001      	adds	r0, #1
 80019ba:	d1f2      	bne.n	80019a2 <sbrk_aligned+0x22>
 80019bc:	e7ef      	b.n	800199e <sbrk_aligned+0x1e>
 80019be:	bf00      	nop
 80019c0:	200001c0 	.word	0x200001c0

080019c4 <_malloc_r>:
 80019c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019c8:	1ccd      	adds	r5, r1, #3
 80019ca:	f025 0503 	bic.w	r5, r5, #3
 80019ce:	3508      	adds	r5, #8
 80019d0:	2d0c      	cmp	r5, #12
 80019d2:	bf38      	it	cc
 80019d4:	250c      	movcc	r5, #12
 80019d6:	2d00      	cmp	r5, #0
 80019d8:	4606      	mov	r6, r0
 80019da:	db01      	blt.n	80019e0 <_malloc_r+0x1c>
 80019dc:	42a9      	cmp	r1, r5
 80019de:	d904      	bls.n	80019ea <_malloc_r+0x26>
 80019e0:	230c      	movs	r3, #12
 80019e2:	6033      	str	r3, [r6, #0]
 80019e4:	2000      	movs	r0, #0
 80019e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001ac0 <_malloc_r+0xfc>
 80019ee:	f000 f869 	bl	8001ac4 <__malloc_lock>
 80019f2:	f8d8 3000 	ldr.w	r3, [r8]
 80019f6:	461c      	mov	r4, r3
 80019f8:	bb44      	cbnz	r4, 8001a4c <_malloc_r+0x88>
 80019fa:	4629      	mov	r1, r5
 80019fc:	4630      	mov	r0, r6
 80019fe:	f7ff ffbf 	bl	8001980 <sbrk_aligned>
 8001a02:	1c43      	adds	r3, r0, #1
 8001a04:	4604      	mov	r4, r0
 8001a06:	d158      	bne.n	8001aba <_malloc_r+0xf6>
 8001a08:	f8d8 4000 	ldr.w	r4, [r8]
 8001a0c:	4627      	mov	r7, r4
 8001a0e:	2f00      	cmp	r7, #0
 8001a10:	d143      	bne.n	8001a9a <_malloc_r+0xd6>
 8001a12:	2c00      	cmp	r4, #0
 8001a14:	d04b      	beq.n	8001aae <_malloc_r+0xea>
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	4639      	mov	r1, r7
 8001a1a:	4630      	mov	r0, r6
 8001a1c:	eb04 0903 	add.w	r9, r4, r3
 8001a20:	f000 fb5e 	bl	80020e0 <_sbrk_r>
 8001a24:	4581      	cmp	r9, r0
 8001a26:	d142      	bne.n	8001aae <_malloc_r+0xea>
 8001a28:	6821      	ldr	r1, [r4, #0]
 8001a2a:	4630      	mov	r0, r6
 8001a2c:	1a6d      	subs	r5, r5, r1
 8001a2e:	4629      	mov	r1, r5
 8001a30:	f7ff ffa6 	bl	8001980 <sbrk_aligned>
 8001a34:	3001      	adds	r0, #1
 8001a36:	d03a      	beq.n	8001aae <_malloc_r+0xea>
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	442b      	add	r3, r5
 8001a3c:	6023      	str	r3, [r4, #0]
 8001a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	bb62      	cbnz	r2, 8001aa0 <_malloc_r+0xdc>
 8001a46:	f8c8 7000 	str.w	r7, [r8]
 8001a4a:	e00f      	b.n	8001a6c <_malloc_r+0xa8>
 8001a4c:	6822      	ldr	r2, [r4, #0]
 8001a4e:	1b52      	subs	r2, r2, r5
 8001a50:	d420      	bmi.n	8001a94 <_malloc_r+0xd0>
 8001a52:	2a0b      	cmp	r2, #11
 8001a54:	d917      	bls.n	8001a86 <_malloc_r+0xc2>
 8001a56:	1961      	adds	r1, r4, r5
 8001a58:	42a3      	cmp	r3, r4
 8001a5a:	6025      	str	r5, [r4, #0]
 8001a5c:	bf18      	it	ne
 8001a5e:	6059      	strne	r1, [r3, #4]
 8001a60:	6863      	ldr	r3, [r4, #4]
 8001a62:	bf08      	it	eq
 8001a64:	f8c8 1000 	streq.w	r1, [r8]
 8001a68:	5162      	str	r2, [r4, r5]
 8001a6a:	604b      	str	r3, [r1, #4]
 8001a6c:	4630      	mov	r0, r6
 8001a6e:	f000 f82f 	bl	8001ad0 <__malloc_unlock>
 8001a72:	f104 000b 	add.w	r0, r4, #11
 8001a76:	1d23      	adds	r3, r4, #4
 8001a78:	f020 0007 	bic.w	r0, r0, #7
 8001a7c:	1ac2      	subs	r2, r0, r3
 8001a7e:	bf1c      	itt	ne
 8001a80:	1a1b      	subne	r3, r3, r0
 8001a82:	50a3      	strne	r3, [r4, r2]
 8001a84:	e7af      	b.n	80019e6 <_malloc_r+0x22>
 8001a86:	6862      	ldr	r2, [r4, #4]
 8001a88:	42a3      	cmp	r3, r4
 8001a8a:	bf0c      	ite	eq
 8001a8c:	f8c8 2000 	streq.w	r2, [r8]
 8001a90:	605a      	strne	r2, [r3, #4]
 8001a92:	e7eb      	b.n	8001a6c <_malloc_r+0xa8>
 8001a94:	4623      	mov	r3, r4
 8001a96:	6864      	ldr	r4, [r4, #4]
 8001a98:	e7ae      	b.n	80019f8 <_malloc_r+0x34>
 8001a9a:	463c      	mov	r4, r7
 8001a9c:	687f      	ldr	r7, [r7, #4]
 8001a9e:	e7b6      	b.n	8001a0e <_malloc_r+0x4a>
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	42a3      	cmp	r3, r4
 8001aa6:	d1fb      	bne.n	8001aa0 <_malloc_r+0xdc>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6053      	str	r3, [r2, #4]
 8001aac:	e7de      	b.n	8001a6c <_malloc_r+0xa8>
 8001aae:	230c      	movs	r3, #12
 8001ab0:	4630      	mov	r0, r6
 8001ab2:	6033      	str	r3, [r6, #0]
 8001ab4:	f000 f80c 	bl	8001ad0 <__malloc_unlock>
 8001ab8:	e794      	b.n	80019e4 <_malloc_r+0x20>
 8001aba:	6005      	str	r5, [r0, #0]
 8001abc:	e7d6      	b.n	8001a6c <_malloc_r+0xa8>
 8001abe:	bf00      	nop
 8001ac0:	200001c4 	.word	0x200001c4

08001ac4 <__malloc_lock>:
 8001ac4:	4801      	ldr	r0, [pc, #4]	@ (8001acc <__malloc_lock+0x8>)
 8001ac6:	f7ff bf11 	b.w	80018ec <__retarget_lock_acquire_recursive>
 8001aca:	bf00      	nop
 8001acc:	200001bc 	.word	0x200001bc

08001ad0 <__malloc_unlock>:
 8001ad0:	4801      	ldr	r0, [pc, #4]	@ (8001ad8 <__malloc_unlock+0x8>)
 8001ad2:	f7ff bf0c 	b.w	80018ee <__retarget_lock_release_recursive>
 8001ad6:	bf00      	nop
 8001ad8:	200001bc 	.word	0x200001bc

08001adc <__ssputs_r>:
 8001adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ae0:	461f      	mov	r7, r3
 8001ae2:	688e      	ldr	r6, [r1, #8]
 8001ae4:	4682      	mov	sl, r0
 8001ae6:	42be      	cmp	r6, r7
 8001ae8:	460c      	mov	r4, r1
 8001aea:	4690      	mov	r8, r2
 8001aec:	680b      	ldr	r3, [r1, #0]
 8001aee:	d82d      	bhi.n	8001b4c <__ssputs_r+0x70>
 8001af0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001af4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001af8:	d026      	beq.n	8001b48 <__ssputs_r+0x6c>
 8001afa:	6965      	ldr	r5, [r4, #20]
 8001afc:	6909      	ldr	r1, [r1, #16]
 8001afe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b02:	eba3 0901 	sub.w	r9, r3, r1
 8001b06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001b0a:	1c7b      	adds	r3, r7, #1
 8001b0c:	444b      	add	r3, r9
 8001b0e:	106d      	asrs	r5, r5, #1
 8001b10:	429d      	cmp	r5, r3
 8001b12:	bf38      	it	cc
 8001b14:	461d      	movcc	r5, r3
 8001b16:	0553      	lsls	r3, r2, #21
 8001b18:	d527      	bpl.n	8001b6a <__ssputs_r+0x8e>
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7ff ff52 	bl	80019c4 <_malloc_r>
 8001b20:	4606      	mov	r6, r0
 8001b22:	b360      	cbz	r0, 8001b7e <__ssputs_r+0xa2>
 8001b24:	464a      	mov	r2, r9
 8001b26:	6921      	ldr	r1, [r4, #16]
 8001b28:	f000 faf8 	bl	800211c <memcpy>
 8001b2c:	89a3      	ldrh	r3, [r4, #12]
 8001b2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b36:	81a3      	strh	r3, [r4, #12]
 8001b38:	6126      	str	r6, [r4, #16]
 8001b3a:	444e      	add	r6, r9
 8001b3c:	6026      	str	r6, [r4, #0]
 8001b3e:	463e      	mov	r6, r7
 8001b40:	6165      	str	r5, [r4, #20]
 8001b42:	eba5 0509 	sub.w	r5, r5, r9
 8001b46:	60a5      	str	r5, [r4, #8]
 8001b48:	42be      	cmp	r6, r7
 8001b4a:	d900      	bls.n	8001b4e <__ssputs_r+0x72>
 8001b4c:	463e      	mov	r6, r7
 8001b4e:	4632      	mov	r2, r6
 8001b50:	4641      	mov	r1, r8
 8001b52:	6820      	ldr	r0, [r4, #0]
 8001b54:	f000 faaa 	bl	80020ac <memmove>
 8001b58:	2000      	movs	r0, #0
 8001b5a:	68a3      	ldr	r3, [r4, #8]
 8001b5c:	1b9b      	subs	r3, r3, r6
 8001b5e:	60a3      	str	r3, [r4, #8]
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	4433      	add	r3, r6
 8001b64:	6023      	str	r3, [r4, #0]
 8001b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	f000 fae4 	bl	8002138 <_realloc_r>
 8001b70:	4606      	mov	r6, r0
 8001b72:	2800      	cmp	r0, #0
 8001b74:	d1e0      	bne.n	8001b38 <__ssputs_r+0x5c>
 8001b76:	4650      	mov	r0, sl
 8001b78:	6921      	ldr	r1, [r4, #16]
 8001b7a:	f7ff feb9 	bl	80018f0 <_free_r>
 8001b7e:	230c      	movs	r3, #12
 8001b80:	f8ca 3000 	str.w	r3, [sl]
 8001b84:	89a3      	ldrh	r3, [r4, #12]
 8001b86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b8e:	81a3      	strh	r3, [r4, #12]
 8001b90:	e7e9      	b.n	8001b66 <__ssputs_r+0x8a>
	...

08001b94 <_svfiprintf_r>:
 8001b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b98:	4698      	mov	r8, r3
 8001b9a:	898b      	ldrh	r3, [r1, #12]
 8001b9c:	4607      	mov	r7, r0
 8001b9e:	061b      	lsls	r3, r3, #24
 8001ba0:	460d      	mov	r5, r1
 8001ba2:	4614      	mov	r4, r2
 8001ba4:	b09d      	sub	sp, #116	@ 0x74
 8001ba6:	d510      	bpl.n	8001bca <_svfiprintf_r+0x36>
 8001ba8:	690b      	ldr	r3, [r1, #16]
 8001baa:	b973      	cbnz	r3, 8001bca <_svfiprintf_r+0x36>
 8001bac:	2140      	movs	r1, #64	@ 0x40
 8001bae:	f7ff ff09 	bl	80019c4 <_malloc_r>
 8001bb2:	6028      	str	r0, [r5, #0]
 8001bb4:	6128      	str	r0, [r5, #16]
 8001bb6:	b930      	cbnz	r0, 8001bc6 <_svfiprintf_r+0x32>
 8001bb8:	230c      	movs	r3, #12
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bc0:	b01d      	add	sp, #116	@ 0x74
 8001bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bc6:	2340      	movs	r3, #64	@ 0x40
 8001bc8:	616b      	str	r3, [r5, #20]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bce:	2320      	movs	r3, #32
 8001bd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001bd4:	2330      	movs	r3, #48	@ 0x30
 8001bd6:	f04f 0901 	mov.w	r9, #1
 8001bda:	f8cd 800c 	str.w	r8, [sp, #12]
 8001bde:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001d78 <_svfiprintf_r+0x1e4>
 8001be2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001be6:	4623      	mov	r3, r4
 8001be8:	469a      	mov	sl, r3
 8001bea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001bee:	b10a      	cbz	r2, 8001bf4 <_svfiprintf_r+0x60>
 8001bf0:	2a25      	cmp	r2, #37	@ 0x25
 8001bf2:	d1f9      	bne.n	8001be8 <_svfiprintf_r+0x54>
 8001bf4:	ebba 0b04 	subs.w	fp, sl, r4
 8001bf8:	d00b      	beq.n	8001c12 <_svfiprintf_r+0x7e>
 8001bfa:	465b      	mov	r3, fp
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	4629      	mov	r1, r5
 8001c00:	4638      	mov	r0, r7
 8001c02:	f7ff ff6b 	bl	8001adc <__ssputs_r>
 8001c06:	3001      	adds	r0, #1
 8001c08:	f000 80a7 	beq.w	8001d5a <_svfiprintf_r+0x1c6>
 8001c0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c0e:	445a      	add	r2, fp
 8001c10:	9209      	str	r2, [sp, #36]	@ 0x24
 8001c12:	f89a 3000 	ldrb.w	r3, [sl]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 809f 	beq.w	8001d5a <_svfiprintf_r+0x1c6>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c26:	f10a 0a01 	add.w	sl, sl, #1
 8001c2a:	9304      	str	r3, [sp, #16]
 8001c2c:	9307      	str	r3, [sp, #28]
 8001c2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001c32:	931a      	str	r3, [sp, #104]	@ 0x68
 8001c34:	4654      	mov	r4, sl
 8001c36:	2205      	movs	r2, #5
 8001c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c3c:	484e      	ldr	r0, [pc, #312]	@ (8001d78 <_svfiprintf_r+0x1e4>)
 8001c3e:	f000 fa5f 	bl	8002100 <memchr>
 8001c42:	9a04      	ldr	r2, [sp, #16]
 8001c44:	b9d8      	cbnz	r0, 8001c7e <_svfiprintf_r+0xea>
 8001c46:	06d0      	lsls	r0, r2, #27
 8001c48:	bf44      	itt	mi
 8001c4a:	2320      	movmi	r3, #32
 8001c4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c50:	0711      	lsls	r1, r2, #28
 8001c52:	bf44      	itt	mi
 8001c54:	232b      	movmi	r3, #43	@ 0x2b
 8001c56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8001c5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c60:	d015      	beq.n	8001c8e <_svfiprintf_r+0xfa>
 8001c62:	4654      	mov	r4, sl
 8001c64:	2000      	movs	r0, #0
 8001c66:	f04f 0c0a 	mov.w	ip, #10
 8001c6a:	9a07      	ldr	r2, [sp, #28]
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c72:	3b30      	subs	r3, #48	@ 0x30
 8001c74:	2b09      	cmp	r3, #9
 8001c76:	d94b      	bls.n	8001d10 <_svfiprintf_r+0x17c>
 8001c78:	b1b0      	cbz	r0, 8001ca8 <_svfiprintf_r+0x114>
 8001c7a:	9207      	str	r2, [sp, #28]
 8001c7c:	e014      	b.n	8001ca8 <_svfiprintf_r+0x114>
 8001c7e:	eba0 0308 	sub.w	r3, r0, r8
 8001c82:	fa09 f303 	lsl.w	r3, r9, r3
 8001c86:	4313      	orrs	r3, r2
 8001c88:	46a2      	mov	sl, r4
 8001c8a:	9304      	str	r3, [sp, #16]
 8001c8c:	e7d2      	b.n	8001c34 <_svfiprintf_r+0xa0>
 8001c8e:	9b03      	ldr	r3, [sp, #12]
 8001c90:	1d19      	adds	r1, r3, #4
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	9103      	str	r1, [sp, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	bfbb      	ittet	lt
 8001c9a:	425b      	neglt	r3, r3
 8001c9c:	f042 0202 	orrlt.w	r2, r2, #2
 8001ca0:	9307      	strge	r3, [sp, #28]
 8001ca2:	9307      	strlt	r3, [sp, #28]
 8001ca4:	bfb8      	it	lt
 8001ca6:	9204      	strlt	r2, [sp, #16]
 8001ca8:	7823      	ldrb	r3, [r4, #0]
 8001caa:	2b2e      	cmp	r3, #46	@ 0x2e
 8001cac:	d10a      	bne.n	8001cc4 <_svfiprintf_r+0x130>
 8001cae:	7863      	ldrb	r3, [r4, #1]
 8001cb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cb2:	d132      	bne.n	8001d1a <_svfiprintf_r+0x186>
 8001cb4:	9b03      	ldr	r3, [sp, #12]
 8001cb6:	3402      	adds	r4, #2
 8001cb8:	1d1a      	adds	r2, r3, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	9203      	str	r2, [sp, #12]
 8001cbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001cc2:	9305      	str	r3, [sp, #20]
 8001cc4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001d7c <_svfiprintf_r+0x1e8>
 8001cc8:	2203      	movs	r2, #3
 8001cca:	4650      	mov	r0, sl
 8001ccc:	7821      	ldrb	r1, [r4, #0]
 8001cce:	f000 fa17 	bl	8002100 <memchr>
 8001cd2:	b138      	cbz	r0, 8001ce4 <_svfiprintf_r+0x150>
 8001cd4:	2240      	movs	r2, #64	@ 0x40
 8001cd6:	9b04      	ldr	r3, [sp, #16]
 8001cd8:	eba0 000a 	sub.w	r0, r0, sl
 8001cdc:	4082      	lsls	r2, r0
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	3401      	adds	r4, #1
 8001ce2:	9304      	str	r3, [sp, #16]
 8001ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ce8:	2206      	movs	r2, #6
 8001cea:	4825      	ldr	r0, [pc, #148]	@ (8001d80 <_svfiprintf_r+0x1ec>)
 8001cec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001cf0:	f000 fa06 	bl	8002100 <memchr>
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	d036      	beq.n	8001d66 <_svfiprintf_r+0x1d2>
 8001cf8:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <_svfiprintf_r+0x1f0>)
 8001cfa:	bb1b      	cbnz	r3, 8001d44 <_svfiprintf_r+0x1b0>
 8001cfc:	9b03      	ldr	r3, [sp, #12]
 8001cfe:	3307      	adds	r3, #7
 8001d00:	f023 0307 	bic.w	r3, r3, #7
 8001d04:	3308      	adds	r3, #8
 8001d06:	9303      	str	r3, [sp, #12]
 8001d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d0a:	4433      	add	r3, r6
 8001d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d0e:	e76a      	b.n	8001be6 <_svfiprintf_r+0x52>
 8001d10:	460c      	mov	r4, r1
 8001d12:	2001      	movs	r0, #1
 8001d14:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d18:	e7a8      	b.n	8001c6c <_svfiprintf_r+0xd8>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f04f 0c0a 	mov.w	ip, #10
 8001d20:	4619      	mov	r1, r3
 8001d22:	3401      	adds	r4, #1
 8001d24:	9305      	str	r3, [sp, #20]
 8001d26:	4620      	mov	r0, r4
 8001d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d2c:	3a30      	subs	r2, #48	@ 0x30
 8001d2e:	2a09      	cmp	r2, #9
 8001d30:	d903      	bls.n	8001d3a <_svfiprintf_r+0x1a6>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0c6      	beq.n	8001cc4 <_svfiprintf_r+0x130>
 8001d36:	9105      	str	r1, [sp, #20]
 8001d38:	e7c4      	b.n	8001cc4 <_svfiprintf_r+0x130>
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d42:	e7f0      	b.n	8001d26 <_svfiprintf_r+0x192>
 8001d44:	ab03      	add	r3, sp, #12
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	462a      	mov	r2, r5
 8001d4a:	4638      	mov	r0, r7
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <_svfiprintf_r+0x1f4>)
 8001d4e:	a904      	add	r1, sp, #16
 8001d50:	f3af 8000 	nop.w
 8001d54:	1c42      	adds	r2, r0, #1
 8001d56:	4606      	mov	r6, r0
 8001d58:	d1d6      	bne.n	8001d08 <_svfiprintf_r+0x174>
 8001d5a:	89ab      	ldrh	r3, [r5, #12]
 8001d5c:	065b      	lsls	r3, r3, #25
 8001d5e:	f53f af2d 	bmi.w	8001bbc <_svfiprintf_r+0x28>
 8001d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001d64:	e72c      	b.n	8001bc0 <_svfiprintf_r+0x2c>
 8001d66:	ab03      	add	r3, sp, #12
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	462a      	mov	r2, r5
 8001d6c:	4638      	mov	r0, r7
 8001d6e:	4b06      	ldr	r3, [pc, #24]	@ (8001d88 <_svfiprintf_r+0x1f4>)
 8001d70:	a904      	add	r1, sp, #16
 8001d72:	f000 f87d 	bl	8001e70 <_printf_i>
 8001d76:	e7ed      	b.n	8001d54 <_svfiprintf_r+0x1c0>
 8001d78:	08002522 	.word	0x08002522
 8001d7c:	08002528 	.word	0x08002528
 8001d80:	0800252c 	.word	0x0800252c
 8001d84:	00000000 	.word	0x00000000
 8001d88:	08001add 	.word	0x08001add

08001d8c <_printf_common>:
 8001d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d90:	4616      	mov	r6, r2
 8001d92:	4698      	mov	r8, r3
 8001d94:	688a      	ldr	r2, [r1, #8]
 8001d96:	690b      	ldr	r3, [r1, #16]
 8001d98:	4607      	mov	r7, r0
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	bfb8      	it	lt
 8001d9e:	4613      	movlt	r3, r2
 8001da0:	6033      	str	r3, [r6, #0]
 8001da2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001da6:	460c      	mov	r4, r1
 8001da8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001dac:	b10a      	cbz	r2, 8001db2 <_printf_common+0x26>
 8001dae:	3301      	adds	r3, #1
 8001db0:	6033      	str	r3, [r6, #0]
 8001db2:	6823      	ldr	r3, [r4, #0]
 8001db4:	0699      	lsls	r1, r3, #26
 8001db6:	bf42      	ittt	mi
 8001db8:	6833      	ldrmi	r3, [r6, #0]
 8001dba:	3302      	addmi	r3, #2
 8001dbc:	6033      	strmi	r3, [r6, #0]
 8001dbe:	6825      	ldr	r5, [r4, #0]
 8001dc0:	f015 0506 	ands.w	r5, r5, #6
 8001dc4:	d106      	bne.n	8001dd4 <_printf_common+0x48>
 8001dc6:	f104 0a19 	add.w	sl, r4, #25
 8001dca:	68e3      	ldr	r3, [r4, #12]
 8001dcc:	6832      	ldr	r2, [r6, #0]
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	42ab      	cmp	r3, r5
 8001dd2:	dc2b      	bgt.n	8001e2c <_printf_common+0xa0>
 8001dd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001dd8:	6822      	ldr	r2, [r4, #0]
 8001dda:	3b00      	subs	r3, #0
 8001ddc:	bf18      	it	ne
 8001dde:	2301      	movne	r3, #1
 8001de0:	0692      	lsls	r2, r2, #26
 8001de2:	d430      	bmi.n	8001e46 <_printf_common+0xba>
 8001de4:	4641      	mov	r1, r8
 8001de6:	4638      	mov	r0, r7
 8001de8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001dec:	47c8      	blx	r9
 8001dee:	3001      	adds	r0, #1
 8001df0:	d023      	beq.n	8001e3a <_printf_common+0xae>
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	6922      	ldr	r2, [r4, #16]
 8001df6:	f003 0306 	and.w	r3, r3, #6
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf14      	ite	ne
 8001dfe:	2500      	movne	r5, #0
 8001e00:	6833      	ldreq	r3, [r6, #0]
 8001e02:	f04f 0600 	mov.w	r6, #0
 8001e06:	bf08      	it	eq
 8001e08:	68e5      	ldreq	r5, [r4, #12]
 8001e0a:	f104 041a 	add.w	r4, r4, #26
 8001e0e:	bf08      	it	eq
 8001e10:	1aed      	subeq	r5, r5, r3
 8001e12:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001e16:	bf08      	it	eq
 8001e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	bfc4      	itt	gt
 8001e20:	1a9b      	subgt	r3, r3, r2
 8001e22:	18ed      	addgt	r5, r5, r3
 8001e24:	42b5      	cmp	r5, r6
 8001e26:	d11a      	bne.n	8001e5e <_printf_common+0xd2>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	e008      	b.n	8001e3e <_printf_common+0xb2>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	4652      	mov	r2, sl
 8001e30:	4641      	mov	r1, r8
 8001e32:	4638      	mov	r0, r7
 8001e34:	47c8      	blx	r9
 8001e36:	3001      	adds	r0, #1
 8001e38:	d103      	bne.n	8001e42 <_printf_common+0xb6>
 8001e3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e42:	3501      	adds	r5, #1
 8001e44:	e7c1      	b.n	8001dca <_printf_common+0x3e>
 8001e46:	2030      	movs	r0, #48	@ 0x30
 8001e48:	18e1      	adds	r1, r4, r3
 8001e4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001e54:	4422      	add	r2, r4
 8001e56:	3302      	adds	r3, #2
 8001e58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001e5c:	e7c2      	b.n	8001de4 <_printf_common+0x58>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	4622      	mov	r2, r4
 8001e62:	4641      	mov	r1, r8
 8001e64:	4638      	mov	r0, r7
 8001e66:	47c8      	blx	r9
 8001e68:	3001      	adds	r0, #1
 8001e6a:	d0e6      	beq.n	8001e3a <_printf_common+0xae>
 8001e6c:	3601      	adds	r6, #1
 8001e6e:	e7d9      	b.n	8001e24 <_printf_common+0x98>

08001e70 <_printf_i>:
 8001e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001e74:	7e0f      	ldrb	r7, [r1, #24]
 8001e76:	4691      	mov	r9, r2
 8001e78:	2f78      	cmp	r7, #120	@ 0x78
 8001e7a:	4680      	mov	r8, r0
 8001e7c:	460c      	mov	r4, r1
 8001e7e:	469a      	mov	sl, r3
 8001e80:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001e82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001e86:	d807      	bhi.n	8001e98 <_printf_i+0x28>
 8001e88:	2f62      	cmp	r7, #98	@ 0x62
 8001e8a:	d80a      	bhi.n	8001ea2 <_printf_i+0x32>
 8001e8c:	2f00      	cmp	r7, #0
 8001e8e:	f000 80d1 	beq.w	8002034 <_printf_i+0x1c4>
 8001e92:	2f58      	cmp	r7, #88	@ 0x58
 8001e94:	f000 80b8 	beq.w	8002008 <_printf_i+0x198>
 8001e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001ea0:	e03a      	b.n	8001f18 <_printf_i+0xa8>
 8001ea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001ea6:	2b15      	cmp	r3, #21
 8001ea8:	d8f6      	bhi.n	8001e98 <_printf_i+0x28>
 8001eaa:	a101      	add	r1, pc, #4	@ (adr r1, 8001eb0 <_printf_i+0x40>)
 8001eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001eb0:	08001f09 	.word	0x08001f09
 8001eb4:	08001f1d 	.word	0x08001f1d
 8001eb8:	08001e99 	.word	0x08001e99
 8001ebc:	08001e99 	.word	0x08001e99
 8001ec0:	08001e99 	.word	0x08001e99
 8001ec4:	08001e99 	.word	0x08001e99
 8001ec8:	08001f1d 	.word	0x08001f1d
 8001ecc:	08001e99 	.word	0x08001e99
 8001ed0:	08001e99 	.word	0x08001e99
 8001ed4:	08001e99 	.word	0x08001e99
 8001ed8:	08001e99 	.word	0x08001e99
 8001edc:	0800201b 	.word	0x0800201b
 8001ee0:	08001f47 	.word	0x08001f47
 8001ee4:	08001fd5 	.word	0x08001fd5
 8001ee8:	08001e99 	.word	0x08001e99
 8001eec:	08001e99 	.word	0x08001e99
 8001ef0:	0800203d 	.word	0x0800203d
 8001ef4:	08001e99 	.word	0x08001e99
 8001ef8:	08001f47 	.word	0x08001f47
 8001efc:	08001e99 	.word	0x08001e99
 8001f00:	08001e99 	.word	0x08001e99
 8001f04:	08001fdd 	.word	0x08001fdd
 8001f08:	6833      	ldr	r3, [r6, #0]
 8001f0a:	1d1a      	adds	r2, r3, #4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6032      	str	r2, [r6, #0]
 8001f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e09c      	b.n	8002056 <_printf_i+0x1e6>
 8001f1c:	6833      	ldr	r3, [r6, #0]
 8001f1e:	6820      	ldr	r0, [r4, #0]
 8001f20:	1d19      	adds	r1, r3, #4
 8001f22:	6031      	str	r1, [r6, #0]
 8001f24:	0606      	lsls	r6, r0, #24
 8001f26:	d501      	bpl.n	8001f2c <_printf_i+0xbc>
 8001f28:	681d      	ldr	r5, [r3, #0]
 8001f2a:	e003      	b.n	8001f34 <_printf_i+0xc4>
 8001f2c:	0645      	lsls	r5, r0, #25
 8001f2e:	d5fb      	bpl.n	8001f28 <_printf_i+0xb8>
 8001f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f34:	2d00      	cmp	r5, #0
 8001f36:	da03      	bge.n	8001f40 <_printf_i+0xd0>
 8001f38:	232d      	movs	r3, #45	@ 0x2d
 8001f3a:	426d      	negs	r5, r5
 8001f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f40:	230a      	movs	r3, #10
 8001f42:	4858      	ldr	r0, [pc, #352]	@ (80020a4 <_printf_i+0x234>)
 8001f44:	e011      	b.n	8001f6a <_printf_i+0xfa>
 8001f46:	6821      	ldr	r1, [r4, #0]
 8001f48:	6833      	ldr	r3, [r6, #0]
 8001f4a:	0608      	lsls	r0, r1, #24
 8001f4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8001f50:	d402      	bmi.n	8001f58 <_printf_i+0xe8>
 8001f52:	0649      	lsls	r1, r1, #25
 8001f54:	bf48      	it	mi
 8001f56:	b2ad      	uxthmi	r5, r5
 8001f58:	2f6f      	cmp	r7, #111	@ 0x6f
 8001f5a:	6033      	str	r3, [r6, #0]
 8001f5c:	bf14      	ite	ne
 8001f5e:	230a      	movne	r3, #10
 8001f60:	2308      	moveq	r3, #8
 8001f62:	4850      	ldr	r0, [pc, #320]	@ (80020a4 <_printf_i+0x234>)
 8001f64:	2100      	movs	r1, #0
 8001f66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001f6a:	6866      	ldr	r6, [r4, #4]
 8001f6c:	2e00      	cmp	r6, #0
 8001f6e:	60a6      	str	r6, [r4, #8]
 8001f70:	db05      	blt.n	8001f7e <_printf_i+0x10e>
 8001f72:	6821      	ldr	r1, [r4, #0]
 8001f74:	432e      	orrs	r6, r5
 8001f76:	f021 0104 	bic.w	r1, r1, #4
 8001f7a:	6021      	str	r1, [r4, #0]
 8001f7c:	d04b      	beq.n	8002016 <_printf_i+0x1a6>
 8001f7e:	4616      	mov	r6, r2
 8001f80:	fbb5 f1f3 	udiv	r1, r5, r3
 8001f84:	fb03 5711 	mls	r7, r3, r1, r5
 8001f88:	5dc7      	ldrb	r7, [r0, r7]
 8001f8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001f8e:	462f      	mov	r7, r5
 8001f90:	42bb      	cmp	r3, r7
 8001f92:	460d      	mov	r5, r1
 8001f94:	d9f4      	bls.n	8001f80 <_printf_i+0x110>
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d10b      	bne.n	8001fb2 <_printf_i+0x142>
 8001f9a:	6823      	ldr	r3, [r4, #0]
 8001f9c:	07df      	lsls	r7, r3, #31
 8001f9e:	d508      	bpl.n	8001fb2 <_printf_i+0x142>
 8001fa0:	6923      	ldr	r3, [r4, #16]
 8001fa2:	6861      	ldr	r1, [r4, #4]
 8001fa4:	4299      	cmp	r1, r3
 8001fa6:	bfde      	ittt	le
 8001fa8:	2330      	movle	r3, #48	@ 0x30
 8001faa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001fae:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001fb2:	1b92      	subs	r2, r2, r6
 8001fb4:	6122      	str	r2, [r4, #16]
 8001fb6:	464b      	mov	r3, r9
 8001fb8:	4621      	mov	r1, r4
 8001fba:	4640      	mov	r0, r8
 8001fbc:	f8cd a000 	str.w	sl, [sp]
 8001fc0:	aa03      	add	r2, sp, #12
 8001fc2:	f7ff fee3 	bl	8001d8c <_printf_common>
 8001fc6:	3001      	adds	r0, #1
 8001fc8:	d14a      	bne.n	8002060 <_printf_i+0x1f0>
 8001fca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fce:	b004      	add	sp, #16
 8001fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fd4:	6823      	ldr	r3, [r4, #0]
 8001fd6:	f043 0320 	orr.w	r3, r3, #32
 8001fda:	6023      	str	r3, [r4, #0]
 8001fdc:	2778      	movs	r7, #120	@ 0x78
 8001fde:	4832      	ldr	r0, [pc, #200]	@ (80020a8 <_printf_i+0x238>)
 8001fe0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	6831      	ldr	r1, [r6, #0]
 8001fe8:	061f      	lsls	r7, r3, #24
 8001fea:	f851 5b04 	ldr.w	r5, [r1], #4
 8001fee:	d402      	bmi.n	8001ff6 <_printf_i+0x186>
 8001ff0:	065f      	lsls	r7, r3, #25
 8001ff2:	bf48      	it	mi
 8001ff4:	b2ad      	uxthmi	r5, r5
 8001ff6:	6031      	str	r1, [r6, #0]
 8001ff8:	07d9      	lsls	r1, r3, #31
 8001ffa:	bf44      	itt	mi
 8001ffc:	f043 0320 	orrmi.w	r3, r3, #32
 8002000:	6023      	strmi	r3, [r4, #0]
 8002002:	b11d      	cbz	r5, 800200c <_printf_i+0x19c>
 8002004:	2310      	movs	r3, #16
 8002006:	e7ad      	b.n	8001f64 <_printf_i+0xf4>
 8002008:	4826      	ldr	r0, [pc, #152]	@ (80020a4 <_printf_i+0x234>)
 800200a:	e7e9      	b.n	8001fe0 <_printf_i+0x170>
 800200c:	6823      	ldr	r3, [r4, #0]
 800200e:	f023 0320 	bic.w	r3, r3, #32
 8002012:	6023      	str	r3, [r4, #0]
 8002014:	e7f6      	b.n	8002004 <_printf_i+0x194>
 8002016:	4616      	mov	r6, r2
 8002018:	e7bd      	b.n	8001f96 <_printf_i+0x126>
 800201a:	6833      	ldr	r3, [r6, #0]
 800201c:	6825      	ldr	r5, [r4, #0]
 800201e:	1d18      	adds	r0, r3, #4
 8002020:	6961      	ldr	r1, [r4, #20]
 8002022:	6030      	str	r0, [r6, #0]
 8002024:	062e      	lsls	r6, r5, #24
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	d501      	bpl.n	800202e <_printf_i+0x1be>
 800202a:	6019      	str	r1, [r3, #0]
 800202c:	e002      	b.n	8002034 <_printf_i+0x1c4>
 800202e:	0668      	lsls	r0, r5, #25
 8002030:	d5fb      	bpl.n	800202a <_printf_i+0x1ba>
 8002032:	8019      	strh	r1, [r3, #0]
 8002034:	2300      	movs	r3, #0
 8002036:	4616      	mov	r6, r2
 8002038:	6123      	str	r3, [r4, #16]
 800203a:	e7bc      	b.n	8001fb6 <_printf_i+0x146>
 800203c:	6833      	ldr	r3, [r6, #0]
 800203e:	2100      	movs	r1, #0
 8002040:	1d1a      	adds	r2, r3, #4
 8002042:	6032      	str	r2, [r6, #0]
 8002044:	681e      	ldr	r6, [r3, #0]
 8002046:	6862      	ldr	r2, [r4, #4]
 8002048:	4630      	mov	r0, r6
 800204a:	f000 f859 	bl	8002100 <memchr>
 800204e:	b108      	cbz	r0, 8002054 <_printf_i+0x1e4>
 8002050:	1b80      	subs	r0, r0, r6
 8002052:	6060      	str	r0, [r4, #4]
 8002054:	6863      	ldr	r3, [r4, #4]
 8002056:	6123      	str	r3, [r4, #16]
 8002058:	2300      	movs	r3, #0
 800205a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800205e:	e7aa      	b.n	8001fb6 <_printf_i+0x146>
 8002060:	4632      	mov	r2, r6
 8002062:	4649      	mov	r1, r9
 8002064:	4640      	mov	r0, r8
 8002066:	6923      	ldr	r3, [r4, #16]
 8002068:	47d0      	blx	sl
 800206a:	3001      	adds	r0, #1
 800206c:	d0ad      	beq.n	8001fca <_printf_i+0x15a>
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	079b      	lsls	r3, r3, #30
 8002072:	d413      	bmi.n	800209c <_printf_i+0x22c>
 8002074:	68e0      	ldr	r0, [r4, #12]
 8002076:	9b03      	ldr	r3, [sp, #12]
 8002078:	4298      	cmp	r0, r3
 800207a:	bfb8      	it	lt
 800207c:	4618      	movlt	r0, r3
 800207e:	e7a6      	b.n	8001fce <_printf_i+0x15e>
 8002080:	2301      	movs	r3, #1
 8002082:	4632      	mov	r2, r6
 8002084:	4649      	mov	r1, r9
 8002086:	4640      	mov	r0, r8
 8002088:	47d0      	blx	sl
 800208a:	3001      	adds	r0, #1
 800208c:	d09d      	beq.n	8001fca <_printf_i+0x15a>
 800208e:	3501      	adds	r5, #1
 8002090:	68e3      	ldr	r3, [r4, #12]
 8002092:	9903      	ldr	r1, [sp, #12]
 8002094:	1a5b      	subs	r3, r3, r1
 8002096:	42ab      	cmp	r3, r5
 8002098:	dcf2      	bgt.n	8002080 <_printf_i+0x210>
 800209a:	e7eb      	b.n	8002074 <_printf_i+0x204>
 800209c:	2500      	movs	r5, #0
 800209e:	f104 0619 	add.w	r6, r4, #25
 80020a2:	e7f5      	b.n	8002090 <_printf_i+0x220>
 80020a4:	08002533 	.word	0x08002533
 80020a8:	08002544 	.word	0x08002544

080020ac <memmove>:
 80020ac:	4288      	cmp	r0, r1
 80020ae:	b510      	push	{r4, lr}
 80020b0:	eb01 0402 	add.w	r4, r1, r2
 80020b4:	d902      	bls.n	80020bc <memmove+0x10>
 80020b6:	4284      	cmp	r4, r0
 80020b8:	4623      	mov	r3, r4
 80020ba:	d807      	bhi.n	80020cc <memmove+0x20>
 80020bc:	1e43      	subs	r3, r0, #1
 80020be:	42a1      	cmp	r1, r4
 80020c0:	d008      	beq.n	80020d4 <memmove+0x28>
 80020c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80020c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80020ca:	e7f8      	b.n	80020be <memmove+0x12>
 80020cc:	4601      	mov	r1, r0
 80020ce:	4402      	add	r2, r0
 80020d0:	428a      	cmp	r2, r1
 80020d2:	d100      	bne.n	80020d6 <memmove+0x2a>
 80020d4:	bd10      	pop	{r4, pc}
 80020d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80020da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80020de:	e7f7      	b.n	80020d0 <memmove+0x24>

080020e0 <_sbrk_r>:
 80020e0:	b538      	push	{r3, r4, r5, lr}
 80020e2:	2300      	movs	r3, #0
 80020e4:	4d05      	ldr	r5, [pc, #20]	@ (80020fc <_sbrk_r+0x1c>)
 80020e6:	4604      	mov	r4, r0
 80020e8:	4608      	mov	r0, r1
 80020ea:	602b      	str	r3, [r5, #0]
 80020ec:	f7ff faa4 	bl	8001638 <_sbrk>
 80020f0:	1c43      	adds	r3, r0, #1
 80020f2:	d102      	bne.n	80020fa <_sbrk_r+0x1a>
 80020f4:	682b      	ldr	r3, [r5, #0]
 80020f6:	b103      	cbz	r3, 80020fa <_sbrk_r+0x1a>
 80020f8:	6023      	str	r3, [r4, #0]
 80020fa:	bd38      	pop	{r3, r4, r5, pc}
 80020fc:	200001b8 	.word	0x200001b8

08002100 <memchr>:
 8002100:	4603      	mov	r3, r0
 8002102:	b510      	push	{r4, lr}
 8002104:	b2c9      	uxtb	r1, r1
 8002106:	4402      	add	r2, r0
 8002108:	4293      	cmp	r3, r2
 800210a:	4618      	mov	r0, r3
 800210c:	d101      	bne.n	8002112 <memchr+0x12>
 800210e:	2000      	movs	r0, #0
 8002110:	e003      	b.n	800211a <memchr+0x1a>
 8002112:	7804      	ldrb	r4, [r0, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	428c      	cmp	r4, r1
 8002118:	d1f6      	bne.n	8002108 <memchr+0x8>
 800211a:	bd10      	pop	{r4, pc}

0800211c <memcpy>:
 800211c:	440a      	add	r2, r1
 800211e:	4291      	cmp	r1, r2
 8002120:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002124:	d100      	bne.n	8002128 <memcpy+0xc>
 8002126:	4770      	bx	lr
 8002128:	b510      	push	{r4, lr}
 800212a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800212e:	4291      	cmp	r1, r2
 8002130:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002134:	d1f9      	bne.n	800212a <memcpy+0xe>
 8002136:	bd10      	pop	{r4, pc}

08002138 <_realloc_r>:
 8002138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800213c:	4607      	mov	r7, r0
 800213e:	4614      	mov	r4, r2
 8002140:	460d      	mov	r5, r1
 8002142:	b921      	cbnz	r1, 800214e <_realloc_r+0x16>
 8002144:	4611      	mov	r1, r2
 8002146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800214a:	f7ff bc3b 	b.w	80019c4 <_malloc_r>
 800214e:	b92a      	cbnz	r2, 800215c <_realloc_r+0x24>
 8002150:	f7ff fbce 	bl	80018f0 <_free_r>
 8002154:	4625      	mov	r5, r4
 8002156:	4628      	mov	r0, r5
 8002158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800215c:	f000 f81a 	bl	8002194 <_malloc_usable_size_r>
 8002160:	4284      	cmp	r4, r0
 8002162:	4606      	mov	r6, r0
 8002164:	d802      	bhi.n	800216c <_realloc_r+0x34>
 8002166:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800216a:	d8f4      	bhi.n	8002156 <_realloc_r+0x1e>
 800216c:	4621      	mov	r1, r4
 800216e:	4638      	mov	r0, r7
 8002170:	f7ff fc28 	bl	80019c4 <_malloc_r>
 8002174:	4680      	mov	r8, r0
 8002176:	b908      	cbnz	r0, 800217c <_realloc_r+0x44>
 8002178:	4645      	mov	r5, r8
 800217a:	e7ec      	b.n	8002156 <_realloc_r+0x1e>
 800217c:	42b4      	cmp	r4, r6
 800217e:	4622      	mov	r2, r4
 8002180:	4629      	mov	r1, r5
 8002182:	bf28      	it	cs
 8002184:	4632      	movcs	r2, r6
 8002186:	f7ff ffc9 	bl	800211c <memcpy>
 800218a:	4629      	mov	r1, r5
 800218c:	4638      	mov	r0, r7
 800218e:	f7ff fbaf 	bl	80018f0 <_free_r>
 8002192:	e7f1      	b.n	8002178 <_realloc_r+0x40>

08002194 <_malloc_usable_size_r>:
 8002194:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002198:	1f18      	subs	r0, r3, #4
 800219a:	2b00      	cmp	r3, #0
 800219c:	bfbc      	itt	lt
 800219e:	580b      	ldrlt	r3, [r1, r0]
 80021a0:	18c0      	addlt	r0, r0, r3
 80021a2:	4770      	bx	lr

080021a4 <_init>:
 80021a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021a6:	bf00      	nop
 80021a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021aa:	bc08      	pop	{r3}
 80021ac:	469e      	mov	lr, r3
 80021ae:	4770      	bx	lr

080021b0 <_fini>:
 80021b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021b2:	bf00      	nop
 80021b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b6:	bc08      	pop	{r3}
 80021b8:	469e      	mov	lr, r3
 80021ba:	4770      	bx	lr
