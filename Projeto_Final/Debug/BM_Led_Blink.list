
BM_Led_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001778  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  080018a8  080018a8  000028a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c3c  08001c3c  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001c3c  08001c3c  00003050  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001c3c  08001c3c  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c3c  08001c3c  00002c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c40  08001c40  00002c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08001c44  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000050  08001c94  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001c94  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b47  00000000  00000000  00003079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009fc  00000000  00000000  00004bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  000055c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000186  00000000  00000000  000057f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011680  00000000  00000000  0000597e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000032a7  00000000  00000000  00016ffe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058ac1  00000000  00000000  0001a2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00072d66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bcc  00000000  00000000  00072dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00073978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000050 	.word	0x20000050
 800014c:	00000000 	.word	0x00000000
 8000150:	08001890 	.word	0x08001890

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000054 	.word	0x20000054
 800016c:	08001890 	.word	0x08001890

08000170 <ADC_LDR_Init>:
#include "adc_ldr.h"
#include "stm32f1xx.h"

void ADC_LDR_Init(void) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000176:	4b1a      	ldr	r3, [pc, #104]	@ (80001e0 <ADC_LDR_Init+0x70>)
 8000178:	699b      	ldr	r3, [r3, #24]
 800017a:	4a19      	ldr	r2, [pc, #100]	@ (80001e0 <ADC_LDR_Init+0x70>)
 800017c:	f043 0304 	orr.w	r3, r3, #4
 8000180:	6193      	str	r3, [r2, #24]

    // Configure PA0 as analog input
    GPIOA->CRL &= ~GPIO_CRL_CNF0;
 8000182:	4b18      	ldr	r3, [pc, #96]	@ (80001e4 <ADC_LDR_Init+0x74>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4a17      	ldr	r2, [pc, #92]	@ (80001e4 <ADC_LDR_Init+0x74>)
 8000188:	f023 030c 	bic.w	r3, r3, #12
 800018c:	6013      	str	r3, [r2, #0]
    GPIOA->CRL &= ~GPIO_CRL_MODE0;
 800018e:	4b15      	ldr	r3, [pc, #84]	@ (80001e4 <ADC_LDR_Init+0x74>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	4a14      	ldr	r2, [pc, #80]	@ (80001e4 <ADC_LDR_Init+0x74>)
 8000194:	f023 0303 	bic.w	r3, r3, #3
 8000198:	6013      	str	r3, [r2, #0]

    // Enable ADC1 clock
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800019a:	4b11      	ldr	r3, [pc, #68]	@ (80001e0 <ADC_LDR_Init+0x70>)
 800019c:	699b      	ldr	r3, [r3, #24]
 800019e:	4a10      	ldr	r2, [pc, #64]	@ (80001e0 <ADC_LDR_Init+0x70>)
 80001a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80001a4:	6193      	str	r3, [r2, #24]

    // Set software trigger
    ADC1->CR2 |= (7UL << ADC_CR2_EXTSEL_Pos);
 80001a6:	4b10      	ldr	r3, [pc, #64]	@ (80001e8 <ADC_LDR_Init+0x78>)
 80001a8:	689b      	ldr	r3, [r3, #8]
 80001aa:	4a0f      	ldr	r2, [pc, #60]	@ (80001e8 <ADC_LDR_Init+0x78>)
 80001ac:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 80001b0:	6093      	str	r3, [r2, #8]

    // Power up the ADC
    ADC1->CR2 |= ADC_CR2_ADON;
 80001b2:	4b0d      	ldr	r3, [pc, #52]	@ (80001e8 <ADC_LDR_Init+0x78>)
 80001b4:	689b      	ldr	r3, [r3, #8]
 80001b6:	4a0c      	ldr	r2, [pc, #48]	@ (80001e8 <ADC_LDR_Init+0x78>)
 80001b8:	f043 0301 	orr.w	r3, r3, #1
 80001bc:	6093      	str	r3, [r2, #8]

    // Short delay to stabilize
    for (volatile int i = 0; i < 10000; i++);
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	e002      	b.n	80001ca <ADC_LDR_Init+0x5a>
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	3301      	adds	r3, #1
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80001d0:	4293      	cmp	r3, r2
 80001d2:	ddf7      	ble.n	80001c4 <ADC_LDR_Init+0x54>
}
 80001d4:	bf00      	nop
 80001d6:	bf00      	nop
 80001d8:	370c      	adds	r7, #12
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	40021000 	.word	0x40021000
 80001e4:	40010800 	.word	0x40010800
 80001e8:	40012400 	.word	0x40012400

080001ec <ADC_LDR_Read>:

uint16_t ADC_LDR_Read(void) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
    // Relaunch the ADC
    ADC1->CR2 |= ADC_CR2_ADON;
 80001f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000224 <ADC_LDR_Read+0x38>)
 80001f2:	689b      	ldr	r3, [r3, #8]
 80001f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000224 <ADC_LDR_Read+0x38>)
 80001f6:	f043 0301 	orr.w	r3, r3, #1
 80001fa:	6093      	str	r3, [r2, #8]
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80001fc:	4b09      	ldr	r3, [pc, #36]	@ (8000224 <ADC_LDR_Read+0x38>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	4a08      	ldr	r2, [pc, #32]	@ (8000224 <ADC_LDR_Read+0x38>)
 8000202:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000206:	6093      	str	r3, [r2, #8]

    // Wait for conversion to complete
    while (!(ADC1->SR & ADC_SR_EOC));
 8000208:	bf00      	nop
 800020a:	4b06      	ldr	r3, [pc, #24]	@ (8000224 <ADC_LDR_Read+0x38>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f003 0302 	and.w	r3, r3, #2
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0f9      	beq.n	800020a <ADC_LDR_Read+0x1e>

    return ADC1->DR;
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <ADC_LDR_Read+0x38>)
 8000218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800021a:	b29b      	uxth	r3, r3
}
 800021c:	4618      	mov	r0, r3
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	40012400 	.word	0x40012400

08000228 <AHT20_Init>:
#include <stdint.h>
#include <stdbool.h>
#include "delay.h"
#include "aht20.h"

void AHT20_Init(void) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
    uint8_t cmd[3];

    print_uart("Passo 1: I2C_Init finalizado\r\n");
 800022e:	4819      	ldr	r0, [pc, #100]	@ (8000294 <AHT20_Init+0x6c>)
 8000230:	f000 fe18 	bl	8000e64 <print_uart>
    I2C_Init();                  // j√° foi feito antes no main, pode pular
 8000234:	f000 f912 	bl	800045c <I2C_Init>

    print_uart("Passo 2: Enviando soft reset...\r\n");
 8000238:	4817      	ldr	r0, [pc, #92]	@ (8000298 <AHT20_Init+0x70>)
 800023a:	f000 fe13 	bl	8000e64 <print_uart>
    cmd[0] = AHT20CMD_SOFTRESET;
 800023e:	23ba      	movs	r3, #186	@ 0xba
 8000240:	713b      	strb	r3, [r7, #4]
    I2C_Write(AHT20_I2C_ADDRESS, cmd, 1);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2201      	movs	r2, #1
 8000246:	4619      	mov	r1, r3
 8000248:	2038      	movs	r0, #56	@ 0x38
 800024a:	f000 f9a5 	bl	8000598 <I2C_Write>
    delay_ms(20);
 800024e:	2014      	movs	r0, #20
 8000250:	f000 f8f0 	bl	8000434 <delay_ms>
    print_uart("Passo 3: Soft reset enviado\r\n");
 8000254:	4811      	ldr	r0, [pc, #68]	@ (800029c <AHT20_Init+0x74>)
 8000256:	f000 fe05 	bl	8000e64 <print_uart>

    print_uart("Passo 4: Enviando init command...\r\n");
 800025a:	4811      	ldr	r0, [pc, #68]	@ (80002a0 <AHT20_Init+0x78>)
 800025c:	f000 fe02 	bl	8000e64 <print_uart>
    cmd[0] = 0xBE; cmd[1] = 0x08; cmd[2] = 0x00;
 8000260:	23be      	movs	r3, #190	@ 0xbe
 8000262:	713b      	strb	r3, [r7, #4]
 8000264:	2308      	movs	r3, #8
 8000266:	717b      	strb	r3, [r7, #5]
 8000268:	2300      	movs	r3, #0
 800026a:	71bb      	strb	r3, [r7, #6]
    I2C_Write(AHT20_I2C_ADDRESS, cmd, 3);
 800026c:	1d3b      	adds	r3, r7, #4
 800026e:	2203      	movs	r2, #3
 8000270:	4619      	mov	r1, r3
 8000272:	2038      	movs	r0, #56	@ 0x38
 8000274:	f000 f990 	bl	8000598 <I2C_Write>
    delay_ms(10);
 8000278:	200a      	movs	r0, #10
 800027a:	f000 f8db 	bl	8000434 <delay_ms>
    print_uart("Passo 5: Init command enviado\r\n");
 800027e:	4809      	ldr	r0, [pc, #36]	@ (80002a4 <AHT20_Init+0x7c>)
 8000280:	f000 fdf0 	bl	8000e64 <print_uart>

    print_uart("Passo 6: Init completo\r\n");
 8000284:	4808      	ldr	r0, [pc, #32]	@ (80002a8 <AHT20_Init+0x80>)
 8000286:	f000 fded 	bl	8000e64 <print_uart>
}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	080018a8 	.word	0x080018a8
 8000298:	080018c8 	.word	0x080018c8
 800029c:	080018ec 	.word	0x080018ec
 80002a0:	0800190c 	.word	0x0800190c
 80002a4:	08001930 	.word	0x08001930
 80002a8:	08001950 	.word	0x08001950

080002ac <AHT20_ReadTemperatureHumidity>:




void AHT20_ReadTemperatureHumidity(uint32_t* temperature, uint32_t* humidity) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
    uint8_t cmd[3] = { AHT20CMD_TRIGGER, 0x33, 0x00 };
 80002b6:	4a28      	ldr	r2, [pc, #160]	@ (8000358 <AHT20_ReadTemperatureHumidity+0xac>)
 80002b8:	f107 0314 	add.w	r3, r7, #20
 80002bc:	6812      	ldr	r2, [r2, #0]
 80002be:	4611      	mov	r1, r2
 80002c0:	8019      	strh	r1, [r3, #0]
 80002c2:	3302      	adds	r3, #2
 80002c4:	0c12      	lsrs	r2, r2, #16
 80002c6:	701a      	strb	r2, [r3, #0]
    uint8_t data[6];

    print_uart("Iniciando medi√ß√£o...\r\n");
 80002c8:	4824      	ldr	r0, [pc, #144]	@ (800035c <AHT20_ReadTemperatureHumidity+0xb0>)
 80002ca:	f000 fdcb 	bl	8000e64 <print_uart>
    I2C_Write(AHT20_I2C_ADDRESS, cmd, 3);
 80002ce:	f107 0314 	add.w	r3, r7, #20
 80002d2:	2203      	movs	r2, #3
 80002d4:	4619      	mov	r1, r3
 80002d6:	2038      	movs	r0, #56	@ 0x38
 80002d8:	f000 f95e 	bl	8000598 <I2C_Write>
    delay_ms(80);  // Espera m√≠nima sugerida
 80002dc:	2050      	movs	r0, #80	@ 0x50
 80002de:	f000 f8a9 	bl	8000434 <delay_ms>

    // Verificar se o sensor est√° pronto (bit 7 == 0)
    do {
        I2C_Read(AHT20_I2C_ADDRESS, data, 1);
 80002e2:	f107 030c 	add.w	r3, r7, #12
 80002e6:	2201      	movs	r2, #1
 80002e8:	4619      	mov	r1, r3
 80002ea:	2038      	movs	r0, #56	@ 0x38
 80002ec:	f000 f9c0 	bl	8000670 <I2C_Read>
    } while (data[0] & 0x80);  // Espera o bit de busy (bit 7) ficar zero
 80002f0:	7b3b      	ldrb	r3, [r7, #12]
 80002f2:	b25b      	sxtb	r3, r3
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	dbf4      	blt.n	80002e2 <AHT20_ReadTemperatureHumidity+0x36>

    I2C_Read(AHT20_I2C_ADDRESS, data, 6);  // Agora l√™ os 6 bytes
 80002f8:	f107 030c 	add.w	r3, r7, #12
 80002fc:	2206      	movs	r2, #6
 80002fe:	4619      	mov	r1, r3
 8000300:	2038      	movs	r0, #56	@ 0x38
 8000302:	f000 f9b5 	bl	8000670 <I2C_Read>

    uint32_t rawHumidity = ((uint32_t)data[1] << 16 | (uint32_t)data[2] << 8 | data[3]) >> 4;
 8000306:	7b7b      	ldrb	r3, [r7, #13]
 8000308:	041a      	lsls	r2, r3, #16
 800030a:	7bbb      	ldrb	r3, [r7, #14]
 800030c:	021b      	lsls	r3, r3, #8
 800030e:	4313      	orrs	r3, r2
 8000310:	7bfa      	ldrb	r2, [r7, #15]
 8000312:	4313      	orrs	r3, r2
 8000314:	091b      	lsrs	r3, r3, #4
 8000316:	61fb      	str	r3, [r7, #28]
    uint32_t rawTemp = (((uint32_t)(data[3] & 0x0F)) << 16) | ((uint32_t)data[4] << 8) | data[5];
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	041b      	lsls	r3, r3, #16
 800031c:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8000320:	7c3b      	ldrb	r3, [r7, #16]
 8000322:	021b      	lsls	r3, r3, #8
 8000324:	4313      	orrs	r3, r2
 8000326:	7c7a      	ldrb	r2, [r7, #17]
 8000328:	4313      	orrs	r3, r2
 800032a:	61bb      	str	r3, [r7, #24]

    uart_print_int("RAW_HUM", rawHumidity);
 800032c:	69f9      	ldr	r1, [r7, #28]
 800032e:	480c      	ldr	r0, [pc, #48]	@ (8000360 <AHT20_ReadTemperatureHumidity+0xb4>)
 8000330:	f000 fdc4 	bl	8000ebc <uart_print_int>
    uart_print_int("RAW_TEMP", rawTemp);
 8000334:	69b9      	ldr	r1, [r7, #24]
 8000336:	480b      	ldr	r0, [pc, #44]	@ (8000364 <AHT20_ReadTemperatureHumidity+0xb8>)
 8000338:	f000 fdc0 	bl	8000ebc <uart_print_int>

    *humidity = rawHumidity;
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	69fa      	ldr	r2, [r7, #28]
 8000340:	601a      	str	r2, [r3, #0]
    *temperature = rawTemp;
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	69ba      	ldr	r2, [r7, #24]
 8000346:	601a      	str	r2, [r3, #0]

    print_uart("Medi√ß√£o finalizada\r\n");
 8000348:	4807      	ldr	r0, [pc, #28]	@ (8000368 <AHT20_ReadTemperatureHumidity+0xbc>)
 800034a:	f000 fd8b 	bl	8000e64 <print_uart>
}
 800034e:	bf00      	nop
 8000350:	3720      	adds	r7, #32
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	080019b4 	.word	0x080019b4
 800035c:	0800196c 	.word	0x0800196c
 8000360:	08001988 	.word	0x08001988
 8000364:	08001990 	.word	0x08001990
 8000368:	0800199c 	.word	0x0800199c

0800036c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037a:	2b00      	cmp	r3, #0
 800037c:	db0b      	blt.n	8000396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	f003 021f 	and.w	r2, r3, #31
 8000384:	4906      	ldr	r1, [pc, #24]	@ (80003a0 <__NVIC_EnableIRQ+0x34>)
 8000386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800038a:	095b      	lsrs	r3, r3, #5
 800038c:	2001      	movs	r0, #1
 800038e:	fa00 f202 	lsl.w	r2, r0, r2
 8000392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	e000e100 	.word	0xe000e100

080003a4 <delay_init>:
#include "stm32f1xx.h"

volatile uint32_t delay_counter = 0;

void delay_init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;  // Habilita clock para TIM2
 80003a8:	4b11      	ldr	r3, [pc, #68]	@ (80003f0 <delay_init+0x4c>)
 80003aa:	69db      	ldr	r3, [r3, #28]
 80003ac:	4a10      	ldr	r2, [pc, #64]	@ (80003f0 <delay_init+0x4c>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	61d3      	str	r3, [r2, #28]

    TIM2->PSC = 7200 - 1;     // Prescaler: 72 MHz / 7200 = 10‚ÄØkHz
 80003b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003b8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80003bc:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 10 - 1;       // 10‚ÄØkHz / 10 = 1‚ÄØkHz ‚Üí 1‚ÄØms por interrup√ß√£o
 80003be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003c2:	2209      	movs	r2, #9
 80003c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    TIM2->DIER |= TIM_DIER_UIE;    // Habilita interrup√ß√£o de atualiza√ß√£o
 80003c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_CEN;      // Ativa o timer
 80003d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn);     // Habilita interrup√ß√£o global
 80003e6:	201c      	movs	r0, #28
 80003e8:	f7ff ffc0 	bl	800036c <__NVIC_EnableIRQ>
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40021000 	.word	0x40021000

080003f4 <TIM2_IRQHandler>:
// Handler da interrup√ß√£o do TIM2
void TIM2_IRQHandler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF)
 80003f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fc:	691b      	ldr	r3, [r3, #16]
 80003fe:	f003 0301 	and.w	r3, r3, #1
 8000402:	2b00      	cmp	r3, #0
 8000404:	d010      	beq.n	8000428 <TIM2_IRQHandler+0x34>
    {
        TIM2->SR &= ~TIM_SR_UIF; // Limpa flag de interrup√ß√£o
 8000406:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000410:	f023 0301 	bic.w	r3, r3, #1
 8000414:	6113      	str	r3, [r2, #16]

        if (delay_counter > 0)
 8000416:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <TIM2_IRQHandler+0x3c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2b00      	cmp	r3, #0
 800041c:	d004      	beq.n	8000428 <TIM2_IRQHandler+0x34>
            delay_counter--;
 800041e:	4b04      	ldr	r3, [pc, #16]	@ (8000430 <TIM2_IRQHandler+0x3c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	3b01      	subs	r3, #1
 8000424:	4a02      	ldr	r2, [pc, #8]	@ (8000430 <TIM2_IRQHandler+0x3c>)
 8000426:	6013      	str	r3, [r2, #0]
    }
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr
 8000430:	2000006c 	.word	0x2000006c

08000434 <delay_ms>:
void delay_ms(uint32_t ms)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
    delay_counter = ms;
 800043c:	4a06      	ldr	r2, [pc, #24]	@ (8000458 <delay_ms+0x24>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6013      	str	r3, [r2, #0]
    while (delay_counter > 0); // Espera at√© o contador zerar
 8000442:	bf00      	nop
 8000444:	4b04      	ldr	r3, [pc, #16]	@ (8000458 <delay_ms+0x24>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d1fb      	bne.n	8000444 <delay_ms+0x10>
}
 800044c:	bf00      	nop
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	2000006c 	.word	0x2000006c

0800045c <I2C_Init>:
#include "i2c.h"

#define debugON


void I2C_Init(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000460:	4b1b      	ldr	r3, [pc, #108]	@ (80004d0 <I2C_Init+0x74>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a1a      	ldr	r2, [pc, #104]	@ (80004d0 <I2C_Init+0x74>)
 8000466:	f043 0308 	orr.w	r3, r3, #8
 800046a:	6193      	str	r3, [r2, #24]
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800046c:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <I2C_Init+0x74>)
 800046e:	69db      	ldr	r3, [r3, #28]
 8000470:	4a17      	ldr	r2, [pc, #92]	@ (80004d0 <I2C_Init+0x74>)
 8000472:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000476:	61d3      	str	r3, [r2, #28]

    GPIOB->CRL &= ~(GPIO_CRL_MODE6 | GPIO_CRL_CNF6 | GPIO_CRL_MODE7 | GPIO_CRL_CNF7);
 8000478:	4b16      	ldr	r3, [pc, #88]	@ (80004d4 <I2C_Init+0x78>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a15      	ldr	r2, [pc, #84]	@ (80004d4 <I2C_Init+0x78>)
 800047e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000482:	6013      	str	r3, [r2, #0]
    GPIOB->CRL |= (GPIO_CRL_MODE6_1 | GPIO_CRL_CNF6 | GPIO_CRL_MODE7_1 | GPIO_CRL_CNF7);
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <I2C_Init+0x78>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a12      	ldr	r2, [pc, #72]	@ (80004d4 <I2C_Init+0x78>)
 800048a:	f043 436e 	orr.w	r3, r3, #3992977408	@ 0xee000000
 800048e:	6013      	str	r3, [r2, #0]

    I2C1->CR1 |= I2C_CR1_SWRST;
 8000490:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <I2C_Init+0x7c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a10      	ldr	r2, [pc, #64]	@ (80004d8 <I2C_Init+0x7c>)
 8000496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800049a:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~I2C_CR1_SWRST;
 800049c:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <I2C_Init+0x7c>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a0d      	ldr	r2, [pc, #52]	@ (80004d8 <I2C_Init+0x7c>)
 80004a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80004a6:	6013      	str	r3, [r2, #0]

    I2C1->CR2 = 8;
 80004a8:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <I2C_Init+0x7c>)
 80004aa:	2208      	movs	r2, #8
 80004ac:	605a      	str	r2, [r3, #4]
    I2C1->CCR = 40;
 80004ae:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <I2C_Init+0x7c>)
 80004b0:	2228      	movs	r2, #40	@ 0x28
 80004b2:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 9;
 80004b4:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <I2C_Init+0x7c>)
 80004b6:	2209      	movs	r2, #9
 80004b8:	621a      	str	r2, [r3, #32]
    I2C1->CR1 |= I2C_CR1_PE;
 80004ba:	4b07      	ldr	r3, [pc, #28]	@ (80004d8 <I2C_Init+0x7c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a06      	ldr	r2, [pc, #24]	@ (80004d8 <I2C_Init+0x7c>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6013      	str	r3, [r2, #0]

#ifdef debugON
    print_uart("I2C_Init OK\r\n");
 80004c6:	4805      	ldr	r0, [pc, #20]	@ (80004dc <I2C_Init+0x80>)
 80004c8:	f000 fccc 	bl	8000e64 <print_uart>
#endif
}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010c00 	.word	0x40010c00
 80004d8:	40005400 	.word	0x40005400
 80004dc:	080019b8 	.word	0x080019b8

080004e0 <I2C_Start>:

int I2C_Start(void) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 80004e6:	4b12      	ldr	r3, [pc, #72]	@ (8000530 <I2C_Start+0x50>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a11      	ldr	r2, [pc, #68]	@ (8000530 <I2C_Start+0x50>)
 80004ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004f0:	6013      	str	r3, [r2, #0]
    for (uint32_t t = 10000; t; t--) {
 80004f2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	e00d      	b.n	8000516 <I2C_Start+0x36>
        if (I2C1->SR1 & I2C_SR1_SB) {
 80004fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000530 <I2C_Start+0x50>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f003 0301 	and.w	r3, r3, #1
 8000502:	2b00      	cmp	r3, #0
 8000504:	d004      	beq.n	8000510 <I2C_Start+0x30>
#ifdef debugON
            print_uart("I2C_Start OK\r\n");
 8000506:	480b      	ldr	r0, [pc, #44]	@ (8000534 <I2C_Start+0x54>)
 8000508:	f000 fcac 	bl	8000e64 <print_uart>
#endif
            return 0;
 800050c:	2300      	movs	r3, #0
 800050e:	e00a      	b.n	8000526 <I2C_Start+0x46>
    for (uint32_t t = 10000; t; t--) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3b01      	subs	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1ee      	bne.n	80004fa <I2C_Start+0x1a>
        }
    }
#ifdef debugON
    print_uart("Erro: Timeout em I2C_Start\r\n");
 800051c:	4806      	ldr	r0, [pc, #24]	@ (8000538 <I2C_Start+0x58>)
 800051e:	f000 fca1 	bl	8000e64 <print_uart>
#endif
    return -1;
 8000522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000526:	4618      	mov	r0, r3
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40005400 	.word	0x40005400
 8000534:	080019c8 	.word	0x080019c8
 8000538:	080019d8 	.word	0x080019d8

0800053c <I2C_Stop>:

int I2C_Stop(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000542:	4b12      	ldr	r3, [pc, #72]	@ (800058c <I2C_Stop+0x50>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a11      	ldr	r2, [pc, #68]	@ (800058c <I2C_Stop+0x50>)
 8000548:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800054c:	6013      	str	r3, [r2, #0]
    for (uint32_t t = 10000; t; t--) {
 800054e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	e00d      	b.n	8000572 <I2C_Stop+0x36>
        if (!(I2C1->CR1 & I2C_CR1_STOP)) {
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <I2C_Stop+0x50>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800055e:	2b00      	cmp	r3, #0
 8000560:	d104      	bne.n	800056c <I2C_Stop+0x30>
#ifdef debugON
            print_uart("I2C_Stop OK\r\n");
 8000562:	480b      	ldr	r0, [pc, #44]	@ (8000590 <I2C_Stop+0x54>)
 8000564:	f000 fc7e 	bl	8000e64 <print_uart>
#endif
            return 0;
 8000568:	2300      	movs	r3, #0
 800056a:	e00a      	b.n	8000582 <I2C_Stop+0x46>
    for (uint32_t t = 10000; t; t--) {
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3b01      	subs	r3, #1
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d1ee      	bne.n	8000556 <I2C_Stop+0x1a>
        }
    }
#ifdef debugON
    print_uart("Erro: Timeout em I2C_Stop\r\n");
 8000578:	4806      	ldr	r0, [pc, #24]	@ (8000594 <I2C_Stop+0x58>)
 800057a:	f000 fc73 	bl	8000e64 <print_uart>
#endif
    return -1;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000582:	4618      	mov	r0, r3
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40005400 	.word	0x40005400
 8000590:	080019f8 	.word	0x080019f8
 8000594:	08001a08 	.word	0x08001a08

08000598 <I2C_Write>:

void I2C_Write(uint8_t addr, uint8_t *data, uint16_t size) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	6039      	str	r1, [r7, #0]
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	80bb      	strh	r3, [r7, #4]
    if (I2C_Start() != 0) return;
 80005a8:	f7ff ff9a 	bl	80004e0 <I2C_Start>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d152      	bne.n	8000658 <I2C_Write+0xc0>

    I2C1->DR = I2C_WRITE_ADDR(addr);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	4a2a      	ldr	r2, [pc, #168]	@ (8000660 <I2C_Write+0xc8>)
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	6113      	str	r3, [r2, #16]
    print_uart("Esperando ACK do endere√ßo...\r\n");
 80005ba:	482a      	ldr	r0, [pc, #168]	@ (8000664 <I2C_Write+0xcc>)
 80005bc:	f000 fc52 	bl	8000e64 <print_uart>
    for (uint32_t t = 10000; t; t--) {
 80005c0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	e01a      	b.n	80005fe <I2C_Write+0x66>
        if (I2C1->SR1 & I2C_SR1_ADDR) break;
 80005c8:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <I2C_Write+0xc8>)
 80005ca:	695b      	ldr	r3, [r3, #20]
 80005cc:	f003 0302 	and.w	r3, r3, #2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d118      	bne.n	8000606 <I2C_Write+0x6e>
        if (I2C1->SR1 & I2C_SR1_AF) {
 80005d4:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <I2C_Write+0xc8>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00b      	beq.n	80005f8 <I2C_Write+0x60>
#ifdef debugON
            print_uart("Erro: Endere√ßo NACK em I2C_Write\r\n");
 80005e0:	4821      	ldr	r0, [pc, #132]	@ (8000668 <I2C_Write+0xd0>)
 80005e2:	f000 fc3f 	bl	8000e64 <print_uart>
#endif
            I2C1->SR1 &= ~I2C_SR1_AF;
 80005e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <I2C_Write+0xc8>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000660 <I2C_Write+0xc8>)
 80005ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80005f0:	6153      	str	r3, [r2, #20]
            I2C_Stop();
 80005f2:	f7ff ffa3 	bl	800053c <I2C_Stop>
            return;
 80005f6:	e030      	b.n	800065a <I2C_Write+0xc2>
    for (uint32_t t = 10000; t; t--) {
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	3b01      	subs	r3, #1
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1e1      	bne.n	80005c8 <I2C_Write+0x30>
 8000604:	e000      	b.n	8000608 <I2C_Write+0x70>
        if (I2C1->SR1 & I2C_SR1_ADDR) break;
 8000606:	bf00      	nop
        }
    }
    (void)I2C1->SR1;
 8000608:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <I2C_Write+0xc8>)
 800060a:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 800060c:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <I2C_Write+0xc8>)
 800060e:	699b      	ldr	r3, [r3, #24]

    while (size--) {
 8000610:	e017      	b.n	8000642 <I2C_Write+0xaa>
        I2C1->DR = *data++;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	1c5a      	adds	r2, r3, #1
 8000616:	603a      	str	r2, [r7, #0]
 8000618:	781a      	ldrb	r2, [r3, #0]
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <I2C_Write+0xc8>)
 800061c:	611a      	str	r2, [r3, #16]
        for (uint32_t t = 10000; t; t--) {
 800061e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	e008      	b.n	8000638 <I2C_Write+0xa0>
            if (I2C1->SR1 & I2C_SR1_BTF) break;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <I2C_Write+0xc8>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	2b00      	cmp	r3, #0
 8000630:	d106      	bne.n	8000640 <I2C_Write+0xa8>
        for (uint32_t t = 10000; t; t--) {
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	3b01      	subs	r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f3      	bne.n	8000626 <I2C_Write+0x8e>
 800063e:	e000      	b.n	8000642 <I2C_Write+0xaa>
            if (I2C1->SR1 & I2C_SR1_BTF) break;
 8000640:	bf00      	nop
    while (size--) {
 8000642:	88bb      	ldrh	r3, [r7, #4]
 8000644:	1e5a      	subs	r2, r3, #1
 8000646:	80ba      	strh	r2, [r7, #4]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d1e2      	bne.n	8000612 <I2C_Write+0x7a>
        }
    }

    I2C_Stop();
 800064c:	f7ff ff76 	bl	800053c <I2C_Stop>
#ifdef debugON
    print_uart("I2C_Write OK\r\n");
 8000650:	4806      	ldr	r0, [pc, #24]	@ (800066c <I2C_Write+0xd4>)
 8000652:	f000 fc07 	bl	8000e64 <print_uart>
 8000656:	e000      	b.n	800065a <I2C_Write+0xc2>
    if (I2C_Start() != 0) return;
 8000658:	bf00      	nop
#endif
}
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40005400 	.word	0x40005400
 8000664:	08001a24 	.word	0x08001a24
 8000668:	08001a44 	.word	0x08001a44
 800066c:	08001a68 	.word	0x08001a68

08000670 <I2C_Read>:

void I2C_Read(uint8_t addr, uint8_t *data, uint16_t size) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	6039      	str	r1, [r7, #0]
 800067a:	71fb      	strb	r3, [r7, #7]
 800067c:	4613      	mov	r3, r2
 800067e:	80bb      	strh	r3, [r7, #4]
    if (!size) return;
 8000680:	88bb      	ldrh	r3, [r7, #4]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d072      	beq.n	800076c <I2C_Read+0xfc>

    if (I2C_Start() != 0) return;
 8000686:	f7ff ff2b 	bl	80004e0 <I2C_Start>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d16f      	bne.n	8000770 <I2C_Read+0x100>
    I2C1->DR = I2C_READ_ADDR(addr);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	f043 0201 	orr.w	r2, r3, #1
 8000698:	4b37      	ldr	r3, [pc, #220]	@ (8000778 <I2C_Read+0x108>)
 800069a:	611a      	str	r2, [r3, #16]

    for (uint32_t t = 10000; t; t--) {
 800069c:	f242 7310 	movw	r3, #10000	@ 0x2710
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	e01a      	b.n	80006da <I2C_Read+0x6a>
        if (I2C1->SR1 & I2C_SR1_ADDR) break;
 80006a4:	4b34      	ldr	r3, [pc, #208]	@ (8000778 <I2C_Read+0x108>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	f003 0302 	and.w	r3, r3, #2
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d118      	bne.n	80006e2 <I2C_Read+0x72>
        if (I2C1->SR1 & I2C_SR1_AF) {
 80006b0:	4b31      	ldr	r3, [pc, #196]	@ (8000778 <I2C_Read+0x108>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d00b      	beq.n	80006d4 <I2C_Read+0x64>
#ifdef debugON
            print_uart("Erro: Endere√ßo NACK em I2C_Read\r\n");
 80006bc:	482f      	ldr	r0, [pc, #188]	@ (800077c <I2C_Read+0x10c>)
 80006be:	f000 fbd1 	bl	8000e64 <print_uart>
#endif
            I2C1->SR1 &= ~I2C_SR1_AF;
 80006c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000778 <I2C_Read+0x108>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000778 <I2C_Read+0x108>)
 80006c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80006cc:	6153      	str	r3, [r2, #20]
            I2C_Stop();
 80006ce:	f7ff ff35 	bl	800053c <I2C_Stop>
            return;
 80006d2:	e04e      	b.n	8000772 <I2C_Read+0x102>
    for (uint32_t t = 10000; t; t--) {
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d1e1      	bne.n	80006a4 <I2C_Read+0x34>
 80006e0:	e000      	b.n	80006e4 <I2C_Read+0x74>
        if (I2C1->SR1 & I2C_SR1_ADDR) break;
 80006e2:	bf00      	nop
        }
    }

    (void)I2C1->SR1;
 80006e4:	4b24      	ldr	r3, [pc, #144]	@ (8000778 <I2C_Read+0x108>)
 80006e6:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2;
 80006e8:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <I2C_Read+0x108>)
 80006ea:	699b      	ldr	r3, [r3, #24]

    if (size == 1) {
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d108      	bne.n	8000704 <I2C_Read+0x94>
        I2C1->CR1 &= ~I2C_CR1_ACK;
 80006f2:	4b21      	ldr	r3, [pc, #132]	@ (8000778 <I2C_Read+0x108>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a20      	ldr	r2, [pc, #128]	@ (8000778 <I2C_Read+0x108>)
 80006f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80006fc:	6013      	str	r3, [r2, #0]
        I2C_Stop();
 80006fe:	f7ff ff1d 	bl	800053c <I2C_Stop>
 8000702:	e02a      	b.n	800075a <I2C_Read+0xea>
    } else {
        I2C1->CR1 |= I2C_CR1_ACK;
 8000704:	4b1c      	ldr	r3, [pc, #112]	@ (8000778 <I2C_Read+0x108>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a1b      	ldr	r2, [pc, #108]	@ (8000778 <I2C_Read+0x108>)
 800070a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800070e:	6013      	str	r3, [r2, #0]
    }

    while (size--) {
 8000710:	e023      	b.n	800075a <I2C_Read+0xea>
        for (uint32_t t = 10000; t; t--) {
 8000712:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000716:	60bb      	str	r3, [r7, #8]
 8000718:	e008      	b.n	800072c <I2C_Read+0xbc>
            if (I2C1->SR1 & I2C_SR1_RXNE) break;
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <I2C_Read+0x108>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000722:	2b00      	cmp	r3, #0
 8000724:	d106      	bne.n	8000734 <I2C_Read+0xc4>
        for (uint32_t t = 10000; t; t--) {
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	3b01      	subs	r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f3      	bne.n	800071a <I2C_Read+0xaa>
 8000732:	e000      	b.n	8000736 <I2C_Read+0xc6>
            if (I2C1->SR1 & I2C_SR1_RXNE) break;
 8000734:	bf00      	nop
        }

        *data++ = I2C1->DR;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <I2C_Read+0x108>)
 8000738:	6919      	ldr	r1, [r3, #16]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	603a      	str	r2, [r7, #0]
 8000740:	b2ca      	uxtb	r2, r1
 8000742:	701a      	strb	r2, [r3, #0]

        if (size == 1) {
 8000744:	88bb      	ldrh	r3, [r7, #4]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d107      	bne.n	800075a <I2C_Read+0xea>
            I2C1->CR1 &= ~I2C_CR1_ACK;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <I2C_Read+0x108>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <I2C_Read+0x108>)
 8000750:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000754:	6013      	str	r3, [r2, #0]
            I2C_Stop();
 8000756:	f7ff fef1 	bl	800053c <I2C_Stop>
    while (size--) {
 800075a:	88bb      	ldrh	r3, [r7, #4]
 800075c:	1e5a      	subs	r2, r3, #1
 800075e:	80ba      	strh	r2, [r7, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1d6      	bne.n	8000712 <I2C_Read+0xa2>
        }
    }
#ifdef debugON
    print_uart("I2C_Read OK\r\n");
 8000764:	4806      	ldr	r0, [pc, #24]	@ (8000780 <I2C_Read+0x110>)
 8000766:	f000 fb7d 	bl	8000e64 <print_uart>
 800076a:	e002      	b.n	8000772 <I2C_Read+0x102>
    if (!size) return;
 800076c:	bf00      	nop
 800076e:	e000      	b.n	8000772 <I2C_Read+0x102>
    if (I2C_Start() != 0) return;
 8000770:	bf00      	nop
#endif
}
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40005400 	.word	0x40005400
 800077c:	08001a78 	.word	0x08001a78
 8000780:	08001a9c 	.word	0x08001a9c

08000784 <print_nrf_debug>:
uint32_t temp;
uint32_t hum;



void print_nrf_debug(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    uart_print_int("CONFIG", nRF24_ReadReg(CONFIG));
 8000788:	2000      	movs	r0, #0
 800078a:	f000 f953 	bl	8000a34 <nRF24_ReadReg>
 800078e:	4603      	mov	r3, r0
 8000790:	4619      	mov	r1, r3
 8000792:	4816      	ldr	r0, [pc, #88]	@ (80007ec <print_nrf_debug+0x68>)
 8000794:	f000 fb92 	bl	8000ebc <uart_print_int>
    uart_print_int("EN_AA", nRF24_ReadReg(EN_AA));
 8000798:	2001      	movs	r0, #1
 800079a:	f000 f94b 	bl	8000a34 <nRF24_ReadReg>
 800079e:	4603      	mov	r3, r0
 80007a0:	4619      	mov	r1, r3
 80007a2:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <print_nrf_debug+0x6c>)
 80007a4:	f000 fb8a 	bl	8000ebc <uart_print_int>
    uart_print_int("RF_CH", nRF24_ReadReg(RF_CH));
 80007a8:	2005      	movs	r0, #5
 80007aa:	f000 f943 	bl	8000a34 <nRF24_ReadReg>
 80007ae:	4603      	mov	r3, r0
 80007b0:	4619      	mov	r1, r3
 80007b2:	4810      	ldr	r0, [pc, #64]	@ (80007f4 <print_nrf_debug+0x70>)
 80007b4:	f000 fb82 	bl	8000ebc <uart_print_int>
    uart_print_int("RF_SETUP", nRF24_ReadReg(RF_SETUP));
 80007b8:	2006      	movs	r0, #6
 80007ba:	f000 f93b 	bl	8000a34 <nRF24_ReadReg>
 80007be:	4603      	mov	r3, r0
 80007c0:	4619      	mov	r1, r3
 80007c2:	480d      	ldr	r0, [pc, #52]	@ (80007f8 <print_nrf_debug+0x74>)
 80007c4:	f000 fb7a 	bl	8000ebc <uart_print_int>
    uart_print_int("STATUS", nRF24_ReadReg(STATUS));
 80007c8:	2007      	movs	r0, #7
 80007ca:	f000 f933 	bl	8000a34 <nRF24_ReadReg>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4619      	mov	r1, r3
 80007d2:	480a      	ldr	r0, [pc, #40]	@ (80007fc <print_nrf_debug+0x78>)
 80007d4:	f000 fb72 	bl	8000ebc <uart_print_int>
    uart_print_int("FIFO_STATUS", nRF24_ReadReg(FIFO_STATUS));
 80007d8:	2017      	movs	r0, #23
 80007da:	f000 f92b 	bl	8000a34 <nRF24_ReadReg>
 80007de:	4603      	mov	r3, r0
 80007e0:	4619      	mov	r1, r3
 80007e2:	4807      	ldr	r0, [pc, #28]	@ (8000800 <print_nrf_debug+0x7c>)
 80007e4:	f000 fb6a 	bl	8000ebc <uart_print_int>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	08001af4 	.word	0x08001af4
 80007f0:	08001afc 	.word	0x08001afc
 80007f4:	08001b04 	.word	0x08001b04
 80007f8:	08001b0c 	.word	0x08001b0c
 80007fc:	08001b18 	.word	0x08001b18
 8000800:	08001b20 	.word	0x08001b20

08000804 <main>:

int main(void) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0
    // Endere√ßo de 5 bytes do receptor (deve bater com RX_ADDR_P0 do receptor)
    uint8_t tx_address[5] = {0x01, 0xDD, 0xCC, 0xBB, 0xAA};
 800080a:	4a3c      	ldr	r2, [pc, #240]	@ (80008fc <main+0xf8>)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000814:	6018      	str	r0, [r3, #0]
 8000816:	3304      	adds	r3, #4
 8000818:	7019      	strb	r1, [r3, #0]
    uint8_t payload[32]; // 32 √© o m√°x. permitido no NRF24

    UART_Init();
 800081a:	f000 faef 	bl	8000dfc <UART_Init>
    delay_init();
 800081e:	f7ff fdc1 	bl	80003a4 <delay_init>
    SPI1_Init();
 8000822:	f000 fa7f 	bl	8000d24 <SPI1_Init>
    AHT20_Init();
 8000826:	f7ff fcff 	bl	8000228 <AHT20_Init>
    ADC_LDR_Init();
 800082a:	f7ff fca1 	bl	8000170 <ADC_LDR_Init>


    print_uart("Inicializando sensor e r√°dio...\r\n");
 800082e:	4834      	ldr	r0, [pc, #208]	@ (8000900 <main+0xfc>)
 8000830:	f000 fb18 	bl	8000e64 <print_uart>

    nRF24_Init();
 8000834:	f000 f958 	bl	8000ae8 <nRF24_Init>
    nRF24_TX_Mode(tx_address, 10); // Canal 10, com Auto-ACK
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	210a      	movs	r1, #10
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f974 	bl	8000b2c <nRF24_TX_Mode>

    print_uart("[NRF24 DEBUG INICIAL]\r\n");
 8000844:	482f      	ldr	r0, [pc, #188]	@ (8000904 <main+0x100>)
 8000846:	f000 fb0d 	bl	8000e64 <print_uart>
    print_nrf_debug();
 800084a:	f7ff ff9b 	bl	8000784 <print_nrf_debug>

    while (1) {
        AHT20_ReadTemperatureHumidity(&temp, &hum);
 800084e:	492e      	ldr	r1, [pc, #184]	@ (8000908 <main+0x104>)
 8000850:	482e      	ldr	r0, [pc, #184]	@ (800090c <main+0x108>)
 8000852:	f7ff fd2b 	bl	80002ac <AHT20_ReadTemperatureHumidity>
        ldr = ADC_LDR_Read();
 8000856:	f7ff fcc9 	bl	80001ec <ADC_LDR_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	4b2c      	ldr	r3, [pc, #176]	@ (8000910 <main+0x10c>)
 8000860:	801a      	strh	r2, [r3, #0]

        uart_print_int("RAW_HUM", hum);
 8000862:	4b29      	ldr	r3, [pc, #164]	@ (8000908 <main+0x104>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4619      	mov	r1, r3
 8000868:	482a      	ldr	r0, [pc, #168]	@ (8000914 <main+0x110>)
 800086a:	f000 fb27 	bl	8000ebc <uart_print_int>
        uart_print_int("RAW_TEMP", temp);
 800086e:	4b27      	ldr	r3, [pc, #156]	@ (800090c <main+0x108>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4619      	mov	r1, r3
 8000874:	4828      	ldr	r0, [pc, #160]	@ (8000918 <main+0x114>)
 8000876:	f000 fb21 	bl	8000ebc <uart_print_int>
        uart_print_int("LDR", ldr);
 800087a:	4b25      	ldr	r3, [pc, #148]	@ (8000910 <main+0x10c>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	4619      	mov	r1, r3
 8000880:	4826      	ldr	r0, [pc, #152]	@ (800091c <main+0x118>)
 8000882:	f000 fb1b 	bl	8000ebc <uart_print_int>

        // Monta payload com dados brutos
        memcpy(&payload[0],  &temp, 4);   // temp ocupa 4 bytes
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <main+0x108>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	603b      	str	r3, [r7, #0]
        memcpy(&payload[4],  &hum, 4);    // hum ocupa 4 bytes
 800088c:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <main+0x104>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	607b      	str	r3, [r7, #4]
        memcpy(&payload[8],  &ldr, 2);    // ldr ocupa 2 bytes
 8000892:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <main+0x10c>)
 8000894:	881b      	ldrh	r3, [r3, #0]
 8000896:	813b      	strh	r3, [r7, #8]

        // Envia por UART (debug)
        print_uart("[NRF24] Enviando dados brutos...\r\n");
 8000898:	4821      	ldr	r0, [pc, #132]	@ (8000920 <main+0x11c>)
 800089a:	f000 fae3 	bl	8000e64 <print_uart>

        // Envia por NRF24
        nRF24_WritePayload(payload, 10);  // apenas os 10 bytes √∫teis
 800089e:	463b      	mov	r3, r7
 80008a0:	210a      	movs	r1, #10
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 f96f 	bl	8000b86 <nRF24_WritePayload>
        delay_ms(2);
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff fdc3 	bl	8000434 <delay_ms>

        uint8_t status = nRF24_GetStatus();
 80008ae:	f000 fa20 	bl	8000cf2 <nRF24_GetStatus>
 80008b2:	4603      	mov	r3, r0
 80008b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status & MASK_TX_DS) {
 80008b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80008bc:	f003 0320 	and.w	r3, r3, #32
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d003      	beq.n	80008cc <main+0xc8>
            print_uart("[NRF24] Transmiss√£o OK\r\n");
 80008c4:	4817      	ldr	r0, [pc, #92]	@ (8000924 <main+0x120>)
 80008c6:	f000 facd 	bl	8000e64 <print_uart>
 80008ca:	e010      	b.n	80008ee <main+0xea>
        } else if (status & MASK_MAX_RT) {
 80008cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d007      	beq.n	80008e8 <main+0xe4>
            print_uart("[NRF24] Falha: MAX_RT\r\n");
 80008d8:	4813      	ldr	r0, [pc, #76]	@ (8000928 <main+0x124>)
 80008da:	f000 fac3 	bl	8000e64 <print_uart>
            nRF24_WriteReg(NRF24_CMD_FLUSH_TX, 0x00);
 80008de:	2100      	movs	r1, #0
 80008e0:	20e1      	movs	r0, #225	@ 0xe1
 80008e2:	f000 f8be 	bl	8000a62 <nRF24_WriteReg>
 80008e6:	e002      	b.n	80008ee <main+0xea>
        } else {
            print_uart("[NRF24] Status indefinido\r\n");
 80008e8:	4810      	ldr	r0, [pc, #64]	@ (800092c <main+0x128>)
 80008ea:	f000 fabb 	bl	8000e64 <print_uart>
        }

        nRF24_ClearIRQFlags();
 80008ee:	f000 fa11 	bl	8000d14 <nRF24_ClearIRQFlags>
        delay_ms(1000);
 80008f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008f6:	f7ff fd9d 	bl	8000434 <delay_ms>
    while (1) {
 80008fa:	e7a8      	b.n	800084e <main+0x4a>
 80008fc:	08001bf4 	.word	0x08001bf4
 8000900:	08001b2c 	.word	0x08001b2c
 8000904:	08001b50 	.word	0x08001b50
 8000908:	20000078 	.word	0x20000078
 800090c:	20000074 	.word	0x20000074
 8000910:	20000070 	.word	0x20000070
 8000914:	08001b68 	.word	0x08001b68
 8000918:	08001b70 	.word	0x08001b70
 800091c:	08001b7c 	.word	0x08001b7c
 8000920:	08001b80 	.word	0x08001b80
 8000924:	08001ba4 	.word	0x08001ba4
 8000928:	08001bc0 	.word	0x08001bc0
 800092c:	08001bd8 	.word	0x08001bd8

08000930 <nRF24_CE_H>:
#include "nrf24.h"

void nRF24_CE_H(void) { GPIOA->BSRR = GPIO_BSRR_BS3; }
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
 8000934:	4b03      	ldr	r3, [pc, #12]	@ (8000944 <nRF24_CE_H+0x14>)
 8000936:	2208      	movs	r2, #8
 8000938:	611a      	str	r2, [r3, #16]
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	40010800 	.word	0x40010800

08000948 <nRF24_CE_L>:
void nRF24_CE_L(void) { GPIOA->BSRR = GPIO_BSRR_BR3; }
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
 800094c:	4b03      	ldr	r3, [pc, #12]	@ (800095c <nRF24_CE_L+0x14>)
 800094e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40010800 	.word	0x40010800

08000960 <nRF24_CSN_H>:
void nRF24_CSN_H(void){ GPIOA->BSRR = GPIO_BSRR_BS4; }
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
 8000964:	4b03      	ldr	r3, [pc, #12]	@ (8000974 <nRF24_CSN_H+0x14>)
 8000966:	2210      	movs	r2, #16
 8000968:	611a      	str	r2, [r3, #16]
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40010800 	.word	0x40010800

08000978 <nRF24_CSN_L>:
void nRF24_CSN_L(void){ GPIOA->BSRR = GPIO_BSRR_BR4; }
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
 800097c:	4b03      	ldr	r3, [pc, #12]	@ (800098c <nRF24_CSN_L+0x14>)
 800097e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr
 800098c:	40010800 	.word	0x40010800

08000990 <nRF24_LL_RW>:

uint8_t nRF24_LL_RW(uint8_t data) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1->SR & SPI_SR_TXE));
 800099a:	bf00      	nop
 800099c:	4b0b      	ldr	r3, [pc, #44]	@ (80009cc <nRF24_LL_RW+0x3c>)
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f9      	beq.n	800099c <nRF24_LL_RW+0xc>
    *((__IO uint8_t *)&SPI1->DR) = data;
 80009a8:	4a09      	ldr	r2, [pc, #36]	@ (80009d0 <nRF24_LL_RW+0x40>)
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	7013      	strb	r3, [r2, #0]
    while (!(SPI1->SR & SPI_SR_RXNE));
 80009ae:	bf00      	nop
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <nRF24_LL_RW+0x3c>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d0f9      	beq.n	80009b0 <nRF24_LL_RW+0x20>
    return SPI1->DR;
 80009bc:	4b03      	ldr	r3, [pc, #12]	@ (80009cc <nRF24_LL_RW+0x3c>)
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	b2db      	uxtb	r3, r3
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40013000 	.word	0x40013000
 80009d0:	4001300c 	.word	0x4001300c

080009d4 <nRF24_HW_Init>:

void nRF24_HW_Init(void) {
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
    // Habilita o clock do GPIOA
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80009d8:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <nRF24_HW_Init+0x58>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a13      	ldr	r2, [pc, #76]	@ (8000a2c <nRF24_HW_Init+0x58>)
 80009de:	f043 0304 	orr.w	r3, r3, #4
 80009e2:	6193      	str	r3, [r2, #24]

    // Configura PA3 (CE) como sa√≠da push-pull
    GPIOA->CRL &= ~(GPIO_CRL_MODE3 | GPIO_CRL_CNF3);
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <nRF24_HW_Init+0x5c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a11      	ldr	r2, [pc, #68]	@ (8000a30 <nRF24_HW_Init+0x5c>)
 80009ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80009ee:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (GPIO_CRL_MODE3_1);  // Output 2 MHz, Push-Pull
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <nRF24_HW_Init+0x5c>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0e      	ldr	r2, [pc, #56]	@ (8000a30 <nRF24_HW_Init+0x5c>)
 80009f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009fa:	6013      	str	r3, [r2, #0]

    // Configura PA4 (CSN) como sa√≠da push-pull
    GPIOA->CRL &= ~(GPIO_CRL_MODE4 | GPIO_CRL_CNF4);
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <nRF24_HW_Init+0x5c>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0b      	ldr	r2, [pc, #44]	@ (8000a30 <nRF24_HW_Init+0x5c>)
 8000a02:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
 8000a06:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (GPIO_CRL_MODE4_1);  // Output 2 MHz, Push-Pull
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <nRF24_HW_Init+0x5c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <nRF24_HW_Init+0x5c>)
 8000a0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a12:	6013      	str	r3, [r2, #0]

    // Estado inicial: CE LOW, CSN HIGH
    GPIOA->BSRR = GPIO_BSRR_BR3; // CE = 0
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <nRF24_HW_Init+0x5c>)
 8000a16:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a1a:	611a      	str	r2, [r3, #16]
    GPIOA->BSRR = GPIO_BSRR_BS4; // CSN = 1
 8000a1c:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <nRF24_HW_Init+0x5c>)
 8000a1e:	2210      	movs	r2, #16
 8000a20:	611a      	str	r2, [r3, #16]
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40010800 	.word	0x40010800

08000a34 <nRF24_ReadReg>:

uint8_t nRF24_ReadReg(uint8_t reg) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
    nRF24_CSN_L();
 8000a3e:	f7ff ff9b 	bl	8000978 <nRF24_CSN_L>
    nRF24_LL_RW(NRF24_CMD_R_REGISTER | reg);
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ffa3 	bl	8000990 <nRF24_LL_RW>
    uint8_t result = nRF24_LL_RW(NRF24_CMD_NOP);
 8000a4a:	20ff      	movs	r0, #255	@ 0xff
 8000a4c:	f7ff ffa0 	bl	8000990 <nRF24_LL_RW>
 8000a50:	4603      	mov	r3, r0
 8000a52:	73fb      	strb	r3, [r7, #15]
    nRF24_CSN_H();
 8000a54:	f7ff ff84 	bl	8000960 <nRF24_CSN_H>
    return result;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <nRF24_WriteReg>:

void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	4603      	mov	r3, r0
 8000a6a:	460a      	mov	r2, r1
 8000a6c:	71fb      	strb	r3, [r7, #7]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	71bb      	strb	r3, [r7, #6]
    nRF24_CSN_L();
 8000a72:	f7ff ff81 	bl	8000978 <nRF24_CSN_L>
    nRF24_LL_RW(NRF24_CMD_W_REGISTER | reg);
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	f043 0320 	orr.w	r3, r3, #32
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff86 	bl	8000990 <nRF24_LL_RW>
    nRF24_LL_RW(value);
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff82 	bl	8000990 <nRF24_LL_RW>
    nRF24_CSN_H();
 8000a8c:	f7ff ff68 	bl	8000960 <nRF24_CSN_H>
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <nRF24_WriteBuf>:

void nRF24_WriteBuf(uint8_t reg, uint8_t *pBuf, uint8_t len) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	71bb      	strb	r3, [r7, #6]
    nRF24_CSN_L();
 8000aa8:	f7ff ff66 	bl	8000978 <nRF24_CSN_L>
    nRF24_LL_RW(NRF24_CMD_W_REGISTER | reg);
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f043 0320 	orr.w	r3, r3, #32
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff6b 	bl	8000990 <nRF24_LL_RW>
    for (uint8_t i = 0; i < len; i++)
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	e009      	b.n	8000ad4 <nRF24_WriteBuf+0x3c>
        nRF24_LL_RW(pBuf[i]);
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	683a      	ldr	r2, [r7, #0]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff61 	bl	8000990 <nRF24_LL_RW>
    for (uint8_t i = 0; i < len; i++)
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	7bfa      	ldrb	r2, [r7, #15]
 8000ad6:	79bb      	ldrb	r3, [r7, #6]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d3f1      	bcc.n	8000ac0 <nRF24_WriteBuf+0x28>
    nRF24_CSN_H();
 8000adc:	f7ff ff40 	bl	8000960 <nRF24_CSN_H>
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <nRF24_Init>:

void nRF24_Init(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
    nRF24_HW_Init();
 8000aec:	f7ff ff72 	bl	80009d4 <nRF24_HW_Init>
    nRF24_CE_L();
 8000af0:	f7ff ff2a 	bl	8000948 <nRF24_CE_L>
    nRF24_CSN_H();
 8000af4:	f7ff ff34 	bl	8000960 <nRF24_CSN_H>
    nRF24_WriteReg(CONFIG, 0x00); // PWR_UP, PRIM_TX, CRC
 8000af8:	2100      	movs	r1, #0
 8000afa:	2000      	movs	r0, #0
 8000afc:	f7ff ffb1 	bl	8000a62 <nRF24_WriteReg>
    nRF24_WriteReg(EN_AA, 0x00);  // Sem ACK
 8000b00:	2100      	movs	r1, #0
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff ffad 	bl	8000a62 <nRF24_WriteReg>
    nRF24_WriteReg(RF_CH, 10);    // Canal 10 (2.41GHz)
 8000b08:	210a      	movs	r1, #10
 8000b0a:	2005      	movs	r0, #5
 8000b0c:	f7ff ffa9 	bl	8000a62 <nRF24_WriteReg>
    nRF24_WriteReg(RF_SETUP, 0x0E); // 2Mbps, 0dBm
 8000b10:	210e      	movs	r1, #14
 8000b12:	2006      	movs	r0, #6
 8000b14:	f7ff ffa5 	bl	8000a62 <nRF24_WriteReg>
    nRF24_WriteReg(STATUS, 0x70); // Limpa IRQs
 8000b18:	2170      	movs	r1, #112	@ 0x70
 8000b1a:	2007      	movs	r0, #7
 8000b1c:	f7ff ffa1 	bl	8000a62 <nRF24_WriteReg>
    nRF24_WriteReg(FIFO_STATUS, 0x00);
 8000b20:	2100      	movs	r1, #0
 8000b22:	2017      	movs	r0, #23
 8000b24:	f7ff ff9d 	bl	8000a62 <nRF24_WriteReg>
}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <nRF24_TX_Mode>:
        if (read[i] != 0xA5) return 0;

    return 1;
}

void nRF24_TX_Mode(uint8_t *address, uint8_t channel) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
    nRF24_CE_L();
 8000b38:	f7ff ff06 	bl	8000948 <nRF24_CE_L>
    nRF24_WriteReg(EN_AA, 0x01);
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff ff8f 	bl	8000a62 <nRF24_WriteReg>
    nRF24_WriteReg(RF_CH, channel);
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	4619      	mov	r1, r3
 8000b48:	2005      	movs	r0, #5
 8000b4a:	f7ff ff8a 	bl	8000a62 <nRF24_WriteReg>
    nRF24_WriteReg(RF_SETUP, 0x0E);
 8000b4e:	210e      	movs	r1, #14
 8000b50:	2006      	movs	r0, #6
 8000b52:	f7ff ff86 	bl	8000a62 <nRF24_WriteReg>
    nRF24_WriteBuf(TX_ADDR, address, 5);
 8000b56:	2205      	movs	r2, #5
 8000b58:	6879      	ldr	r1, [r7, #4]
 8000b5a:	2010      	movs	r0, #16
 8000b5c:	f7ff ff9c 	bl	8000a98 <nRF24_WriteBuf>
    nRF24_WriteReg(CONFIG, 0x0E);
 8000b60:	210e      	movs	r1, #14
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff ff7d 	bl	8000a62 <nRF24_WriteReg>
    nRF24_CE_H();
 8000b68:	f7ff fee2 	bl	8000930 <nRF24_CE_H>
    nRF24_WriteReg(SETUP_RETR, 0x1F);
 8000b6c:	211f      	movs	r1, #31
 8000b6e:	2004      	movs	r0, #4
 8000b70:	f7ff ff77 	bl	8000a62 <nRF24_WriteReg>
    nRF24_SetupRetransmissions(5, 1500);
 8000b74:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000b78:	2005      	movs	r0, #5
 8000b7a:	f000 f826 	bl	8000bca <nRF24_SetupRetransmissions>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <nRF24_WritePayload>:

void nRF24_WritePayload(uint8_t *pBuf, uint8_t length) {
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	460b      	mov	r3, r1
 8000b90:	70fb      	strb	r3, [r7, #3]
    nRF24_CSN_L();
 8000b92:	f7ff fef1 	bl	8000978 <nRF24_CSN_L>
    nRF24_LL_RW(NRF24_CMD_W_TX_PAYLOAD);
 8000b96:	20a0      	movs	r0, #160	@ 0xa0
 8000b98:	f7ff fefa 	bl	8000990 <nRF24_LL_RW>
    for (uint8_t i = 0; i < length; i++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
 8000ba0:	e009      	b.n	8000bb6 <nRF24_WritePayload+0x30>
        nRF24_LL_RW(pBuf[i]);
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fef0 	bl	8000990 <nRF24_LL_RW>
    for (uint8_t i = 0; i < length; i++)
 8000bb0:	7bfb      	ldrb	r3, [r7, #15]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	73fb      	strb	r3, [r7, #15]
 8000bb6:	7bfa      	ldrb	r2, [r7, #15]
 8000bb8:	78fb      	ldrb	r3, [r7, #3]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d3f1      	bcc.n	8000ba2 <nRF24_WritePayload+0x1c>
    nRF24_CSN_H();
 8000bbe:	f7ff fecf 	bl	8000960 <nRF24_CSN_H>
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <nRF24_SetupRetransmissions>:
    nRF24_CSN_H();

    return status;
}

void nRF24_SetupRetransmissions(uint8_t retries, uint16_t delay_us) {
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	460a      	mov	r2, r1
 8000bd4:	71fb      	strb	r3, [r7, #7]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	80bb      	strh	r3, [r7, #4]
    uint8_t ard = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73fb      	strb	r3, [r7, #15]

    // Converte delay_us para valor ARD (4 bits)
    if (delay_us <= 250)       ard = 0;
 8000bde:	88bb      	ldrh	r3, [r7, #4]
 8000be0:	2bfa      	cmp	r3, #250	@ 0xfa
 8000be2:	d802      	bhi.n	8000bea <nRF24_SetupRetransmissions+0x20>
 8000be4:	2300      	movs	r3, #0
 8000be6:	73fb      	strb	r3, [r7, #15]
 8000be8:	e06e      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 500)  ard = 1;
 8000bea:	88bb      	ldrh	r3, [r7, #4]
 8000bec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bf0:	d802      	bhi.n	8000bf8 <nRF24_SetupRetransmissions+0x2e>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	73fb      	strb	r3, [r7, #15]
 8000bf6:	e067      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 750)  ard = 2;
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d802      	bhi.n	8000c08 <nRF24_SetupRetransmissions+0x3e>
 8000c02:	2302      	movs	r3, #2
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	e05f      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 1000) ard = 3;
 8000c08:	88bb      	ldrh	r3, [r7, #4]
 8000c0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c0e:	d802      	bhi.n	8000c16 <nRF24_SetupRetransmissions+0x4c>
 8000c10:	2303      	movs	r3, #3
 8000c12:	73fb      	strb	r3, [r7, #15]
 8000c14:	e058      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 1250) ard = 4;
 8000c16:	88bb      	ldrh	r3, [r7, #4]
 8000c18:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d802      	bhi.n	8000c26 <nRF24_SetupRetransmissions+0x5c>
 8000c20:	2304      	movs	r3, #4
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e050      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 1500) ard = 5;
 8000c26:	88bb      	ldrh	r3, [r7, #4]
 8000c28:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d802      	bhi.n	8000c36 <nRF24_SetupRetransmissions+0x6c>
 8000c30:	2305      	movs	r3, #5
 8000c32:	73fb      	strb	r3, [r7, #15]
 8000c34:	e048      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 1750) ard = 6;
 8000c36:	88bb      	ldrh	r3, [r7, #4]
 8000c38:	f240 62d6 	movw	r2, #1750	@ 0x6d6
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d802      	bhi.n	8000c46 <nRF24_SetupRetransmissions+0x7c>
 8000c40:	2306      	movs	r3, #6
 8000c42:	73fb      	strb	r3, [r7, #15]
 8000c44:	e040      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 2000) ard = 7;
 8000c46:	88bb      	ldrh	r3, [r7, #4]
 8000c48:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000c4c:	d802      	bhi.n	8000c54 <nRF24_SetupRetransmissions+0x8a>
 8000c4e:	2307      	movs	r3, #7
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e039      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 2250) ard = 8;
 8000c54:	88bb      	ldrh	r3, [r7, #4]
 8000c56:	f640 02ca 	movw	r2, #2250	@ 0x8ca
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d802      	bhi.n	8000c64 <nRF24_SetupRetransmissions+0x9a>
 8000c5e:	2308      	movs	r3, #8
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e031      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 2500) ard = 9;
 8000c64:	88bb      	ldrh	r3, [r7, #4]
 8000c66:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d802      	bhi.n	8000c74 <nRF24_SetupRetransmissions+0xaa>
 8000c6e:	2309      	movs	r3, #9
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e029      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 2750) ard = 10;
 8000c74:	88bb      	ldrh	r3, [r7, #4]
 8000c76:	f640 22be 	movw	r2, #2750	@ 0xabe
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d802      	bhi.n	8000c84 <nRF24_SetupRetransmissions+0xba>
 8000c7e:	230a      	movs	r3, #10
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	e021      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 3000) ard = 11;
 8000c84:	88bb      	ldrh	r3, [r7, #4]
 8000c86:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d802      	bhi.n	8000c94 <nRF24_SetupRetransmissions+0xca>
 8000c8e:	230b      	movs	r3, #11
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	e019      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 3250) ard = 12;
 8000c94:	88bb      	ldrh	r3, [r7, #4]
 8000c96:	f640 42b2 	movw	r2, #3250	@ 0xcb2
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d802      	bhi.n	8000ca4 <nRF24_SetupRetransmissions+0xda>
 8000c9e:	230c      	movs	r3, #12
 8000ca0:	73fb      	strb	r3, [r7, #15]
 8000ca2:	e011      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 3500) ard = 13;
 8000ca4:	88bb      	ldrh	r3, [r7, #4]
 8000ca6:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d802      	bhi.n	8000cb4 <nRF24_SetupRetransmissions+0xea>
 8000cae:	230d      	movs	r3, #13
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	e009      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else if (delay_us <= 3750) ard = 14;
 8000cb4:	88bb      	ldrh	r3, [r7, #4]
 8000cb6:	f640 62a6 	movw	r2, #3750	@ 0xea6
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d802      	bhi.n	8000cc4 <nRF24_SetupRetransmissions+0xfa>
 8000cbe:	230e      	movs	r3, #14
 8000cc0:	73fb      	strb	r3, [r7, #15]
 8000cc2:	e001      	b.n	8000cc8 <nRF24_SetupRetransmissions+0xfe>
    else                       ard = 15;
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	73fb      	strb	r3, [r7, #15]

    uint8_t setup_retr = (ard << 4) | (retries & 0x0F);
 8000cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ccc:	011b      	lsls	r3, r3, #4
 8000cce:	b25a      	sxtb	r2, r3
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	f003 030f 	and.w	r3, r3, #15
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	b25b      	sxtb	r3, r3
 8000cde:	73bb      	strb	r3, [r7, #14]
    nRF24_WriteReg(SETUP_RETR, setup_retr);
 8000ce0:	7bbb      	ldrb	r3, [r7, #14]
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f7ff febc 	bl	8000a62 <nRF24_WriteReg>
}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <nRF24_GetStatus>:

uint8_t nRF24_GetStatus(void) {
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
    nRF24_CSN_L();
 8000cf8:	f7ff fe3e 	bl	8000978 <nRF24_CSN_L>
    uint8_t status = nRF24_LL_RW(NRF24_CMD_NOP);
 8000cfc:	20ff      	movs	r0, #255	@ 0xff
 8000cfe:	f7ff fe47 	bl	8000990 <nRF24_LL_RW>
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
    nRF24_CSN_H();
 8000d06:	f7ff fe2b 	bl	8000960 <nRF24_CSN_H>
    return status;
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <nRF24_ClearIRQFlags>:

void nRF24_ClearIRQFlags(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
    nRF24_WriteReg(STATUS, 0x70);
 8000d18:	2170      	movs	r1, #112	@ 0x70
 8000d1a:	2007      	movs	r0, #7
 8000d1c:	f7ff fea1 	bl	8000a62 <nRF24_WriteReg>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <SPI1_Init>:
    nRF24_WriteReg(RX_PW_P0, 5);      // Payload de 5 bytes
    nRF24_WriteReg(CONFIG, 0x0E);     // PWR_UP + PRIM_RX + CRC_EN
    nRF24_CE_H();
}

void SPI1_Init(void) {
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
    // Habilita clocks: GPIOA e SPI1
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_SPI1EN;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <SPI1_Init+0x60>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	4a15      	ldr	r2, [pc, #84]	@ (8000d84 <SPI1_Init+0x60>)
 8000d2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6193      	str	r3, [r2, #24]
    // PA5 (SCK) ‚Üí Alt. Function Push-Pull
    // PA6 (MISO) ‚Üí Input Floating
    // PA7 (MOSI) ‚Üí Alt. Function Push-Pull

    // Reset bits
    GPIOA->CRL &= ~(GPIO_CRL_CNF5 | GPIO_CRL_MODE5 |  // PA5
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <SPI1_Init+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <SPI1_Init+0x64>)
 8000d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000d42:	6013      	str	r3, [r2, #0]
                    GPIO_CRL_CNF6 | GPIO_CRL_MODE6 |  // PA6
                    GPIO_CRL_CNF7 | GPIO_CRL_MODE7);  // PA7

    // PA5 (SCK) = AF Push-Pull, 50MHz
    GPIOA->CRL |= GPIO_CRL_CNF5_1 | GPIO_CRL_MODE5;
 8000d44:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <SPI1_Init+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a0f      	ldr	r2, [pc, #60]	@ (8000d88 <SPI1_Init+0x64>)
 8000d4a:	f443 0330 	orr.w	r3, r3, #11534336	@ 0xb00000
 8000d4e:	6013      	str	r3, [r2, #0]

    // PA6 (MISO) = Input floating
    GPIOA->CRL |= GPIO_CRL_CNF6_0;
 8000d50:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <SPI1_Init+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0c      	ldr	r2, [pc, #48]	@ (8000d88 <SPI1_Init+0x64>)
 8000d56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d5a:	6013      	str	r3, [r2, #0]

    // PA7 (MOSI) = AF Push-Pull, 50MHz
    GPIOA->CRL |= GPIO_CRL_CNF7_1 | GPIO_CRL_MODE7;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <SPI1_Init+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a09      	ldr	r2, [pc, #36]	@ (8000d88 <SPI1_Init+0x64>)
 8000d62:	f043 4330 	orr.w	r3, r3, #2952790016	@ 0xb0000000
 8000d66:	6013      	str	r3, [r2, #0]

    // Configura SPI1: Master, BR[2:0]=000 (f_PCLK/2), CPOL=0, CPHA=0, SSM=1, SSI=1
    SPI1->CR1 = SPI_CR1_MSTR      // Master
 8000d68:	4b08      	ldr	r3, [pc, #32]	@ (8000d8c <SPI1_Init+0x68>)
 8000d6a:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8000d6e:	601a      	str	r2, [r3, #0]
              | SPI_CR1_SSI       // Internal slave select
              | SPI_CR1_BR_0      // Baud rate: PCLK/4
              ;

    // Habilita SPI
    SPI1->CR1 |= SPI_CR1_SPE;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <SPI1_Init+0x68>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a05      	ldr	r2, [pc, #20]	@ (8000d8c <SPI1_Init+0x68>)
 8000d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010800 	.word	0x40010800
 8000d8c:	40013000 	.word	0x40013000

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	@ (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f000 f8e0 	bl	8000f84 <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20005000 	.word	0x20005000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	2000007c 	.word	0x2000007c
 8000df8:	200001c8 	.word	0x200001c8

08000dfc <UART_Init>:
#include <stdio.h>  // Para sprintf

uint8_t *ptr;  // Ponteiro global para a fun√ß√£o de transmiss√£o

// Inicializar a UART
void UART_Init(void) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
    /* Habilitar o clock para GPIOA */
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <UART_Init+0x5c>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <UART_Init+0x5c>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6193      	str	r3, [r2, #24]

    /* Configurar PA9 (TX) como sa√≠da*/
    GPIOA->CRH &= 0xFFFFFF0F;
 8000e0c:	4b13      	ldr	r3, [pc, #76]	@ (8000e5c <UART_Init+0x60>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	4a12      	ldr	r2, [pc, #72]	@ (8000e5c <UART_Init+0x60>)
 8000e12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000e16:	6053      	str	r3, [r2, #4]
    GPIOA->CRH |= 0x000000B0;
 8000e18:	4b10      	ldr	r3, [pc, #64]	@ (8000e5c <UART_Init+0x60>)
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e5c <UART_Init+0x60>)
 8000e1e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000e22:	6053      	str	r3, [r2, #4]

    /* Habilitar o clock para USART1 */
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <UART_Init+0x5c>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <UART_Init+0x5c>)
 8000e2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2e:	6193      	str	r3, [r2, #24]

    /* Configurar o baud rate da UART */
    USART1->BRR = ((CPU_CLK + (BaudRate / 2U)) / BaudRate);
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <UART_Init+0x64>)
 8000e32:	2245      	movs	r2, #69	@ 0x45
 8000e34:	609a      	str	r2, [r3, #8]

    /* Habilitar a transmiss√£o e a UART */
    USART1->CR1 |= USART_CR1_TE;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <UART_Init+0x64>)
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	4a09      	ldr	r2, [pc, #36]	@ (8000e60 <UART_Init+0x64>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <UART_Init+0x64>)
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	4a06      	ldr	r2, [pc, #24]	@ (8000e60 <UART_Init+0x64>)
 8000e48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e4c:	60d3      	str	r3, [r2, #12]
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	40013800 	.word	0x40013800

08000e64 <print_uart>:

// Fun√ß√£o para enviar uma string simples pela UART
void print_uart(const char *label) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
    uart_write((uint8_t*)label);  // Converte para uint8_t* e envia via UART
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f000 f805 	bl	8000e7c <uart_write>
}
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <uart_write>:

// Fun√ß√£o para enviar uma string pela UART
void uart_write(uint8_t *ch) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    while (*ch) {
 8000e84:	e00d      	b.n	8000ea2 <uart_write+0x26>
        // Aguarde at√© que o registrador de transmiss√£o esteja vazio
        while (!(USART1->SR & USART_SR_TXE)) {}
 8000e86:	bf00      	nop
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <uart_write+0x3c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d0f9      	beq.n	8000e88 <uart_write+0xc>
        // Enviar o byte atual
        USART1->DR = (*ch & 0xFF);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <uart_write+0x3c>)
 8000e9a:	605a      	str	r2, [r3, #4]
        ch++;  // Avan√ßar para o pr√≥ximo caractere
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
    while (*ch) {
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d1ed      	bne.n	8000e86 <uart_write+0xa>
    }
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	40013800 	.word	0x40013800

08000ebc <uart_print_int>:

// Fun√ß√£o para enviar um n√∫mero inteiro com uma label via UART
void uart_print_int(const char *label, uint32_t value) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b090      	sub	sp, #64	@ 0x40
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
    char buffer[50];
    sprintf(buffer, "%s: %lu\n\r", label, value);
 8000ec6:	f107 000c 	add.w	r0, r7, #12
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4906      	ldr	r1, [pc, #24]	@ (8000ee8 <uart_print_int+0x2c>)
 8000ed0:	f000 f836 	bl	8000f40 <siprintf>
    uart_write((uint8_t*)buffer);
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ffcf 	bl	8000e7c <uart_write>
}
 8000ede:	bf00      	nop
 8000ee0:	3740      	adds	r7, #64	@ 0x40
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	08001bfc 	.word	0x08001bfc

08000eec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eec:	480d      	ldr	r0, [pc, #52]	@ (8000f24 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ef0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	@ (8000f2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <LoopForever+0xe>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f38 <LoopForever+0x16>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f1a:	f000 f839 	bl	8000f90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f1e:	f7ff fc71 	bl	8000804 <main>

08000f22 <LoopForever>:

LoopForever:
  b LoopForever
 8000f22:	e7fe      	b.n	8000f22 <LoopForever>
  ldr   r0, =_estack
 8000f24:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000f30:	08001c44 	.word	0x08001c44
  ldr r2, =_sbss
 8000f34:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000f38:	200001c8 	.word	0x200001c8

08000f3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC1_2_IRQHandler>
	...

08000f40 <siprintf>:
 8000f40:	b40e      	push	{r1, r2, r3}
 8000f42:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000f46:	b510      	push	{r4, lr}
 8000f48:	2400      	movs	r4, #0
 8000f4a:	b09d      	sub	sp, #116	@ 0x74
 8000f4c:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000f4e:	9002      	str	r0, [sp, #8]
 8000f50:	9006      	str	r0, [sp, #24]
 8000f52:	9107      	str	r1, [sp, #28]
 8000f54:	9104      	str	r1, [sp, #16]
 8000f56:	4809      	ldr	r0, [pc, #36]	@ (8000f7c <siprintf+0x3c>)
 8000f58:	4909      	ldr	r1, [pc, #36]	@ (8000f80 <siprintf+0x40>)
 8000f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f5e:	9105      	str	r1, [sp, #20]
 8000f60:	6800      	ldr	r0, [r0, #0]
 8000f62:	a902      	add	r1, sp, #8
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000f68:	f000 f98a 	bl	8001280 <_svfiprintf_r>
 8000f6c:	9b02      	ldr	r3, [sp, #8]
 8000f6e:	701c      	strb	r4, [r3, #0]
 8000f70:	b01d      	add	sp, #116	@ 0x74
 8000f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f76:	b003      	add	sp, #12
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	ffff0208 	.word	0xffff0208

08000f84 <__errno>:
 8000f84:	4b01      	ldr	r3, [pc, #4]	@ (8000f8c <__errno+0x8>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000000 	.word	0x20000000

08000f90 <__libc_init_array>:
 8000f90:	b570      	push	{r4, r5, r6, lr}
 8000f92:	2600      	movs	r6, #0
 8000f94:	4d0c      	ldr	r5, [pc, #48]	@ (8000fc8 <__libc_init_array+0x38>)
 8000f96:	4c0d      	ldr	r4, [pc, #52]	@ (8000fcc <__libc_init_array+0x3c>)
 8000f98:	1b64      	subs	r4, r4, r5
 8000f9a:	10a4      	asrs	r4, r4, #2
 8000f9c:	42a6      	cmp	r6, r4
 8000f9e:	d109      	bne.n	8000fb4 <__libc_init_array+0x24>
 8000fa0:	f000 fc76 	bl	8001890 <_init>
 8000fa4:	2600      	movs	r6, #0
 8000fa6:	4d0a      	ldr	r5, [pc, #40]	@ (8000fd0 <__libc_init_array+0x40>)
 8000fa8:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd4 <__libc_init_array+0x44>)
 8000faa:	1b64      	subs	r4, r4, r5
 8000fac:	10a4      	asrs	r4, r4, #2
 8000fae:	42a6      	cmp	r6, r4
 8000fb0:	d105      	bne.n	8000fbe <__libc_init_array+0x2e>
 8000fb2:	bd70      	pop	{r4, r5, r6, pc}
 8000fb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fb8:	4798      	blx	r3
 8000fba:	3601      	adds	r6, #1
 8000fbc:	e7ee      	b.n	8000f9c <__libc_init_array+0xc>
 8000fbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fc2:	4798      	blx	r3
 8000fc4:	3601      	adds	r6, #1
 8000fc6:	e7f2      	b.n	8000fae <__libc_init_array+0x1e>
 8000fc8:	08001c3c 	.word	0x08001c3c
 8000fcc:	08001c3c 	.word	0x08001c3c
 8000fd0:	08001c3c 	.word	0x08001c3c
 8000fd4:	08001c40 	.word	0x08001c40

08000fd8 <__retarget_lock_acquire_recursive>:
 8000fd8:	4770      	bx	lr

08000fda <__retarget_lock_release_recursive>:
 8000fda:	4770      	bx	lr

08000fdc <_free_r>:
 8000fdc:	b538      	push	{r3, r4, r5, lr}
 8000fde:	4605      	mov	r5, r0
 8000fe0:	2900      	cmp	r1, #0
 8000fe2:	d040      	beq.n	8001066 <_free_r+0x8a>
 8000fe4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fe8:	1f0c      	subs	r4, r1, #4
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	bfb8      	it	lt
 8000fee:	18e4      	addlt	r4, r4, r3
 8000ff0:	f000 f8de 	bl	80011b0 <__malloc_lock>
 8000ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8001068 <_free_r+0x8c>)
 8000ff6:	6813      	ldr	r3, [r2, #0]
 8000ff8:	b933      	cbnz	r3, 8001008 <_free_r+0x2c>
 8000ffa:	6063      	str	r3, [r4, #4]
 8000ffc:	6014      	str	r4, [r2, #0]
 8000ffe:	4628      	mov	r0, r5
 8001000:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001004:	f000 b8da 	b.w	80011bc <__malloc_unlock>
 8001008:	42a3      	cmp	r3, r4
 800100a:	d908      	bls.n	800101e <_free_r+0x42>
 800100c:	6820      	ldr	r0, [r4, #0]
 800100e:	1821      	adds	r1, r4, r0
 8001010:	428b      	cmp	r3, r1
 8001012:	bf01      	itttt	eq
 8001014:	6819      	ldreq	r1, [r3, #0]
 8001016:	685b      	ldreq	r3, [r3, #4]
 8001018:	1809      	addeq	r1, r1, r0
 800101a:	6021      	streq	r1, [r4, #0]
 800101c:	e7ed      	b.n	8000ffa <_free_r+0x1e>
 800101e:	461a      	mov	r2, r3
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	b10b      	cbz	r3, 8001028 <_free_r+0x4c>
 8001024:	42a3      	cmp	r3, r4
 8001026:	d9fa      	bls.n	800101e <_free_r+0x42>
 8001028:	6811      	ldr	r1, [r2, #0]
 800102a:	1850      	adds	r0, r2, r1
 800102c:	42a0      	cmp	r0, r4
 800102e:	d10b      	bne.n	8001048 <_free_r+0x6c>
 8001030:	6820      	ldr	r0, [r4, #0]
 8001032:	4401      	add	r1, r0
 8001034:	1850      	adds	r0, r2, r1
 8001036:	4283      	cmp	r3, r0
 8001038:	6011      	str	r1, [r2, #0]
 800103a:	d1e0      	bne.n	8000ffe <_free_r+0x22>
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	4408      	add	r0, r1
 8001042:	6010      	str	r0, [r2, #0]
 8001044:	6053      	str	r3, [r2, #4]
 8001046:	e7da      	b.n	8000ffe <_free_r+0x22>
 8001048:	d902      	bls.n	8001050 <_free_r+0x74>
 800104a:	230c      	movs	r3, #12
 800104c:	602b      	str	r3, [r5, #0]
 800104e:	e7d6      	b.n	8000ffe <_free_r+0x22>
 8001050:	6820      	ldr	r0, [r4, #0]
 8001052:	1821      	adds	r1, r4, r0
 8001054:	428b      	cmp	r3, r1
 8001056:	bf01      	itttt	eq
 8001058:	6819      	ldreq	r1, [r3, #0]
 800105a:	685b      	ldreq	r3, [r3, #4]
 800105c:	1809      	addeq	r1, r1, r0
 800105e:	6021      	streq	r1, [r4, #0]
 8001060:	6063      	str	r3, [r4, #4]
 8001062:	6054      	str	r4, [r2, #4]
 8001064:	e7cb      	b.n	8000ffe <_free_r+0x22>
 8001066:	bd38      	pop	{r3, r4, r5, pc}
 8001068:	200001c4 	.word	0x200001c4

0800106c <sbrk_aligned>:
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	4e0f      	ldr	r6, [pc, #60]	@ (80010ac <sbrk_aligned+0x40>)
 8001070:	460c      	mov	r4, r1
 8001072:	6831      	ldr	r1, [r6, #0]
 8001074:	4605      	mov	r5, r0
 8001076:	b911      	cbnz	r1, 800107e <sbrk_aligned+0x12>
 8001078:	f000 fba8 	bl	80017cc <_sbrk_r>
 800107c:	6030      	str	r0, [r6, #0]
 800107e:	4621      	mov	r1, r4
 8001080:	4628      	mov	r0, r5
 8001082:	f000 fba3 	bl	80017cc <_sbrk_r>
 8001086:	1c43      	adds	r3, r0, #1
 8001088:	d103      	bne.n	8001092 <sbrk_aligned+0x26>
 800108a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800108e:	4620      	mov	r0, r4
 8001090:	bd70      	pop	{r4, r5, r6, pc}
 8001092:	1cc4      	adds	r4, r0, #3
 8001094:	f024 0403 	bic.w	r4, r4, #3
 8001098:	42a0      	cmp	r0, r4
 800109a:	d0f8      	beq.n	800108e <sbrk_aligned+0x22>
 800109c:	1a21      	subs	r1, r4, r0
 800109e:	4628      	mov	r0, r5
 80010a0:	f000 fb94 	bl	80017cc <_sbrk_r>
 80010a4:	3001      	adds	r0, #1
 80010a6:	d1f2      	bne.n	800108e <sbrk_aligned+0x22>
 80010a8:	e7ef      	b.n	800108a <sbrk_aligned+0x1e>
 80010aa:	bf00      	nop
 80010ac:	200001c0 	.word	0x200001c0

080010b0 <_malloc_r>:
 80010b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80010b4:	1ccd      	adds	r5, r1, #3
 80010b6:	f025 0503 	bic.w	r5, r5, #3
 80010ba:	3508      	adds	r5, #8
 80010bc:	2d0c      	cmp	r5, #12
 80010be:	bf38      	it	cc
 80010c0:	250c      	movcc	r5, #12
 80010c2:	2d00      	cmp	r5, #0
 80010c4:	4606      	mov	r6, r0
 80010c6:	db01      	blt.n	80010cc <_malloc_r+0x1c>
 80010c8:	42a9      	cmp	r1, r5
 80010ca:	d904      	bls.n	80010d6 <_malloc_r+0x26>
 80010cc:	230c      	movs	r3, #12
 80010ce:	6033      	str	r3, [r6, #0]
 80010d0:	2000      	movs	r0, #0
 80010d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80011ac <_malloc_r+0xfc>
 80010da:	f000 f869 	bl	80011b0 <__malloc_lock>
 80010de:	f8d8 3000 	ldr.w	r3, [r8]
 80010e2:	461c      	mov	r4, r3
 80010e4:	bb44      	cbnz	r4, 8001138 <_malloc_r+0x88>
 80010e6:	4629      	mov	r1, r5
 80010e8:	4630      	mov	r0, r6
 80010ea:	f7ff ffbf 	bl	800106c <sbrk_aligned>
 80010ee:	1c43      	adds	r3, r0, #1
 80010f0:	4604      	mov	r4, r0
 80010f2:	d158      	bne.n	80011a6 <_malloc_r+0xf6>
 80010f4:	f8d8 4000 	ldr.w	r4, [r8]
 80010f8:	4627      	mov	r7, r4
 80010fa:	2f00      	cmp	r7, #0
 80010fc:	d143      	bne.n	8001186 <_malloc_r+0xd6>
 80010fe:	2c00      	cmp	r4, #0
 8001100:	d04b      	beq.n	800119a <_malloc_r+0xea>
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	4639      	mov	r1, r7
 8001106:	4630      	mov	r0, r6
 8001108:	eb04 0903 	add.w	r9, r4, r3
 800110c:	f000 fb5e 	bl	80017cc <_sbrk_r>
 8001110:	4581      	cmp	r9, r0
 8001112:	d142      	bne.n	800119a <_malloc_r+0xea>
 8001114:	6821      	ldr	r1, [r4, #0]
 8001116:	4630      	mov	r0, r6
 8001118:	1a6d      	subs	r5, r5, r1
 800111a:	4629      	mov	r1, r5
 800111c:	f7ff ffa6 	bl	800106c <sbrk_aligned>
 8001120:	3001      	adds	r0, #1
 8001122:	d03a      	beq.n	800119a <_malloc_r+0xea>
 8001124:	6823      	ldr	r3, [r4, #0]
 8001126:	442b      	add	r3, r5
 8001128:	6023      	str	r3, [r4, #0]
 800112a:	f8d8 3000 	ldr.w	r3, [r8]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	bb62      	cbnz	r2, 800118c <_malloc_r+0xdc>
 8001132:	f8c8 7000 	str.w	r7, [r8]
 8001136:	e00f      	b.n	8001158 <_malloc_r+0xa8>
 8001138:	6822      	ldr	r2, [r4, #0]
 800113a:	1b52      	subs	r2, r2, r5
 800113c:	d420      	bmi.n	8001180 <_malloc_r+0xd0>
 800113e:	2a0b      	cmp	r2, #11
 8001140:	d917      	bls.n	8001172 <_malloc_r+0xc2>
 8001142:	1961      	adds	r1, r4, r5
 8001144:	42a3      	cmp	r3, r4
 8001146:	6025      	str	r5, [r4, #0]
 8001148:	bf18      	it	ne
 800114a:	6059      	strne	r1, [r3, #4]
 800114c:	6863      	ldr	r3, [r4, #4]
 800114e:	bf08      	it	eq
 8001150:	f8c8 1000 	streq.w	r1, [r8]
 8001154:	5162      	str	r2, [r4, r5]
 8001156:	604b      	str	r3, [r1, #4]
 8001158:	4630      	mov	r0, r6
 800115a:	f000 f82f 	bl	80011bc <__malloc_unlock>
 800115e:	f104 000b 	add.w	r0, r4, #11
 8001162:	1d23      	adds	r3, r4, #4
 8001164:	f020 0007 	bic.w	r0, r0, #7
 8001168:	1ac2      	subs	r2, r0, r3
 800116a:	bf1c      	itt	ne
 800116c:	1a1b      	subne	r3, r3, r0
 800116e:	50a3      	strne	r3, [r4, r2]
 8001170:	e7af      	b.n	80010d2 <_malloc_r+0x22>
 8001172:	6862      	ldr	r2, [r4, #4]
 8001174:	42a3      	cmp	r3, r4
 8001176:	bf0c      	ite	eq
 8001178:	f8c8 2000 	streq.w	r2, [r8]
 800117c:	605a      	strne	r2, [r3, #4]
 800117e:	e7eb      	b.n	8001158 <_malloc_r+0xa8>
 8001180:	4623      	mov	r3, r4
 8001182:	6864      	ldr	r4, [r4, #4]
 8001184:	e7ae      	b.n	80010e4 <_malloc_r+0x34>
 8001186:	463c      	mov	r4, r7
 8001188:	687f      	ldr	r7, [r7, #4]
 800118a:	e7b6      	b.n	80010fa <_malloc_r+0x4a>
 800118c:	461a      	mov	r2, r3
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	42a3      	cmp	r3, r4
 8001192:	d1fb      	bne.n	800118c <_malloc_r+0xdc>
 8001194:	2300      	movs	r3, #0
 8001196:	6053      	str	r3, [r2, #4]
 8001198:	e7de      	b.n	8001158 <_malloc_r+0xa8>
 800119a:	230c      	movs	r3, #12
 800119c:	4630      	mov	r0, r6
 800119e:	6033      	str	r3, [r6, #0]
 80011a0:	f000 f80c 	bl	80011bc <__malloc_unlock>
 80011a4:	e794      	b.n	80010d0 <_malloc_r+0x20>
 80011a6:	6005      	str	r5, [r0, #0]
 80011a8:	e7d6      	b.n	8001158 <_malloc_r+0xa8>
 80011aa:	bf00      	nop
 80011ac:	200001c4 	.word	0x200001c4

080011b0 <__malloc_lock>:
 80011b0:	4801      	ldr	r0, [pc, #4]	@ (80011b8 <__malloc_lock+0x8>)
 80011b2:	f7ff bf11 	b.w	8000fd8 <__retarget_lock_acquire_recursive>
 80011b6:	bf00      	nop
 80011b8:	200001bc 	.word	0x200001bc

080011bc <__malloc_unlock>:
 80011bc:	4801      	ldr	r0, [pc, #4]	@ (80011c4 <__malloc_unlock+0x8>)
 80011be:	f7ff bf0c 	b.w	8000fda <__retarget_lock_release_recursive>
 80011c2:	bf00      	nop
 80011c4:	200001bc 	.word	0x200001bc

080011c8 <__ssputs_r>:
 80011c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011cc:	461f      	mov	r7, r3
 80011ce:	688e      	ldr	r6, [r1, #8]
 80011d0:	4682      	mov	sl, r0
 80011d2:	42be      	cmp	r6, r7
 80011d4:	460c      	mov	r4, r1
 80011d6:	4690      	mov	r8, r2
 80011d8:	680b      	ldr	r3, [r1, #0]
 80011da:	d82d      	bhi.n	8001238 <__ssputs_r+0x70>
 80011dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80011e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80011e4:	d026      	beq.n	8001234 <__ssputs_r+0x6c>
 80011e6:	6965      	ldr	r5, [r4, #20]
 80011e8:	6909      	ldr	r1, [r1, #16]
 80011ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80011ee:	eba3 0901 	sub.w	r9, r3, r1
 80011f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80011f6:	1c7b      	adds	r3, r7, #1
 80011f8:	444b      	add	r3, r9
 80011fa:	106d      	asrs	r5, r5, #1
 80011fc:	429d      	cmp	r5, r3
 80011fe:	bf38      	it	cc
 8001200:	461d      	movcc	r5, r3
 8001202:	0553      	lsls	r3, r2, #21
 8001204:	d527      	bpl.n	8001256 <__ssputs_r+0x8e>
 8001206:	4629      	mov	r1, r5
 8001208:	f7ff ff52 	bl	80010b0 <_malloc_r>
 800120c:	4606      	mov	r6, r0
 800120e:	b360      	cbz	r0, 800126a <__ssputs_r+0xa2>
 8001210:	464a      	mov	r2, r9
 8001212:	6921      	ldr	r1, [r4, #16]
 8001214:	f000 faf8 	bl	8001808 <memcpy>
 8001218:	89a3      	ldrh	r3, [r4, #12]
 800121a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800121e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001222:	81a3      	strh	r3, [r4, #12]
 8001224:	6126      	str	r6, [r4, #16]
 8001226:	444e      	add	r6, r9
 8001228:	6026      	str	r6, [r4, #0]
 800122a:	463e      	mov	r6, r7
 800122c:	6165      	str	r5, [r4, #20]
 800122e:	eba5 0509 	sub.w	r5, r5, r9
 8001232:	60a5      	str	r5, [r4, #8]
 8001234:	42be      	cmp	r6, r7
 8001236:	d900      	bls.n	800123a <__ssputs_r+0x72>
 8001238:	463e      	mov	r6, r7
 800123a:	4632      	mov	r2, r6
 800123c:	4641      	mov	r1, r8
 800123e:	6820      	ldr	r0, [r4, #0]
 8001240:	f000 faaa 	bl	8001798 <memmove>
 8001244:	2000      	movs	r0, #0
 8001246:	68a3      	ldr	r3, [r4, #8]
 8001248:	1b9b      	subs	r3, r3, r6
 800124a:	60a3      	str	r3, [r4, #8]
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	4433      	add	r3, r6
 8001250:	6023      	str	r3, [r4, #0]
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	462a      	mov	r2, r5
 8001258:	f000 fae4 	bl	8001824 <_realloc_r>
 800125c:	4606      	mov	r6, r0
 800125e:	2800      	cmp	r0, #0
 8001260:	d1e0      	bne.n	8001224 <__ssputs_r+0x5c>
 8001262:	4650      	mov	r0, sl
 8001264:	6921      	ldr	r1, [r4, #16]
 8001266:	f7ff feb9 	bl	8000fdc <_free_r>
 800126a:	230c      	movs	r3, #12
 800126c:	f8ca 3000 	str.w	r3, [sl]
 8001270:	89a3      	ldrh	r3, [r4, #12]
 8001272:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800127a:	81a3      	strh	r3, [r4, #12]
 800127c:	e7e9      	b.n	8001252 <__ssputs_r+0x8a>
	...

08001280 <_svfiprintf_r>:
 8001280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001284:	4698      	mov	r8, r3
 8001286:	898b      	ldrh	r3, [r1, #12]
 8001288:	4607      	mov	r7, r0
 800128a:	061b      	lsls	r3, r3, #24
 800128c:	460d      	mov	r5, r1
 800128e:	4614      	mov	r4, r2
 8001290:	b09d      	sub	sp, #116	@ 0x74
 8001292:	d510      	bpl.n	80012b6 <_svfiprintf_r+0x36>
 8001294:	690b      	ldr	r3, [r1, #16]
 8001296:	b973      	cbnz	r3, 80012b6 <_svfiprintf_r+0x36>
 8001298:	2140      	movs	r1, #64	@ 0x40
 800129a:	f7ff ff09 	bl	80010b0 <_malloc_r>
 800129e:	6028      	str	r0, [r5, #0]
 80012a0:	6128      	str	r0, [r5, #16]
 80012a2:	b930      	cbnz	r0, 80012b2 <_svfiprintf_r+0x32>
 80012a4:	230c      	movs	r3, #12
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012ac:	b01d      	add	sp, #116	@ 0x74
 80012ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012b2:	2340      	movs	r3, #64	@ 0x40
 80012b4:	616b      	str	r3, [r5, #20]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80012ba:	2320      	movs	r3, #32
 80012bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80012c0:	2330      	movs	r3, #48	@ 0x30
 80012c2:	f04f 0901 	mov.w	r9, #1
 80012c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80012ca:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001464 <_svfiprintf_r+0x1e4>
 80012ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80012d2:	4623      	mov	r3, r4
 80012d4:	469a      	mov	sl, r3
 80012d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80012da:	b10a      	cbz	r2, 80012e0 <_svfiprintf_r+0x60>
 80012dc:	2a25      	cmp	r2, #37	@ 0x25
 80012de:	d1f9      	bne.n	80012d4 <_svfiprintf_r+0x54>
 80012e0:	ebba 0b04 	subs.w	fp, sl, r4
 80012e4:	d00b      	beq.n	80012fe <_svfiprintf_r+0x7e>
 80012e6:	465b      	mov	r3, fp
 80012e8:	4622      	mov	r2, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	4638      	mov	r0, r7
 80012ee:	f7ff ff6b 	bl	80011c8 <__ssputs_r>
 80012f2:	3001      	adds	r0, #1
 80012f4:	f000 80a7 	beq.w	8001446 <_svfiprintf_r+0x1c6>
 80012f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80012fa:	445a      	add	r2, fp
 80012fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80012fe:	f89a 3000 	ldrb.w	r3, [sl]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 809f 	beq.w	8001446 <_svfiprintf_r+0x1c6>
 8001308:	2300      	movs	r3, #0
 800130a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800130e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001312:	f10a 0a01 	add.w	sl, sl, #1
 8001316:	9304      	str	r3, [sp, #16]
 8001318:	9307      	str	r3, [sp, #28]
 800131a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800131e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001320:	4654      	mov	r4, sl
 8001322:	2205      	movs	r2, #5
 8001324:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001328:	484e      	ldr	r0, [pc, #312]	@ (8001464 <_svfiprintf_r+0x1e4>)
 800132a:	f000 fa5f 	bl	80017ec <memchr>
 800132e:	9a04      	ldr	r2, [sp, #16]
 8001330:	b9d8      	cbnz	r0, 800136a <_svfiprintf_r+0xea>
 8001332:	06d0      	lsls	r0, r2, #27
 8001334:	bf44      	itt	mi
 8001336:	2320      	movmi	r3, #32
 8001338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800133c:	0711      	lsls	r1, r2, #28
 800133e:	bf44      	itt	mi
 8001340:	232b      	movmi	r3, #43	@ 0x2b
 8001342:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001346:	f89a 3000 	ldrb.w	r3, [sl]
 800134a:	2b2a      	cmp	r3, #42	@ 0x2a
 800134c:	d015      	beq.n	800137a <_svfiprintf_r+0xfa>
 800134e:	4654      	mov	r4, sl
 8001350:	2000      	movs	r0, #0
 8001352:	f04f 0c0a 	mov.w	ip, #10
 8001356:	9a07      	ldr	r2, [sp, #28]
 8001358:	4621      	mov	r1, r4
 800135a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800135e:	3b30      	subs	r3, #48	@ 0x30
 8001360:	2b09      	cmp	r3, #9
 8001362:	d94b      	bls.n	80013fc <_svfiprintf_r+0x17c>
 8001364:	b1b0      	cbz	r0, 8001394 <_svfiprintf_r+0x114>
 8001366:	9207      	str	r2, [sp, #28]
 8001368:	e014      	b.n	8001394 <_svfiprintf_r+0x114>
 800136a:	eba0 0308 	sub.w	r3, r0, r8
 800136e:	fa09 f303 	lsl.w	r3, r9, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	46a2      	mov	sl, r4
 8001376:	9304      	str	r3, [sp, #16]
 8001378:	e7d2      	b.n	8001320 <_svfiprintf_r+0xa0>
 800137a:	9b03      	ldr	r3, [sp, #12]
 800137c:	1d19      	adds	r1, r3, #4
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	9103      	str	r1, [sp, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	bfbb      	ittet	lt
 8001386:	425b      	neglt	r3, r3
 8001388:	f042 0202 	orrlt.w	r2, r2, #2
 800138c:	9307      	strge	r3, [sp, #28]
 800138e:	9307      	strlt	r3, [sp, #28]
 8001390:	bfb8      	it	lt
 8001392:	9204      	strlt	r2, [sp, #16]
 8001394:	7823      	ldrb	r3, [r4, #0]
 8001396:	2b2e      	cmp	r3, #46	@ 0x2e
 8001398:	d10a      	bne.n	80013b0 <_svfiprintf_r+0x130>
 800139a:	7863      	ldrb	r3, [r4, #1]
 800139c:	2b2a      	cmp	r3, #42	@ 0x2a
 800139e:	d132      	bne.n	8001406 <_svfiprintf_r+0x186>
 80013a0:	9b03      	ldr	r3, [sp, #12]
 80013a2:	3402      	adds	r4, #2
 80013a4:	1d1a      	adds	r2, r3, #4
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	9203      	str	r2, [sp, #12]
 80013aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80013ae:	9305      	str	r3, [sp, #20]
 80013b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001468 <_svfiprintf_r+0x1e8>
 80013b4:	2203      	movs	r2, #3
 80013b6:	4650      	mov	r0, sl
 80013b8:	7821      	ldrb	r1, [r4, #0]
 80013ba:	f000 fa17 	bl	80017ec <memchr>
 80013be:	b138      	cbz	r0, 80013d0 <_svfiprintf_r+0x150>
 80013c0:	2240      	movs	r2, #64	@ 0x40
 80013c2:	9b04      	ldr	r3, [sp, #16]
 80013c4:	eba0 000a 	sub.w	r0, r0, sl
 80013c8:	4082      	lsls	r2, r0
 80013ca:	4313      	orrs	r3, r2
 80013cc:	3401      	adds	r4, #1
 80013ce:	9304      	str	r3, [sp, #16]
 80013d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013d4:	2206      	movs	r2, #6
 80013d6:	4825      	ldr	r0, [pc, #148]	@ (800146c <_svfiprintf_r+0x1ec>)
 80013d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80013dc:	f000 fa06 	bl	80017ec <memchr>
 80013e0:	2800      	cmp	r0, #0
 80013e2:	d036      	beq.n	8001452 <_svfiprintf_r+0x1d2>
 80013e4:	4b22      	ldr	r3, [pc, #136]	@ (8001470 <_svfiprintf_r+0x1f0>)
 80013e6:	bb1b      	cbnz	r3, 8001430 <_svfiprintf_r+0x1b0>
 80013e8:	9b03      	ldr	r3, [sp, #12]
 80013ea:	3307      	adds	r3, #7
 80013ec:	f023 0307 	bic.w	r3, r3, #7
 80013f0:	3308      	adds	r3, #8
 80013f2:	9303      	str	r3, [sp, #12]
 80013f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80013f6:	4433      	add	r3, r6
 80013f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80013fa:	e76a      	b.n	80012d2 <_svfiprintf_r+0x52>
 80013fc:	460c      	mov	r4, r1
 80013fe:	2001      	movs	r0, #1
 8001400:	fb0c 3202 	mla	r2, ip, r2, r3
 8001404:	e7a8      	b.n	8001358 <_svfiprintf_r+0xd8>
 8001406:	2300      	movs	r3, #0
 8001408:	f04f 0c0a 	mov.w	ip, #10
 800140c:	4619      	mov	r1, r3
 800140e:	3401      	adds	r4, #1
 8001410:	9305      	str	r3, [sp, #20]
 8001412:	4620      	mov	r0, r4
 8001414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001418:	3a30      	subs	r2, #48	@ 0x30
 800141a:	2a09      	cmp	r2, #9
 800141c:	d903      	bls.n	8001426 <_svfiprintf_r+0x1a6>
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0c6      	beq.n	80013b0 <_svfiprintf_r+0x130>
 8001422:	9105      	str	r1, [sp, #20]
 8001424:	e7c4      	b.n	80013b0 <_svfiprintf_r+0x130>
 8001426:	4604      	mov	r4, r0
 8001428:	2301      	movs	r3, #1
 800142a:	fb0c 2101 	mla	r1, ip, r1, r2
 800142e:	e7f0      	b.n	8001412 <_svfiprintf_r+0x192>
 8001430:	ab03      	add	r3, sp, #12
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	462a      	mov	r2, r5
 8001436:	4638      	mov	r0, r7
 8001438:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <_svfiprintf_r+0x1f4>)
 800143a:	a904      	add	r1, sp, #16
 800143c:	f3af 8000 	nop.w
 8001440:	1c42      	adds	r2, r0, #1
 8001442:	4606      	mov	r6, r0
 8001444:	d1d6      	bne.n	80013f4 <_svfiprintf_r+0x174>
 8001446:	89ab      	ldrh	r3, [r5, #12]
 8001448:	065b      	lsls	r3, r3, #25
 800144a:	f53f af2d 	bmi.w	80012a8 <_svfiprintf_r+0x28>
 800144e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001450:	e72c      	b.n	80012ac <_svfiprintf_r+0x2c>
 8001452:	ab03      	add	r3, sp, #12
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	462a      	mov	r2, r5
 8001458:	4638      	mov	r0, r7
 800145a:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <_svfiprintf_r+0x1f4>)
 800145c:	a904      	add	r1, sp, #16
 800145e:	f000 f87d 	bl	800155c <_printf_i>
 8001462:	e7ed      	b.n	8001440 <_svfiprintf_r+0x1c0>
 8001464:	08001c06 	.word	0x08001c06
 8001468:	08001c0c 	.word	0x08001c0c
 800146c:	08001c10 	.word	0x08001c10
 8001470:	00000000 	.word	0x00000000
 8001474:	080011c9 	.word	0x080011c9

08001478 <_printf_common>:
 8001478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800147c:	4616      	mov	r6, r2
 800147e:	4698      	mov	r8, r3
 8001480:	688a      	ldr	r2, [r1, #8]
 8001482:	690b      	ldr	r3, [r1, #16]
 8001484:	4607      	mov	r7, r0
 8001486:	4293      	cmp	r3, r2
 8001488:	bfb8      	it	lt
 800148a:	4613      	movlt	r3, r2
 800148c:	6033      	str	r3, [r6, #0]
 800148e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001492:	460c      	mov	r4, r1
 8001494:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001498:	b10a      	cbz	r2, 800149e <_printf_common+0x26>
 800149a:	3301      	adds	r3, #1
 800149c:	6033      	str	r3, [r6, #0]
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	0699      	lsls	r1, r3, #26
 80014a2:	bf42      	ittt	mi
 80014a4:	6833      	ldrmi	r3, [r6, #0]
 80014a6:	3302      	addmi	r3, #2
 80014a8:	6033      	strmi	r3, [r6, #0]
 80014aa:	6825      	ldr	r5, [r4, #0]
 80014ac:	f015 0506 	ands.w	r5, r5, #6
 80014b0:	d106      	bne.n	80014c0 <_printf_common+0x48>
 80014b2:	f104 0a19 	add.w	sl, r4, #25
 80014b6:	68e3      	ldr	r3, [r4, #12]
 80014b8:	6832      	ldr	r2, [r6, #0]
 80014ba:	1a9b      	subs	r3, r3, r2
 80014bc:	42ab      	cmp	r3, r5
 80014be:	dc2b      	bgt.n	8001518 <_printf_common+0xa0>
 80014c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80014c4:	6822      	ldr	r2, [r4, #0]
 80014c6:	3b00      	subs	r3, #0
 80014c8:	bf18      	it	ne
 80014ca:	2301      	movne	r3, #1
 80014cc:	0692      	lsls	r2, r2, #26
 80014ce:	d430      	bmi.n	8001532 <_printf_common+0xba>
 80014d0:	4641      	mov	r1, r8
 80014d2:	4638      	mov	r0, r7
 80014d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80014d8:	47c8      	blx	r9
 80014da:	3001      	adds	r0, #1
 80014dc:	d023      	beq.n	8001526 <_printf_common+0xae>
 80014de:	6823      	ldr	r3, [r4, #0]
 80014e0:	6922      	ldr	r2, [r4, #16]
 80014e2:	f003 0306 	and.w	r3, r3, #6
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf14      	ite	ne
 80014ea:	2500      	movne	r5, #0
 80014ec:	6833      	ldreq	r3, [r6, #0]
 80014ee:	f04f 0600 	mov.w	r6, #0
 80014f2:	bf08      	it	eq
 80014f4:	68e5      	ldreq	r5, [r4, #12]
 80014f6:	f104 041a 	add.w	r4, r4, #26
 80014fa:	bf08      	it	eq
 80014fc:	1aed      	subeq	r5, r5, r3
 80014fe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001502:	bf08      	it	eq
 8001504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001508:	4293      	cmp	r3, r2
 800150a:	bfc4      	itt	gt
 800150c:	1a9b      	subgt	r3, r3, r2
 800150e:	18ed      	addgt	r5, r5, r3
 8001510:	42b5      	cmp	r5, r6
 8001512:	d11a      	bne.n	800154a <_printf_common+0xd2>
 8001514:	2000      	movs	r0, #0
 8001516:	e008      	b.n	800152a <_printf_common+0xb2>
 8001518:	2301      	movs	r3, #1
 800151a:	4652      	mov	r2, sl
 800151c:	4641      	mov	r1, r8
 800151e:	4638      	mov	r0, r7
 8001520:	47c8      	blx	r9
 8001522:	3001      	adds	r0, #1
 8001524:	d103      	bne.n	800152e <_printf_common+0xb6>
 8001526:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800152a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800152e:	3501      	adds	r5, #1
 8001530:	e7c1      	b.n	80014b6 <_printf_common+0x3e>
 8001532:	2030      	movs	r0, #48	@ 0x30
 8001534:	18e1      	adds	r1, r4, r3
 8001536:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001540:	4422      	add	r2, r4
 8001542:	3302      	adds	r3, #2
 8001544:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001548:	e7c2      	b.n	80014d0 <_printf_common+0x58>
 800154a:	2301      	movs	r3, #1
 800154c:	4622      	mov	r2, r4
 800154e:	4641      	mov	r1, r8
 8001550:	4638      	mov	r0, r7
 8001552:	47c8      	blx	r9
 8001554:	3001      	adds	r0, #1
 8001556:	d0e6      	beq.n	8001526 <_printf_common+0xae>
 8001558:	3601      	adds	r6, #1
 800155a:	e7d9      	b.n	8001510 <_printf_common+0x98>

0800155c <_printf_i>:
 800155c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001560:	7e0f      	ldrb	r7, [r1, #24]
 8001562:	4691      	mov	r9, r2
 8001564:	2f78      	cmp	r7, #120	@ 0x78
 8001566:	4680      	mov	r8, r0
 8001568:	460c      	mov	r4, r1
 800156a:	469a      	mov	sl, r3
 800156c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800156e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001572:	d807      	bhi.n	8001584 <_printf_i+0x28>
 8001574:	2f62      	cmp	r7, #98	@ 0x62
 8001576:	d80a      	bhi.n	800158e <_printf_i+0x32>
 8001578:	2f00      	cmp	r7, #0
 800157a:	f000 80d1 	beq.w	8001720 <_printf_i+0x1c4>
 800157e:	2f58      	cmp	r7, #88	@ 0x58
 8001580:	f000 80b8 	beq.w	80016f4 <_printf_i+0x198>
 8001584:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001588:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800158c:	e03a      	b.n	8001604 <_printf_i+0xa8>
 800158e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001592:	2b15      	cmp	r3, #21
 8001594:	d8f6      	bhi.n	8001584 <_printf_i+0x28>
 8001596:	a101      	add	r1, pc, #4	@ (adr r1, 800159c <_printf_i+0x40>)
 8001598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800159c:	080015f5 	.word	0x080015f5
 80015a0:	08001609 	.word	0x08001609
 80015a4:	08001585 	.word	0x08001585
 80015a8:	08001585 	.word	0x08001585
 80015ac:	08001585 	.word	0x08001585
 80015b0:	08001585 	.word	0x08001585
 80015b4:	08001609 	.word	0x08001609
 80015b8:	08001585 	.word	0x08001585
 80015bc:	08001585 	.word	0x08001585
 80015c0:	08001585 	.word	0x08001585
 80015c4:	08001585 	.word	0x08001585
 80015c8:	08001707 	.word	0x08001707
 80015cc:	08001633 	.word	0x08001633
 80015d0:	080016c1 	.word	0x080016c1
 80015d4:	08001585 	.word	0x08001585
 80015d8:	08001585 	.word	0x08001585
 80015dc:	08001729 	.word	0x08001729
 80015e0:	08001585 	.word	0x08001585
 80015e4:	08001633 	.word	0x08001633
 80015e8:	08001585 	.word	0x08001585
 80015ec:	08001585 	.word	0x08001585
 80015f0:	080016c9 	.word	0x080016c9
 80015f4:	6833      	ldr	r3, [r6, #0]
 80015f6:	1d1a      	adds	r2, r3, #4
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6032      	str	r2, [r6, #0]
 80015fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001600:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001604:	2301      	movs	r3, #1
 8001606:	e09c      	b.n	8001742 <_printf_i+0x1e6>
 8001608:	6833      	ldr	r3, [r6, #0]
 800160a:	6820      	ldr	r0, [r4, #0]
 800160c:	1d19      	adds	r1, r3, #4
 800160e:	6031      	str	r1, [r6, #0]
 8001610:	0606      	lsls	r6, r0, #24
 8001612:	d501      	bpl.n	8001618 <_printf_i+0xbc>
 8001614:	681d      	ldr	r5, [r3, #0]
 8001616:	e003      	b.n	8001620 <_printf_i+0xc4>
 8001618:	0645      	lsls	r5, r0, #25
 800161a:	d5fb      	bpl.n	8001614 <_printf_i+0xb8>
 800161c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001620:	2d00      	cmp	r5, #0
 8001622:	da03      	bge.n	800162c <_printf_i+0xd0>
 8001624:	232d      	movs	r3, #45	@ 0x2d
 8001626:	426d      	negs	r5, r5
 8001628:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800162c:	230a      	movs	r3, #10
 800162e:	4858      	ldr	r0, [pc, #352]	@ (8001790 <_printf_i+0x234>)
 8001630:	e011      	b.n	8001656 <_printf_i+0xfa>
 8001632:	6821      	ldr	r1, [r4, #0]
 8001634:	6833      	ldr	r3, [r6, #0]
 8001636:	0608      	lsls	r0, r1, #24
 8001638:	f853 5b04 	ldr.w	r5, [r3], #4
 800163c:	d402      	bmi.n	8001644 <_printf_i+0xe8>
 800163e:	0649      	lsls	r1, r1, #25
 8001640:	bf48      	it	mi
 8001642:	b2ad      	uxthmi	r5, r5
 8001644:	2f6f      	cmp	r7, #111	@ 0x6f
 8001646:	6033      	str	r3, [r6, #0]
 8001648:	bf14      	ite	ne
 800164a:	230a      	movne	r3, #10
 800164c:	2308      	moveq	r3, #8
 800164e:	4850      	ldr	r0, [pc, #320]	@ (8001790 <_printf_i+0x234>)
 8001650:	2100      	movs	r1, #0
 8001652:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001656:	6866      	ldr	r6, [r4, #4]
 8001658:	2e00      	cmp	r6, #0
 800165a:	60a6      	str	r6, [r4, #8]
 800165c:	db05      	blt.n	800166a <_printf_i+0x10e>
 800165e:	6821      	ldr	r1, [r4, #0]
 8001660:	432e      	orrs	r6, r5
 8001662:	f021 0104 	bic.w	r1, r1, #4
 8001666:	6021      	str	r1, [r4, #0]
 8001668:	d04b      	beq.n	8001702 <_printf_i+0x1a6>
 800166a:	4616      	mov	r6, r2
 800166c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001670:	fb03 5711 	mls	r7, r3, r1, r5
 8001674:	5dc7      	ldrb	r7, [r0, r7]
 8001676:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800167a:	462f      	mov	r7, r5
 800167c:	42bb      	cmp	r3, r7
 800167e:	460d      	mov	r5, r1
 8001680:	d9f4      	bls.n	800166c <_printf_i+0x110>
 8001682:	2b08      	cmp	r3, #8
 8001684:	d10b      	bne.n	800169e <_printf_i+0x142>
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	07df      	lsls	r7, r3, #31
 800168a:	d508      	bpl.n	800169e <_printf_i+0x142>
 800168c:	6923      	ldr	r3, [r4, #16]
 800168e:	6861      	ldr	r1, [r4, #4]
 8001690:	4299      	cmp	r1, r3
 8001692:	bfde      	ittt	le
 8001694:	2330      	movle	r3, #48	@ 0x30
 8001696:	f806 3c01 	strble.w	r3, [r6, #-1]
 800169a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800169e:	1b92      	subs	r2, r2, r6
 80016a0:	6122      	str	r2, [r4, #16]
 80016a2:	464b      	mov	r3, r9
 80016a4:	4621      	mov	r1, r4
 80016a6:	4640      	mov	r0, r8
 80016a8:	f8cd a000 	str.w	sl, [sp]
 80016ac:	aa03      	add	r2, sp, #12
 80016ae:	f7ff fee3 	bl	8001478 <_printf_common>
 80016b2:	3001      	adds	r0, #1
 80016b4:	d14a      	bne.n	800174c <_printf_i+0x1f0>
 80016b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016ba:	b004      	add	sp, #16
 80016bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016c0:	6823      	ldr	r3, [r4, #0]
 80016c2:	f043 0320 	orr.w	r3, r3, #32
 80016c6:	6023      	str	r3, [r4, #0]
 80016c8:	2778      	movs	r7, #120	@ 0x78
 80016ca:	4832      	ldr	r0, [pc, #200]	@ (8001794 <_printf_i+0x238>)
 80016cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	6831      	ldr	r1, [r6, #0]
 80016d4:	061f      	lsls	r7, r3, #24
 80016d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80016da:	d402      	bmi.n	80016e2 <_printf_i+0x186>
 80016dc:	065f      	lsls	r7, r3, #25
 80016de:	bf48      	it	mi
 80016e0:	b2ad      	uxthmi	r5, r5
 80016e2:	6031      	str	r1, [r6, #0]
 80016e4:	07d9      	lsls	r1, r3, #31
 80016e6:	bf44      	itt	mi
 80016e8:	f043 0320 	orrmi.w	r3, r3, #32
 80016ec:	6023      	strmi	r3, [r4, #0]
 80016ee:	b11d      	cbz	r5, 80016f8 <_printf_i+0x19c>
 80016f0:	2310      	movs	r3, #16
 80016f2:	e7ad      	b.n	8001650 <_printf_i+0xf4>
 80016f4:	4826      	ldr	r0, [pc, #152]	@ (8001790 <_printf_i+0x234>)
 80016f6:	e7e9      	b.n	80016cc <_printf_i+0x170>
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	f023 0320 	bic.w	r3, r3, #32
 80016fe:	6023      	str	r3, [r4, #0]
 8001700:	e7f6      	b.n	80016f0 <_printf_i+0x194>
 8001702:	4616      	mov	r6, r2
 8001704:	e7bd      	b.n	8001682 <_printf_i+0x126>
 8001706:	6833      	ldr	r3, [r6, #0]
 8001708:	6825      	ldr	r5, [r4, #0]
 800170a:	1d18      	adds	r0, r3, #4
 800170c:	6961      	ldr	r1, [r4, #20]
 800170e:	6030      	str	r0, [r6, #0]
 8001710:	062e      	lsls	r6, r5, #24
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	d501      	bpl.n	800171a <_printf_i+0x1be>
 8001716:	6019      	str	r1, [r3, #0]
 8001718:	e002      	b.n	8001720 <_printf_i+0x1c4>
 800171a:	0668      	lsls	r0, r5, #25
 800171c:	d5fb      	bpl.n	8001716 <_printf_i+0x1ba>
 800171e:	8019      	strh	r1, [r3, #0]
 8001720:	2300      	movs	r3, #0
 8001722:	4616      	mov	r6, r2
 8001724:	6123      	str	r3, [r4, #16]
 8001726:	e7bc      	b.n	80016a2 <_printf_i+0x146>
 8001728:	6833      	ldr	r3, [r6, #0]
 800172a:	2100      	movs	r1, #0
 800172c:	1d1a      	adds	r2, r3, #4
 800172e:	6032      	str	r2, [r6, #0]
 8001730:	681e      	ldr	r6, [r3, #0]
 8001732:	6862      	ldr	r2, [r4, #4]
 8001734:	4630      	mov	r0, r6
 8001736:	f000 f859 	bl	80017ec <memchr>
 800173a:	b108      	cbz	r0, 8001740 <_printf_i+0x1e4>
 800173c:	1b80      	subs	r0, r0, r6
 800173e:	6060      	str	r0, [r4, #4]
 8001740:	6863      	ldr	r3, [r4, #4]
 8001742:	6123      	str	r3, [r4, #16]
 8001744:	2300      	movs	r3, #0
 8001746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800174a:	e7aa      	b.n	80016a2 <_printf_i+0x146>
 800174c:	4632      	mov	r2, r6
 800174e:	4649      	mov	r1, r9
 8001750:	4640      	mov	r0, r8
 8001752:	6923      	ldr	r3, [r4, #16]
 8001754:	47d0      	blx	sl
 8001756:	3001      	adds	r0, #1
 8001758:	d0ad      	beq.n	80016b6 <_printf_i+0x15a>
 800175a:	6823      	ldr	r3, [r4, #0]
 800175c:	079b      	lsls	r3, r3, #30
 800175e:	d413      	bmi.n	8001788 <_printf_i+0x22c>
 8001760:	68e0      	ldr	r0, [r4, #12]
 8001762:	9b03      	ldr	r3, [sp, #12]
 8001764:	4298      	cmp	r0, r3
 8001766:	bfb8      	it	lt
 8001768:	4618      	movlt	r0, r3
 800176a:	e7a6      	b.n	80016ba <_printf_i+0x15e>
 800176c:	2301      	movs	r3, #1
 800176e:	4632      	mov	r2, r6
 8001770:	4649      	mov	r1, r9
 8001772:	4640      	mov	r0, r8
 8001774:	47d0      	blx	sl
 8001776:	3001      	adds	r0, #1
 8001778:	d09d      	beq.n	80016b6 <_printf_i+0x15a>
 800177a:	3501      	adds	r5, #1
 800177c:	68e3      	ldr	r3, [r4, #12]
 800177e:	9903      	ldr	r1, [sp, #12]
 8001780:	1a5b      	subs	r3, r3, r1
 8001782:	42ab      	cmp	r3, r5
 8001784:	dcf2      	bgt.n	800176c <_printf_i+0x210>
 8001786:	e7eb      	b.n	8001760 <_printf_i+0x204>
 8001788:	2500      	movs	r5, #0
 800178a:	f104 0619 	add.w	r6, r4, #25
 800178e:	e7f5      	b.n	800177c <_printf_i+0x220>
 8001790:	08001c17 	.word	0x08001c17
 8001794:	08001c28 	.word	0x08001c28

08001798 <memmove>:
 8001798:	4288      	cmp	r0, r1
 800179a:	b510      	push	{r4, lr}
 800179c:	eb01 0402 	add.w	r4, r1, r2
 80017a0:	d902      	bls.n	80017a8 <memmove+0x10>
 80017a2:	4284      	cmp	r4, r0
 80017a4:	4623      	mov	r3, r4
 80017a6:	d807      	bhi.n	80017b8 <memmove+0x20>
 80017a8:	1e43      	subs	r3, r0, #1
 80017aa:	42a1      	cmp	r1, r4
 80017ac:	d008      	beq.n	80017c0 <memmove+0x28>
 80017ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80017b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80017b6:	e7f8      	b.n	80017aa <memmove+0x12>
 80017b8:	4601      	mov	r1, r0
 80017ba:	4402      	add	r2, r0
 80017bc:	428a      	cmp	r2, r1
 80017be:	d100      	bne.n	80017c2 <memmove+0x2a>
 80017c0:	bd10      	pop	{r4, pc}
 80017c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80017c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80017ca:	e7f7      	b.n	80017bc <memmove+0x24>

080017cc <_sbrk_r>:
 80017cc:	b538      	push	{r3, r4, r5, lr}
 80017ce:	2300      	movs	r3, #0
 80017d0:	4d05      	ldr	r5, [pc, #20]	@ (80017e8 <_sbrk_r+0x1c>)
 80017d2:	4604      	mov	r4, r0
 80017d4:	4608      	mov	r0, r1
 80017d6:	602b      	str	r3, [r5, #0]
 80017d8:	f7ff fada 	bl	8000d90 <_sbrk>
 80017dc:	1c43      	adds	r3, r0, #1
 80017de:	d102      	bne.n	80017e6 <_sbrk_r+0x1a>
 80017e0:	682b      	ldr	r3, [r5, #0]
 80017e2:	b103      	cbz	r3, 80017e6 <_sbrk_r+0x1a>
 80017e4:	6023      	str	r3, [r4, #0]
 80017e6:	bd38      	pop	{r3, r4, r5, pc}
 80017e8:	200001b8 	.word	0x200001b8

080017ec <memchr>:
 80017ec:	4603      	mov	r3, r0
 80017ee:	b510      	push	{r4, lr}
 80017f0:	b2c9      	uxtb	r1, r1
 80017f2:	4402      	add	r2, r0
 80017f4:	4293      	cmp	r3, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	d101      	bne.n	80017fe <memchr+0x12>
 80017fa:	2000      	movs	r0, #0
 80017fc:	e003      	b.n	8001806 <memchr+0x1a>
 80017fe:	7804      	ldrb	r4, [r0, #0]
 8001800:	3301      	adds	r3, #1
 8001802:	428c      	cmp	r4, r1
 8001804:	d1f6      	bne.n	80017f4 <memchr+0x8>
 8001806:	bd10      	pop	{r4, pc}

08001808 <memcpy>:
 8001808:	440a      	add	r2, r1
 800180a:	4291      	cmp	r1, r2
 800180c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001810:	d100      	bne.n	8001814 <memcpy+0xc>
 8001812:	4770      	bx	lr
 8001814:	b510      	push	{r4, lr}
 8001816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800181a:	4291      	cmp	r1, r2
 800181c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001820:	d1f9      	bne.n	8001816 <memcpy+0xe>
 8001822:	bd10      	pop	{r4, pc}

08001824 <_realloc_r>:
 8001824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001828:	4607      	mov	r7, r0
 800182a:	4614      	mov	r4, r2
 800182c:	460d      	mov	r5, r1
 800182e:	b921      	cbnz	r1, 800183a <_realloc_r+0x16>
 8001830:	4611      	mov	r1, r2
 8001832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001836:	f7ff bc3b 	b.w	80010b0 <_malloc_r>
 800183a:	b92a      	cbnz	r2, 8001848 <_realloc_r+0x24>
 800183c:	f7ff fbce 	bl	8000fdc <_free_r>
 8001840:	4625      	mov	r5, r4
 8001842:	4628      	mov	r0, r5
 8001844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001848:	f000 f81a 	bl	8001880 <_malloc_usable_size_r>
 800184c:	4284      	cmp	r4, r0
 800184e:	4606      	mov	r6, r0
 8001850:	d802      	bhi.n	8001858 <_realloc_r+0x34>
 8001852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001856:	d8f4      	bhi.n	8001842 <_realloc_r+0x1e>
 8001858:	4621      	mov	r1, r4
 800185a:	4638      	mov	r0, r7
 800185c:	f7ff fc28 	bl	80010b0 <_malloc_r>
 8001860:	4680      	mov	r8, r0
 8001862:	b908      	cbnz	r0, 8001868 <_realloc_r+0x44>
 8001864:	4645      	mov	r5, r8
 8001866:	e7ec      	b.n	8001842 <_realloc_r+0x1e>
 8001868:	42b4      	cmp	r4, r6
 800186a:	4622      	mov	r2, r4
 800186c:	4629      	mov	r1, r5
 800186e:	bf28      	it	cs
 8001870:	4632      	movcs	r2, r6
 8001872:	f7ff ffc9 	bl	8001808 <memcpy>
 8001876:	4629      	mov	r1, r5
 8001878:	4638      	mov	r0, r7
 800187a:	f7ff fbaf 	bl	8000fdc <_free_r>
 800187e:	e7f1      	b.n	8001864 <_realloc_r+0x40>

08001880 <_malloc_usable_size_r>:
 8001880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001884:	1f18      	subs	r0, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	bfbc      	itt	lt
 800188a:	580b      	ldrlt	r3, [r1, r0]
 800188c:	18c0      	addlt	r0, r0, r3
 800188e:	4770      	bx	lr

08001890 <_init>:
 8001890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001892:	bf00      	nop
 8001894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001896:	bc08      	pop	{r3}
 8001898:	469e      	mov	lr, r3
 800189a:	4770      	bx	lr

0800189c <_fini>:
 800189c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189e:	bf00      	nop
 80018a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018a2:	bc08      	pop	{r3}
 80018a4:	469e      	mov	lr, r3
 80018a6:	4770      	bx	lr
