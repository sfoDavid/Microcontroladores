
SysTick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002dc  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800040c  08000414  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00001414  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800040c  0800040c  00001414  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800040c  08000414  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0000140c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000410  08000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000414  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000414  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY
 12 .debug_info   000002e9  00000000  00000000  0000143d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000160  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00001888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003a  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff3c  00000000  00000000  0000191a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005b5  00000000  00000000  00011856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000541c4  00000000  00000000  00011e0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00065fcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a4  00000000  00000000  00066014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000660b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003f4 	.word	0x080003f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003f4 	.word	0x080003f4

08000170 <SysTick_Handler>:
#define LED_VERDE      (1 << 1)   // PC14
#define LED_AZUL       (1 << 10)  // PC15

// Função para configurar a interrupção do SysTick
void SysTick_Handler(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    SysTick_TASK++;  // Incrementa a cor
 8000174:	4b08      	ldr	r3, [pc, #32]	@ (8000198 <SysTick_Handler+0x28>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	b2da      	uxtb	r2, r3
 800017c:	4b06      	ldr	r3, [pc, #24]	@ (8000198 <SysTick_Handler+0x28>)
 800017e:	701a      	strb	r2, [r3, #0]
    if (SysTick_TASK > BRANCO) {
 8000180:	4b05      	ldr	r3, [pc, #20]	@ (8000198 <SysTick_Handler+0x28>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	2b07      	cmp	r3, #7
 8000186:	d902      	bls.n	800018e <SysTick_Handler+0x1e>
        SysTick_TASK = APAGADO;  // Reseta a contagem de cores
 8000188:	4b03      	ldr	r3, [pc, #12]	@ (8000198 <SysTick_Handler+0x28>)
 800018a:	2200      	movs	r2, #0
 800018c:	701a      	strb	r2, [r3, #0]
    }
}
 800018e:	bf00      	nop
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	2000001c 	.word	0x2000001c

0800019c <Set_LED_Color>:

// Função para acionar as cores do LED RGB
void Set_LED_Color(Cor color)
{
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	71fb      	strb	r3, [r7, #7]
    // Apaga todos os LEDs antes de configurar a nova cor
    GPIOB->ODR &= ~(LED_VERMELHO | LED_VERDE | LED_AZUL);
 80001a6:	4b2d      	ldr	r3, [pc, #180]	@ (800025c <Set_LED_Color+0xc0>)
 80001a8:	68db      	ldr	r3, [r3, #12]
 80001aa:	4a2c      	ldr	r2, [pc, #176]	@ (800025c <Set_LED_Color+0xc0>)
 80001ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80001b0:	f023 0303 	bic.w	r3, r3, #3
 80001b4:	60d3      	str	r3, [r2, #12]

    // Atribui as cores de acordo com o valor de 'color'
    switch(color)
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	3b01      	subs	r3, #1
 80001ba:	2b06      	cmp	r3, #6
 80001bc:	d847      	bhi.n	800024e <Set_LED_Color+0xb2>
 80001be:	a201      	add	r2, pc, #4	@ (adr r2, 80001c4 <Set_LED_Color+0x28>)
 80001c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001c4:	080001e1 	.word	0x080001e1
 80001c8:	080001ef 	.word	0x080001ef
 80001cc:	080001fd 	.word	0x080001fd
 80001d0:	0800020b 	.word	0x0800020b
 80001d4:	08000219 	.word	0x08000219
 80001d8:	0800022b 	.word	0x0800022b
 80001dc:	0800023d 	.word	0x0800023d
    {
        case VERMELHO:
            GPIOB->ODR |= LED_VERMELHO; // Acende o LED Vermelho
 80001e0:	4b1e      	ldr	r3, [pc, #120]	@ (800025c <Set_LED_Color+0xc0>)
 80001e2:	68db      	ldr	r3, [r3, #12]
 80001e4:	4a1d      	ldr	r2, [pc, #116]	@ (800025c <Set_LED_Color+0xc0>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	60d3      	str	r3, [r2, #12]
            break;
 80001ec:	e030      	b.n	8000250 <Set_LED_Color+0xb4>
        case VERDE:
            GPIOB->ODR |= LED_VERDE;    // Acende o LED Verde
 80001ee:	4b1b      	ldr	r3, [pc, #108]	@ (800025c <Set_LED_Color+0xc0>)
 80001f0:	68db      	ldr	r3, [r3, #12]
 80001f2:	4a1a      	ldr	r2, [pc, #104]	@ (800025c <Set_LED_Color+0xc0>)
 80001f4:	f043 0302 	orr.w	r3, r3, #2
 80001f8:	60d3      	str	r3, [r2, #12]
            break;
 80001fa:	e029      	b.n	8000250 <Set_LED_Color+0xb4>
        case AZUL:
            GPIOB->ODR |= LED_AZUL;     // Acende o LED Azul
 80001fc:	4b17      	ldr	r3, [pc, #92]	@ (800025c <Set_LED_Color+0xc0>)
 80001fe:	68db      	ldr	r3, [r3, #12]
 8000200:	4a16      	ldr	r2, [pc, #88]	@ (800025c <Set_LED_Color+0xc0>)
 8000202:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000206:	60d3      	str	r3, [r2, #12]
            break;
 8000208:	e022      	b.n	8000250 <Set_LED_Color+0xb4>
        case AMARELO:
            GPIOB->ODR |= (LED_VERMELHO | LED_VERDE); // Acende Vermelho e Verde (Amarelo)
 800020a:	4b14      	ldr	r3, [pc, #80]	@ (800025c <Set_LED_Color+0xc0>)
 800020c:	68db      	ldr	r3, [r3, #12]
 800020e:	4a13      	ldr	r2, [pc, #76]	@ (800025c <Set_LED_Color+0xc0>)
 8000210:	f043 0303 	orr.w	r3, r3, #3
 8000214:	60d3      	str	r3, [r2, #12]
            break;
 8000216:	e01b      	b.n	8000250 <Set_LED_Color+0xb4>
        case CIANO:
            GPIOB->ODR |= (LED_VERDE | LED_AZUL);    // Acende Verde e Azul (Ciano)
 8000218:	4b10      	ldr	r3, [pc, #64]	@ (800025c <Set_LED_Color+0xc0>)
 800021a:	68db      	ldr	r3, [r3, #12]
 800021c:	4a0f      	ldr	r2, [pc, #60]	@ (800025c <Set_LED_Color+0xc0>)
 800021e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000222:	f043 0302 	orr.w	r3, r3, #2
 8000226:	60d3      	str	r3, [r2, #12]
            break;
 8000228:	e012      	b.n	8000250 <Set_LED_Color+0xb4>
        case ROXO:
            GPIOB->ODR |= (LED_VERMELHO | LED_AZUL); // Acende Vermelho e Azul (Roxo)
 800022a:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <Set_LED_Color+0xc0>)
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	4a0b      	ldr	r2, [pc, #44]	@ (800025c <Set_LED_Color+0xc0>)
 8000230:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	60d3      	str	r3, [r2, #12]
            break;
 800023a:	e009      	b.n	8000250 <Set_LED_Color+0xb4>
        case BRANCO:
            GPIOB->ODR |= (LED_VERMELHO | LED_VERDE | LED_AZUL); // Acende todos os LEDs (Branco)
 800023c:	4b07      	ldr	r3, [pc, #28]	@ (800025c <Set_LED_Color+0xc0>)
 800023e:	68db      	ldr	r3, [r3, #12]
 8000240:	4a06      	ldr	r2, [pc, #24]	@ (800025c <Set_LED_Color+0xc0>)
 8000242:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000246:	f043 0303 	orr.w	r3, r3, #3
 800024a:	60d3      	str	r3, [r2, #12]
            break;
 800024c:	e000      	b.n	8000250 <Set_LED_Color+0xb4>
        case APAGADO:
        default:
            // Não acende nenhum LED
            break;
 800024e:	bf00      	nop
    }
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	bc80      	pop	{r7}
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40010c00 	.word	0x40010c00

08000260 <main>:

int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
    // Habilita o clock para o GPIOB
    RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000266:	4b37      	ldr	r3, [pc, #220]	@ (8000344 <main+0xe4>)
 8000268:	699b      	ldr	r3, [r3, #24]
 800026a:	4a36      	ldr	r2, [pc, #216]	@ (8000344 <main+0xe4>)
 800026c:	f043 0308 	orr.w	r3, r3, #8
 8000270:	6193      	str	r3, [r2, #24]

    // Configura os pinos PB0, PB1 e PB10 como saída
    GPIOB->CRL &= 0xFFFFFF00;
 8000272:	4b35      	ldr	r3, [pc, #212]	@ (8000348 <main+0xe8>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	4a34      	ldr	r2, [pc, #208]	@ (8000348 <main+0xe8>)
 8000278:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800027c:	6013      	str	r3, [r2, #0]
    GPIOB->CRH &= 0xFFFFF0FF;
 800027e:	4b32      	ldr	r3, [pc, #200]	@ (8000348 <main+0xe8>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	4a31      	ldr	r2, [pc, #196]	@ (8000348 <main+0xe8>)
 8000284:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000288:	6053      	str	r3, [r2, #4]
    GPIOB->CRL |= 0x00000022;
 800028a:	4b2f      	ldr	r3, [pc, #188]	@ (8000348 <main+0xe8>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a2e      	ldr	r2, [pc, #184]	@ (8000348 <main+0xe8>)
 8000290:	f043 0322 	orr.w	r3, r3, #34	@ 0x22
 8000294:	6013      	str	r3, [r2, #0]
    GPIOB->CRH |= 0x00000200;
 8000296:	4b2c      	ldr	r3, [pc, #176]	@ (8000348 <main+0xe8>)
 8000298:	685b      	ldr	r3, [r3, #4]
 800029a:	4a2b      	ldr	r2, [pc, #172]	@ (8000348 <main+0xe8>)
 800029c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002a0:	6053      	str	r3, [r2, #4]

    // Inicialmente apaga todos os LEDs
    Set_LED_Color(APAGADO);
 80002a2:	2000      	movs	r0, #0
 80002a4:	f7ff ff7a 	bl	800019c <Set_LED_Color>

    // Configuração do SysTick para gerar interrupções a cada 1 segundo
    uint32_t ticks = 1000000;  // 1 segundo (aproximadamente)
 80002a8:	4b28      	ldr	r3, [pc, #160]	@ (800034c <main+0xec>)
 80002aa:	607b      	str	r3, [r7, #4]
    if ((ticks - 1UL) <= 0xFFFFFFUL)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3b01      	subs	r3, #1
 80002b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80002b4:	d209      	bcs.n	80002ca <main+0x6a>
    {
        SysTick->LOAD  = (uint32_t)(ticks - 1UL);
 80002b6:	4a26      	ldr	r2, [pc, #152]	@ (8000350 <main+0xf0>)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	6053      	str	r3, [r2, #4]
        SysTick->VAL   = 0UL;  // Carrega o valor do contador SysTick
 80002be:	4b24      	ldr	r3, [pc, #144]	@ (8000350 <main+0xf0>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
        SysTick->CTRL  = (0 << 2) |  // SysTick_Clock = AHB/8
 80002c4:	4b22      	ldr	r3, [pc, #136]	@ (8000350 <main+0xf0>)
 80002c6:	2203      	movs	r2, #3
 80002c8:	601a      	str	r2, [r3, #0]

    while (1)
    {
        // O loop principal fica vazio, pois a troca de cores é feita na interrupção
        // O SysTick_Handler alterna as cores do LED a cada segundo
        switch (SysTick_TASK) {
 80002ca:	4b22      	ldr	r3, [pc, #136]	@ (8000354 <main+0xf4>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b07      	cmp	r3, #7
 80002d0:	d832      	bhi.n	8000338 <main+0xd8>
 80002d2:	a201      	add	r2, pc, #4	@ (adr r2, 80002d8 <main+0x78>)
 80002d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002d8:	080002f9 	.word	0x080002f9
 80002dc:	08000301 	.word	0x08000301
 80002e0:	08000309 	.word	0x08000309
 80002e4:	08000311 	.word	0x08000311
 80002e8:	08000319 	.word	0x08000319
 80002ec:	08000321 	.word	0x08000321
 80002f0:	08000329 	.word	0x08000329
 80002f4:	08000331 	.word	0x08000331
            case APAGADO:
                Set_LED_Color(APAGADO);
 80002f8:	2000      	movs	r0, #0
 80002fa:	f7ff ff4f 	bl	800019c <Set_LED_Color>
                break;
 80002fe:	e01f      	b.n	8000340 <main+0xe0>
            case VERMELHO:
                Set_LED_Color(VERMELHO);
 8000300:	2001      	movs	r0, #1
 8000302:	f7ff ff4b 	bl	800019c <Set_LED_Color>
                break;
 8000306:	e01b      	b.n	8000340 <main+0xe0>
            case VERDE:
                Set_LED_Color(VERDE);
 8000308:	2002      	movs	r0, #2
 800030a:	f7ff ff47 	bl	800019c <Set_LED_Color>
                break;
 800030e:	e017      	b.n	8000340 <main+0xe0>
            case AZUL:
                Set_LED_Color(AZUL);
 8000310:	2003      	movs	r0, #3
 8000312:	f7ff ff43 	bl	800019c <Set_LED_Color>
                break;
 8000316:	e013      	b.n	8000340 <main+0xe0>
            case AMARELO:
                Set_LED_Color(AMARELO);
 8000318:	2004      	movs	r0, #4
 800031a:	f7ff ff3f 	bl	800019c <Set_LED_Color>
                break;
 800031e:	e00f      	b.n	8000340 <main+0xe0>
            case CIANO:
                Set_LED_Color(CIANO);
 8000320:	2005      	movs	r0, #5
 8000322:	f7ff ff3b 	bl	800019c <Set_LED_Color>
                break;
 8000326:	e00b      	b.n	8000340 <main+0xe0>
            case ROXO:
                Set_LED_Color(ROXO);
 8000328:	2006      	movs	r0, #6
 800032a:	f7ff ff37 	bl	800019c <Set_LED_Color>
                break;
 800032e:	e007      	b.n	8000340 <main+0xe0>
            case BRANCO:
                Set_LED_Color(BRANCO);
 8000330:	2007      	movs	r0, #7
 8000332:	f7ff ff33 	bl	800019c <Set_LED_Color>
                break;
 8000336:	e003      	b.n	8000340 <main+0xe0>
            default:
                SysTick_TASK = APAGADO;  // Reseta para APAGADO se houver um erro
 8000338:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <main+0xf4>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
                break;
 800033e:	bf00      	nop
        switch (SysTick_TASK) {
 8000340:	e7c3      	b.n	80002ca <main+0x6a>
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000
 8000348:	40010c00 	.word	0x40010c00
 800034c:	000f4240 	.word	0x000f4240
 8000350:	e000e010 	.word	0xe000e010
 8000354:	2000001c 	.word	0x2000001c

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800035c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480c      	ldr	r0, [pc, #48]	@ (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490d      	ldr	r1, [pc, #52]	@ (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0d      	ldr	r2, [pc, #52]	@ (800039c <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0a      	ldr	r2, [pc, #40]	@ (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0a      	ldr	r4, [pc, #40]	@ (80003a4 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 f811 	bl	80003ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ff69 	bl	8000260 <main>

0800038e <LoopForever>:

LoopForever:
  b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800039c:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 80003a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003a4:	20000020 	.word	0x20000020

080003a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC1_2_IRQHandler>
	...

080003ac <__libc_init_array>:
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	2600      	movs	r6, #0
 80003b0:	4d0c      	ldr	r5, [pc, #48]	@ (80003e4 <__libc_init_array+0x38>)
 80003b2:	4c0d      	ldr	r4, [pc, #52]	@ (80003e8 <__libc_init_array+0x3c>)
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	42a6      	cmp	r6, r4
 80003ba:	d109      	bne.n	80003d0 <__libc_init_array+0x24>
 80003bc:	f000 f81a 	bl	80003f4 <_init>
 80003c0:	2600      	movs	r6, #0
 80003c2:	4d0a      	ldr	r5, [pc, #40]	@ (80003ec <__libc_init_array+0x40>)
 80003c4:	4c0a      	ldr	r4, [pc, #40]	@ (80003f0 <__libc_init_array+0x44>)
 80003c6:	1b64      	subs	r4, r4, r5
 80003c8:	10a4      	asrs	r4, r4, #2
 80003ca:	42a6      	cmp	r6, r4
 80003cc:	d105      	bne.n	80003da <__libc_init_array+0x2e>
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d4:	4798      	blx	r3
 80003d6:	3601      	adds	r6, #1
 80003d8:	e7ee      	b.n	80003b8 <__libc_init_array+0xc>
 80003da:	f855 3b04 	ldr.w	r3, [r5], #4
 80003de:	4798      	blx	r3
 80003e0:	3601      	adds	r6, #1
 80003e2:	e7f2      	b.n	80003ca <__libc_init_array+0x1e>
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	0800040c 	.word	0x0800040c
 80003ec:	0800040c 	.word	0x0800040c
 80003f0:	08000410 	.word	0x08000410

080003f4 <_init>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr

08000400 <_fini>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr
